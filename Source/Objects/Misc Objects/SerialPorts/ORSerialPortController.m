//--------------------------------------------------------
// ORSerialPortController
// Created by Mark  A. Howe on Wed 4/15/2009
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORSerialPortController.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "ORSerialPortModel.h"
#import "ORUSB.h"

@interface ORSerialPortController (private)
- (void) populatePortListPopup;
@end

@implementation ORSerialPortController

#pragma mark •••Initialization
- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
    [topLevelObjects release];

	[super dealloc];
}

- (void) awakeFromNib
{		
	if(!portControlsContent){
#if !defined(MAC_OS_X_VERSION_10_9)
        if ([NSBundle loadNibNamed:@"SerialPortControls" owner:self]){
#else
        if ([[NSBundle mainBundle] loadNibNamed:@"SerialPortControls" owner:self topLevelObjects:&topLevelObjects]){
#endif
            [topLevelObjects retain];
			[portControlsView setContentView:portControlsContent];
		}	
		else NSLog(@"Failed to load SerialPortControls.nib");
	}
    else {
		//[self populatePortListPopup];	
	}
}

#pragma mark •••Notifications
- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
	
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	
    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORSerialPortModelPortNameChanged
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(updatePortList:)
                         name : ORSerialPortListChanged
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(popupIsAboutToOpen:)
                         name : NSPopUpButtonWillPopUpNotification
                       object : portListPopup];
}
    
- (void) updateWindow
{
    [self updatePortList:nil];
    [self portNameChanged:nil];
    [self portStateChanged:nil];
}

- (void) updateButtons:(BOOL)locked
{
	BOOL portOpen = [[[owner model] serialPort] isOpen];
    [portListPopup setEnabled:!locked && !portOpen];
    [openPortButton setEnabled:!locked];
}
    
- (void) popupIsAboutToOpen:(NSNotification*)aNote
{
    NSArray* portList = [[ORSerialPortList sharedSerialPortList]portList];
    for (ORSerialPort *aPort in portList) {
        NSString* portName = [aPort name];
        [[portListPopup itemWithTitle:portName] setEnabled:![aPort isOpen]];
    }
}
    
- (void) updatePortList:(NSNotification*)aNote
{
    [self populatePortListPopup];
  //  [self updateButtons];
}
    
- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [[owner model] serialPort]){
        ORSerialPort* aPort = [[owner model] serialPort];
        if(aPort){
            [openPortButton setEnabled:YES];
            [[portListPopup itemWithTitle:[aPort name]] setEnabled:![aPort isOpen]];

            if([[[owner model] serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
		
		[self updateButtons:[owner portLocked]];
    }
}

- (void) portNameChanged:(NSNotification*)aNote
{
	if(aNote == nil || [aNote object] == [owner model]){
		NSString* portName = [[owner model] portName];
		[portListPopup selectItemAtIndex:0]; //the default
        NSArray* portList = [[ORSerialPortList sharedSerialPortList]portList];
		for (ORSerialPort *aPort in portList) {
			if([portName isEqualToString:[aPort name]]){
				[portListPopup selectItemWithTitle:portName];
				break;
			}
		}  
		[self portStateChanged:nil];
        [self updateButtons];
	}
}

- (BOOL) portLocked
{
	//subclasses should override to reflect the locked state of the port controls
	return NO;
}

- (void) updateButtons;
{
	BOOL portOpen    = [[[owner model] serialPort] isOpen];
	BOOL locked      = [self portLocked];
    BOOL noSelection = [portListPopup indexOfSelectedItem]==0;

    [portListPopup setEnabled:!locked && !portOpen];
    [openPortButton setEnabled:!locked && !noSelection];
    if(noSelection){
        [openPortButton setTitle:@"---"];
        [portStateField setTextColor:[NSColor blackColor]];
        [portStateField setStringValue:@"---"];
    }
}

#pragma mark •••Actions
- (IBAction) portListAction:(id) sender
{
    [[owner model] setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [[owner model] openPort:![[[owner model] serialPort] isOpen]];
}
@end

@implementation ORSerialPortController (private)
- (void) populatePortListPopup
{
    [portListPopup setAutoenablesItems:NO];

    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];
    NSArray* serialPorts = [[ORSerialPortList sharedSerialPortList] portList];
	for (ORSerialPort* aPort in serialPorts) {
        NSString* portName = [aPort name];
        if([portName length]!=0){
            [portListPopup addItemWithTitle:[aPort name]];
        }
	}
    NSString* portName = [[owner model] portName];
    if([portName length]!=0){
        NSUInteger index = [portListPopup indexOfItemWithTitle:portName];
        if(index>0)[portListPopup selectItemWithTitle:portName];
        else [portListPopup selectItemAtIndex:0];
    }
    else {
        [portListPopup selectItemAtIndex:0];
    }
}
@end

