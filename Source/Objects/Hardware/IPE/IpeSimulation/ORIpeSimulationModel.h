//--------------------------------------------------------
// ORIpeSimulationModel
// Created by Till Bergmann, October 2010
// Till.Bergmann@kit.edu
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
//-----------------------------------------------------------
//Disclaimer: Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files
#import "ORAdcProcessing.h"
#import "ORDataChainObject.h"

#pragma mark ***Forward Declarations
@class ORSensorItem;

/* Dodo-List:
 *
 * -could try using asynchronous download of csv files, see UsingNSURLConnection.html keyword: NSURLConnection (-tb-)
 *  (file://localhost/Developer/Documentation/DocSets/com.apple.ADC_Reference_Library.CoreReference.docset/Contents/Resources/Documents/documentation/Cocoa/Conceptual/URLLoadingSystem/Tasks/UsingNSURLConnection.html#//apple_ref/doc/uid/20001836-BAJEAIEE)
 * Class: NSURLConnection
 */
/*********************************************************************-tb-
 * GLOBAL FUNCTIONS AND DEFINITIONS
 *********************************************************************/
 

/*********************************************************************-tb-
 * CLASSES
 *********************************************************************/

/** This class provides a list of items (or sensors or controls). These channels can be used in the Orca processing framework
  * as input channels. The channel values are read from the ADEI system (by sending http requests to the ADEI system).
  *
  * The channels are free configurable. They can be configured by requesting all available sensor descriptions from the ADEI system
  * and assigning one of these sensors to one of the channels. The available sensors are grouped in a tree structured
  * hierarchy and are displayed in a outline view. From there a sensor can easily be assigned to a channel (drag&drop).
  *
  * The slow control interface provides the ADEI web interface in a web view for monitoring a sensors values graphically.
  *
  * 2009-12: Now controls have been added. Controls are similar to Sensors with the extension that a setpoint can be sent to a control.
  *
  * <br>
  * Details: <br>
  *
  * The class holds a list of channel/sensor items (stored in #requestCache, #pollingLookUp and #channelLookup) and a tree (the ADEI hierarchy) of sensor items (starting at #itemTreeRoot).
  * For channels and sensors we use the same class structure ORSensorItem.
  * Sensors in the list may or may not have a sibling in the tree.
  * So we may or may not have the tree and independently of the tree are able to load the sensor values of
  * the sensors listed in the #requestCache. So the requestCache can be saved in the .Orca file and used without tree.
  * The tree in fact is only necessary for defining the sensors in the "channel map".
  *
  * 
  */
#define kResponseTimeHistogramSize 15000

@interface ORIpeSimulationModel : OrcaObject <ORAdcProcessing>
{
    uint32_t    channelDataId;
 	NSString*		 IPNumber;
	NSMutableArray*	 connectionHistory;
	NSInteger 		 ipNumberIndex;
    int				 pollTime;
	
	NSMutableArray* itemTreeRoot;
	NSString*		lastRequest;
    BOOL			viewItemName;
    int				itemType;
    double			setPoint;
    BOOL			fastGenSetup;
	BOOL			checkingForTimeouts;
	
	NSMutableDictionary* requestCache;	//items to poll. Also contains extra info for the processing system
                                        // These holds also the deleted item (for undo) and the items created by a Orca script -tb-
	NSMutableArray*		 pollingLookUp;	//a look up table for itemKey by index; 
                                        //this represents the contents of the list view (subset of requestCache) -tb-
	NSMutableDictionary* channelLookup; //a look up table for itemKey by channel
                                        //this represents the contents of the list view (subset of requestCache) -tb-
	
	NSMutableDictionary* pendingRequests;	//itemKeys in this are requests that have not come back
	int32_t histogram[kResponseTimeHistogramSize];
    int timeOutCount;
    int totalRequestCount;
    BOOL shipRecords;
    BOOL showDebugOutput;
    NSString* configFileName;
    NSString* executableFileName;
    BOOL executableIsRunning;
    NSString* fieldlineImageFileName;
}

#pragma mark ***Initialization
- (id)   init;
- (id)   initBasics;
- (void) dealloc;
- (void) setUpImage;
- (void) makeMainController;
- (void) clearHistory;

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Data Records
- (void) setDataIds:(id)assigner;
- (void) syncDataIdsWith:(id)anotherCard;
- (uint32_t) channelDataId;
- (void) setChannelDataId:(uint32_t) aValue;

#pragma mark ***Accessors
- (NSString*) fieldlineImageFileName;
- (void) setFieldlineImageFileName:(NSString*)aFieldlineImageFileName;

- (BOOL) executableIsRunning;
- (void) setExecutableIsRunning:(BOOL)aExecutableIsRunning;
- (NSString*) executableFileName;
- (void) setExecutableFileName:(NSString*)aExecutableFileName;
- (NSString*) configFileName;
- (void) setConfigFileName:(NSString*)aConfigFileName;
- (BOOL) showDebugOutput;
- (void) setShowDebugOutput:(BOOL)aShowDebugOutput;
- (BOOL) shipRecords;
- (void) setShipRecords:(BOOL)aShipRecords;
- (int) totalRequestCount;
- (void) setTotalRequestCount:(int)aTotalRequestCount;
- (int) timeOutCount;
- (void) setTimeOutCount:(int)aTimeOutCount;
- (BOOL) fastGenSetup;
- (void) setFastGenSetup:(BOOL)aFastGenSetup;
- (double) setPoint;
- (void) setSetPoint:(double)aSetPoint;
- (int) itemType;
- (void) setItemType:(int)aItemType;
- (BOOL) viewItemName;
- (void) setViewItemName:(BOOL)aViewItemName;
- (NSUInteger) connectionHistoryCount;
- (id) connectionHistoryItem:(NSUInteger)index;
- (NSString*) IPNumber;
- (void) setIPNumber:(NSString*)aIPNumber;
- (NSString*) ipNumberToURL;
- (NSArray*) itemTreeRoot;
- (int) pollTime;
- (void) setPollTime:(int)aPollTime;
- (NSString*) lastRequest;
- (void) setLastRequest:(NSString*)aString;
- (void) loadItemTree;
- (void) addItems:(NSArray*)aSensorPathArray;
- (NSString*) itemKey:aUrl path:aPath;
- (void) removeSet:(NSIndexSet*)aSetToRemove;
- (NSUInteger) pendingRequestsCount;
- (id) pendingRequest:(id)aKey forIndex:(int)anIndex;

- (void)          dumpSensorlist;
- (void)	      pollSlowControls;
- (NSString*)     createWebRequestForItem:(int)aChannel;
- (NSString*)	  itemDetails:(int)index;

#pragma mark ‚Ä¢‚Ä¢‚Ä¢*** Simulation Task Handler
- (void) startStopExecutable;
- (void) startExecutable;
- (void) startPlotter;
- (void) reloadFieldlineImage;
- (void)checkATaskStatus:(NSNotification *)aNotification;

#pragma mark ***Polling Cache
- (NSUInteger)  pollingLookUpCount;
- (NSString*) requestCacheItemKey:(int)anIndex;
- (NSDictionary*) requestCacheItem:(int)anIndex;

- (NSMutableDictionary*) topLevelPollingDictionary:(id)anItemKey;
- (int)	 nextUnusedChannelNumber;
- (BOOL) itemExists:(int)anIndex;
- (BOOL) channelExists:(int)aChan;
- (BOOL) isControlItem:(int)anIndex;
- (BOOL) isControlItemWithItemKey:(NSString*)itemKey;
- (void) makeChannelLookup;
- (int) channelNumberForItemKey:(NSString*) anItemKey;  //works on requestCache
- (int) setChannelNumber:(int) aChan forItemKey:(NSString*) anItemKey ;//works on requestCache and channelLookup

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Statistics
- (void) histogram:(int)milliSecs;
- (int32_t) dataTimeHist:(int)index;

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Archival
- (id) initWithCoder:(NSCoder*)decoder;
- (void) encodeWithCoder:(NSCoder*)encoder;

- (NSDictionary*) dataRecordDescription;
- (NSMutableDictionary*) addParametersToDictionary:(NSMutableDictionary*)dictionary;

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Adc or Bit Processing Protocol
- (void)processIsStarting;
- (void)processIsStopping;
- (void) startProcessCycle;
- (void) endProcessCycle;
- (BOOL) processValue:(int)channel;
- (NSString*) processingTitle;
- (double) convertedValue:(int)channel;
- (double) maxValueForChan:(int)channel;
- (double) minValueForChan:(int)channel;
- (void) getAlarmRangeLow:(double*)theLowLimit high:(double*)theHighLimit  channel:(int)channel;

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Helpers
- (NSString*) identifier;
- (NSMutableDictionary*) makeTopLevelDictionary;

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Main Scripting Methods
//Scripts really shouldn't call any other methods unless you -REALLY- know what you're doing!
- (int) findChanOfSensor:(NSString*)aUrl path:(NSString*)aPath;
- (int) findChanOfControl:(NSString*)aUrl path:(NSString*)aPath;

- (void) postRequestForChan:(int)aChan;
- (void) postControlSetpointForChan:(int)aChan value:(double)aValue;
- (BOOL) requestIsPendingForChan:(int)aChan;
- (double) valueForChan:(int)aChan;
- (double) valueForItemKey:(NSString*)itemKey;


//following methods are not recommended (use "...ForChan:" instead of "...aUrl path:..." functions) -tb-
- (int) findChanOfIndex:(int)anIndex;
- (void) postSensorRequest:(NSString*)aUrl path:(NSString*)aPath;
- (void) postControlRequest:(NSString*)aUrl path:(NSString*)aPath;
- (void) postControlSetpoint:(NSString*)aUrl path:(NSString*)aPath value:(double)aValue;
- (BOOL) requestIsPending:(NSString*)aUrl path:(NSString*)aPath;
- (BOOL) requestIsPending:(NSString*)itemKey;
- (double) valueForUrl:(NSString*)aUrl path:(NSString*)aPath;

//dont use in scripts:
- (void) writeSetPoint:(int)anIndex value:(double)aValue;

@end

#pragma mark ‚Ä¢‚Ä¢‚Ä¢Notification Strings
extern NSString* ORIpeSimulationModelFieldlineImageFileNameChanged;
extern NSString* ORIpeSimulationModelFieldlineImageChanged;
extern NSString* ORIpeSimulationModelExecutableIsRunningChanged;
extern NSString* ORIpeSimulationModelExecutableFileNameChanged;
extern NSString* ORIpeSimulationModelConfigFileNameChanged;
extern NSString* ORIpeSimulationModelShowDebugOutputChanged;
extern NSString* ORIpeSimulationModelShipRecordsChanged;
extern NSString* ORIpeSimulationModelTotalRequestCountChanged;
extern NSString* ORIpeSimulationModelTimeOutCountChanged;
extern NSString* ORIpeSimulationModelFastGenSetupChanged;
extern NSString* ORIpeSimulationModelSetPointChanged;
extern NSString* ORIpeSimulationModelItemTypeChanged;
extern NSString* ORIpeSimulationModelViewItemNameChanged;
extern NSString* ORIpeSimulationLock;
extern NSString* ORIpeSimulationItemListChanged;
extern NSString* ORIpeSimulationPollTimeChanged;
extern NSString* ORIpeSimulationLastRequestChanged;
extern NSString* SBC_LinkIPNumberChanged;
extern NSString* ORIpeSimulationIPNumberChanged;
extern NSString* ORIpeSimulationItemTreeChanged;
extern NSString* ORIpeSimulationModelHistogramChanged;
extern NSString* ORIpeSimulationPendingRequestsChanged;

// this is for testing and debugging the  code -tb- 2008-12-08
//#define __ORCA_DEVELOPMENT__CONFIGURATION__
#ifdef __ORCA_DEVELOPMENT__CONFIGURATION__

#define USE_TILLS_DEBUG_MACRO //<--- to switch on/off debug output use/comment out this line -tb-
#ifdef USE_TILLS_DEBUG_MACRO
#define    DebugTB(x) x
#else
#define    DebugTB(x) 
#endif

#if 1
// if 1 all methods will print out a message -> for testing IB connections -tb-
#define    DebugMethCallsTB(x) x
#else
#define    DebugMethCallsTB(x) 
#endif

#else
#define    DebugTB(x) 
#define    DebugMethCallsTB(x) 
#endif

