//--------------------------------------------------------
// ORTDC3377Controller
// Created by Mark  A. Howe on Tue Aug 02 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORTDC3377Controller.h"
#import "ORTDC3377Model.h"


@interface ORTDC3377Controller (private)
- (void) updateButtons;
@end

@implementation ORTDC3377Controller

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"TDC3377"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
	 [super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];

    [notifyCenter addObserver : self
                     selector : @selector(slotChanged:)
                         name : ORCamacCardSlotChangedNotification
                       object : model];
    
    [notifyCenter addObserver : self
                     selector : @selector(settingsLockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(settingsLockChanged:)
                         name : ORTDC3377SettingsLock
                        object: nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(runModeChanged:)
                         name : ORTDC3377ModelRunModeChanged
                       object : model];

    [notifyCenter addObserver : self
                     selector : @selector(dataShiftChanged:)
                         name : ORTDC3377ModelDataShiftChanged
                       object : model];


    [notifyCenter addObserver : self
                     selector : @selector(bothEdgesChanged:)
                         name : ORTDC3377ModelBothEdgesChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(feraModeChanged:)
                         name : ORTDC3377ModelFeraModeChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(multiEventBufferModeChanged:)
                         name : ORTDC3377ModelMultiEventBufferModeChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(skipHeaderChanged:)
                         name : ORTDC3377ModelSkipHeaderChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(fastFeraModeChanged:)
                         name : ORTDC3377ModelFastFeraModeChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(testEnabledChanged:)
                         name : ORTDC3377ModelTestEnabledChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(pulseWidthChanged:)
                         name : ORTDC3377ModelPulseWidthChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(pulseDelayChanged:)
                         name : ORTDC3377ModelPulseDelayChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(clockUnitChanged:)
                         name : ORTDC3377ModelClockUnitChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(pauseIntervalChanged:)
                         name : ORTDC3377ModelPauseIntervalChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(maxHitsPerTDCChanged:)
                         name : ORTDC3377ModelMaxHitsPerTDCChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(maxFullScaleTimeChanged:)
                         name : ORTDC3377ModelMaxFullScaleTimeChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(requestDelayChanged:)
                         name : ORTDC3377ModelRequestDelayChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(dataOffsetChanged:)
                         name : ORTDC3377ModelDataOffsetChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(timeoutChanged:)
                         name : ORTDC3377ModelTimeoutChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(testClockChanged:)
                         name : ORTDC3377ModelTestClockChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(pulsesToGenerateChanged:)
                         name : ORTDC3377ModelPulsesToGenerateChanged
                       object : model];

    [notifyCenter addObserver : self
                     selector : @selector(testingStatusChanged:)
                         name : ORTDC3377ModelTestingStatusChanged
                       object : model];

    [notifyCenter addObserver : self
                     selector : @selector(testingEnabledChanged:)
                         name : ORTDC3377ModelTestingEnabledChanged
                       object : model];
	
    [notifyCenter addObserver : self
                     selector : @selector(runModeChanged:)
                         name : ORTDC3377ModelTestsRunningChanged
                       object : model];


}

- (void) updateWindow
{
    [super updateWindow];
    [self slotChanged:nil];
    [self runModeChanged:nil];
    [self settingsLockChanged:nil];

    [self dataShiftChanged:nil];
    [self bothEdgesChanged:nil];
    [self feraModeChanged:nil];
    [self multiEventBufferModeChanged:nil];
    [self skipHeaderChanged:nil];
    [self fastFeraModeChanged:nil];
    [self testEnabledChanged:nil];
    [self pulseWidthChanged:nil];
    [self pulseDelayChanged:nil];
    [self clockUnitChanged:nil];
    [self pauseIntervalChanged:nil];
    [self maxHitsPerTDCChanged:nil];
    [self maxFullScaleTimeChanged:nil];
    [self requestDelayChanged:nil];
    [self dataOffsetChanged:nil];
    [self timeoutChanged:nil];
    [self testClockChanged:nil];
    [self pulsesToGenerateChanged:nil];
	[self testingStatusChanged:nil];
	[self testingEnabledChanged:nil];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORTDC3377SettingsLock to:secure];
    [settingLockButton setEnabled:secure];
}

- (void) settingsLockChanged:(NSNotification*)aNotification
{
    [self updateButtons];
}


- (void) testingStatusChanged:(NSNotification*)aNotification
{
	int i;
	for(i=0;i<kNum3377TDCTests;i++){
		[[testingStatusMatrix cellWithTag:i] setStringValue:[model testingStatus:i]];
	}
}

- (void) testingEnabledChanged:(NSNotification*)aNotification
{
	int i;
	for(i=0;i<kNum3377TDCTests;i++){
		[[testingEnabledMatrix cellWithTag:i] setIntValue:[model testingEnabled:i]];
	}
}

- (void) slotChanged:(NSNotification*)aNotification
{
	[[self window] setTitle:[NSString stringWithFormat:@"TDC3377 (Station %d)",(int)[model stationNumber]]];
}

- (void) runModeChanged:(NSNotification*)aNotification
{
	[runModePopUp selectItemAtIndex:[model controlMode]];
	[self updateButtons];
}

- (void) dataShiftChanged:(NSNotification*)aNotification
{
	[dataShiftPopup selectItemAtIndex:[model dataShift]];
}

- (void) bothEdgesChanged:(NSNotification*)aNotification
{
	[bothEdgesMatrix selectCellWithTag:[model bothEdges]];
}

- (void) feraModeChanged:(NSNotification*)aNotification
{
	[feraModeMatrix selectCellWithTag:[model feraMode]];
	[self updateButtons];
}

- (void) multiEventBufferModeChanged:(NSNotification*)aNotification
{
	[multiEventBufferModeMatrix selectCellWithTag:[model multiEventBufferMode]];
}

- (void) skipHeaderChanged:(NSNotification*)aNotification
{
	[skipHeaderMatrix selectCellWithTag:[model skipHeader]];
}

- (void) fastFeraModeChanged:(NSNotification*)aNotification
{
	[fastFeraModeMatrix selectCellWithTag:[model fastFeraMode]];
}

- (void) testEnabledChanged:(NSNotification*)aNotification
{
	[testEnabledMatrix selectCellWithTag:[model testEnabled]];
}

- (void) pulseWidthChanged:(NSNotification*)aNotification
{
	[pulseWidthField setIntValue:[model pulseWidth]];
}

- (void) pulseDelayChanged:(NSNotification*)aNotification
{
	[pulseDelayField setIntValue:[model pulseDelay]];
}

- (void) clockUnitChanged:(NSNotification*)aNotification
{
	[clockUnitPopup selectItemAtIndex:[model clockUnit]];
}

- (void) pauseIntervalChanged:(NSNotification*)aNotification
{
	[pauseIntervalPopup selectItemAtIndex:[model pauseInterval]];
}

- (void) maxHitsPerTDCChanged:(NSNotification*)aNotification
{
	[maxHitsPerTDCField setIntValue:[model maxHitsPerTDC]];
}

- (void) maxFullScaleTimeChanged:(NSNotification*)aNotification
{
	[maxFullScaleTimeField setIntValue:[model maxFullScaleTime]];
}

- (void) requestDelayChanged:(NSNotification*)aNotification
{
	[requestDelayField setIntValue:[model requestDelay]];
}

- (void) dataOffsetChanged:(NSNotification*)aNotification
{
	[dataOffsetField setIntValue:[model dataOffset]];
}

- (void) timeoutChanged:(NSNotification*)aNotification
{
	[timeoutField setIntValue:[model timeOut]];
}

- (void) testClockChanged:(NSNotification*)aNotification
{
	[testClockPopup selectItemAtIndex:[model testClock]];
}

- (void) pulsesToGenerateChanged:(NSNotification*)aNotification
{
	[pulsesToGenerateField setIntValue:[model pulsesToGenerate]];
}


#pragma mark ***Actions
- (IBAction) settingLockAction:(id) sender
{
    [gSecurity tryToSetLock:ORTDC3377SettingsLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) runModeAction:(id)sender
{
	if([runModePopUp indexOfSelectedItem] != [model controlMode]){
		[[self undoManager] setActionName: @"Set Run Mode"];
		[model setControlMode:(int)[runModePopUp indexOfSelectedItem]];
	}
}

- (IBAction) dataShiftAction:(id)sender
{
    if([[dataShiftPopup selectedCell] tag] != [model dataShift]){
		[[self undoManager] setActionName: @"Set Data Shift"];
		[model setDataShift:[dataShiftPopup indexOfSelectedItem]];
    }
}

- (IBAction) bothEdgesAction:(id)sender
{
    if([[bothEdgesMatrix selectedCell] tag] != [model bothEdges]){
		[[self undoManager] setActionName: @"Set Both Edges"];
		[model setBothEdges:[[bothEdgesMatrix selectedCell] tag]];
    }
}

- (IBAction) feraModeAction:(id)sender
{
    if([[feraModeMatrix selectedCell] tag] != [model feraMode]){
		[[self undoManager] setActionName: @"Set FERA Mode"];
		[model setFeraMode:[[feraModeMatrix selectedCell] tag]];
    }
}

- (IBAction) multiEventBufferModeAction:(id)sender
{
    if([[multiEventBufferModeMatrix selectedCell] tag] != [model multiEventBufferMode]){
		[[self undoManager] setActionName: @"Set multiEvent Buffer Mode"];
		[model setMultiEventBufferMode:[[multiEventBufferModeMatrix selectedCell] tag]];
    }
}

- (IBAction) skipHeaderAction:(id)sender
{
    if([[skipHeaderMatrix selectedCell] tag] != [model skipHeader]){
		[[self undoManager] setActionName: @"Set Skip Header"];
		[model setSkipHeader:[[skipHeaderMatrix selectedCell] tag]];
    }
}

- (IBAction) fastFeraModeAction:(id)sender
{
    if([[fastFeraModeMatrix selectedCell] tag] != [model fastFeraMode]){
		[[self undoManager] setActionName: @"Set fast FERA"];
		[model setFastFeraMode:[[fastFeraModeMatrix selectedCell] tag]];
    }
}

- (IBAction) testEnabledAction:(id)sender
{
    if([[testEnabledMatrix selectedCell] tag] != [model testEnabled]){
		[[self undoManager] setActionName: @"Set Test Enabled"];
		[model setTestEnabled:[[testEnabledMatrix selectedCell] tag]];
    }
}

- (IBAction) pulseWidthAction:(id)sender
{
    if([pulseWidthField intValue] != [model pulseWidth]){
		[[self undoManager] setActionName: @"Set Pulse Width"];
		[model setPulseWidth:[pulseWidthField intValue]];
    }
}

- (IBAction) pulseDelayAction:(id)sender
{
    if([pulseDelayField intValue] != [model pulseDelay]){
		[[self undoManager] setActionName: @"Set Pulse Delay"];
		[model setPulseDelay:[pulseDelayField intValue]];
    }
}

- (IBAction) clockUnitAction:(id)sender
{
    if([clockUnitPopup intValue] != [model clockUnit]){
		[[self undoManager] setActionName: @"Set Clock Unit"];
		[model setClockUnit:[clockUnitPopup indexOfSelectedItem]];
    }
}

- (IBAction) pauseIntervalAction:(id)sender
{
    if([pauseIntervalPopup indexOfSelectedItem] != [model pauseInterval]){
		[[self undoManager] setActionName: @"Set Pause Interval"];
		[model setPauseInterval:[pauseIntervalPopup indexOfSelectedItem]];
    }
}

- (IBAction) maxHitsPerTDCAction:(id)sender
{
    if([maxHitsPerTDCField intValue] != [model maxHitsPerTDC]){
		[[self undoManager] setActionName: @"Set Max HitsPerTDC"];
		[model setMaxHitsPerTDC:[maxHitsPerTDCField intValue]];
    }
}

- (IBAction) maxFullScaleTimeAction:(id)sender
{
    if([maxFullScaleTimeField intValue] != [model maxFullScaleTime]){
		[[self undoManager] setActionName: @"Set Max Full Scale Time"];
		[model setMaxFullScaleTime:[maxFullScaleTimeField intValue]];
    }
}

- (IBAction) requestDelayAction:(id)sender
{
    if([requestDelayField intValue] != [model requestDelay]){
		[[self undoManager] setActionName: @"Set Request Delay"];
		[model setRequestDelay:[requestDelayField intValue]];
    }
}

- (IBAction) dataOffsetAction:(id)sender
{
    if([dataOffsetField intValue] != [model dataOffset]){
		[[self undoManager] setActionName: @"Set Data Offset"];
		[model setDataOffset:[dataOffsetField intValue]];
    }
}

- (IBAction) timeoutAction:(id)sender
{
    if([timeoutField intValue] != [model timeOut]){
		[[self undoManager] setActionName: @"Set Timeout"];
		[model setTimeOut:[timeoutField intValue]];
    }
}

- (IBAction) testClockAction:(id)sender
{
    if([testClockPopup indexOfSelectedItem] != [model testClock]){
		[[self undoManager] setActionName: @"Set Test Clock"];
		[model setTestClock:[testClockPopup indexOfSelectedItem]];
    }
}

- (IBAction) pulsesToGenerateAction:(id)sender
{
    if([pulsesToGenerateField intValue] != [model pulsesToGenerate]){
		[[self undoManager] setActionName: @"Set Pulses To Generate"];
		[model setPulsesToGenerate:[pulsesToGenerateField intValue]];
    }
}

- (IBAction) loadAction:(id)sender
{
    if([model loadTheMode]){
        [model formatRegisters];
        [model loadRegisters:YES];
    }
}

- (IBAction) readBackAction:(id)sender
{
	[model readBackRegisters:NO];
}

- (IBAction) checkEventAction:(id)sender
{
	[model checkEvent];
}
- (IBAction) testAction:(id)sender
{
	[model runTests];
}

- (IBAction) testingEnabledAction:(id)sender
{
	NSMutableArray* anArray = [NSMutableArray array];
	int i;
	for(i=0;i<kNum3377TDCTests;i++){
		if([[testingEnabledMatrix cellWithTag:i] intValue])[anArray addObject:[NSNumber numberWithBool:YES]];
		else [anArray addObject:[NSNumber numberWithBool:NO]];
	}
	[model setTestingEnabled:anArray];
}


@end

@implementation ORTDC3377Controller (private)
- (void) updateButtons
{
    BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL locked = [gSecurity isLocked:ORTDC3377SettingsLock];

    BOOL inRunMode0 = [model controlMode] == 0;
    BOOL inRunMode1 = [model controlMode] == 1;
    BOOL inRunMode2 = [model controlMode] == 2;
    BOOL inRunMode3 = [model controlMode] == 3;
    BOOL inRunMode0or1 = inRunMode0 |inRunMode1;
    BOOL inRunMode0or2 = inRunMode0 |inRunMode2;
    BOOL inRunMode1or3 = inRunMode1 |inRunMode3;
    BOOL inRunMode0or1or2 = inRunMode0 | inRunMode1 | inRunMode2;
    
	BOOL testsAreRunning = [model testsRunning];
	BOOL testingOrRunning = testsAreRunning | runInProgress;
	
    [settingLockButton setState: locked];
    [runModePopUp setEnabled:!locked && !runInProgress];
    
    [dataShiftPopup setEnabled:!locked && !testingOrRunning && inRunMode0or1]; // 0,1,-,-
    [bothEdgesMatrix setEnabled:!locked && !testingOrRunning];                 // 0,1,2,3
    [feraModeMatrix setEnabled:!locked && !testingOrRunning];                  // 0,1,2,3
    [multiEventBufferModeMatrix setEnabled:!locked && !testingOrRunning];      // 0,1,2,3
    [skipHeaderMatrix setEnabled:!locked && !testingOrRunning];                // 0,1,2,3

    
    [pulseWidthField setEnabled:!locked && !testingOrRunning && inRunMode0or2];            // 0,-,2,
    [pulseDelayField setEnabled:!locked && !testingOrRunning && inRunMode0or2];            // 0,-,2,
    [clockUnitPopup setEnabled:!locked && !testingOrRunning && inRunMode0or2];             // 0,-,2,
    [pauseIntervalPopup setEnabled:!locked && !testingOrRunning];         // 0,1,2,3
    [fastFeraModeMatrix setEnabled:!locked && !testingOrRunning];         // 0,1,2,3
    
    [maxHitsPerTDCField setEnabled:!locked && !testingOrRunning];         // 0,1,2,3
    [maxFullScaleTimeField setEnabled:!locked && !testingOrRunning && inRunMode0or1or2];      // 0,1,2,
    
    [requestDelayField setEnabled:!locked && !testingOrRunning && [model feraMode]];          // 0,1,2,3
    [dataOffsetField setEnabled:!locked && !testingOrRunning && inRunMode0];            // 0,-,-,
    
    [timeoutField setEnabled:!locked && !testingOrRunning && inRunMode1or3];               // -,1,-,3
    [testEnabledMatrix setEnabled:!locked && !testingOrRunning && inRunMode1or3];          // -,1,-,3
    [testClockPopup setEnabled:!locked && !testingOrRunning && inRunMode1or3];             // -,1,-,3
    [pulsesToGenerateField setEnabled:!locked && !testingOrRunning && inRunMode1or3];      // -,1,-,3


    [loadButton setEnabled: !testingOrRunning];
    [readBackButton setEnabled: !testingOrRunning];
    [checkEventButton setEnabled: !testingOrRunning];
	if(testsAreRunning){
		[testButton setEnabled: YES];
		[testButton setTitle: @"Stop"];
	}
    else {
		[testButton setEnabled: !runInProgress];	
		[testButton setTitle: @"Test"];
	}
   
}
@end

