/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VXI11_H_RPCGEN
#define _VXI11_H_RPCGEN

#define RPCGEN_VERSION	199506

#include <rpc/rpc.h>                                               

#define VXI_OK           0   /* no error */                                         
#define VXI_SYNERR       1   /* syntax error */                                     
#define VXI_NOACCESS     3   /* device not accessible */                            
#define VXI_INVLINK      4   /* invalid link identifier */                          
#define VXI_PARAMERR     5   /* parameter error */                                  
#define VXI_NOCHAN       6   /* channel not established */                          
#define VXI_NOTSUPP      8   /* operation not supported */                          
#define VXI_NORES        9   /* out of resources */                                 
#define VXI_DEVLOCK      11  /* device locked by another link */                    
#define VXI_NOLOCK       12  /* no lock held by this link */                        
#define VXI_IOTIMEOUT    15  /* I/O timeout */                                      
#define VXI_IOERR        17  /* I/O error */                                        
#define VXI_INVADDR      21  /* invalid address */                                  
#define VXI_ABORT        23  /* abort */                                            
#define VXI_CHANEXIST    29  /* channel already established */                      
                                                                                    
/* VXI-11 flags  */                                                                 
                                                                                    
#define VXI_WAITLOCK     1   /* block the operation on a locked device */           
#define VXI_ENDW         8   /* device_write: mark last char with END indicator */  
#define VXI_TERMCHRSET   128 /* device_read: stop on termination character */       
                                                                                    
/* VXI-11 read termination reasons */                                               
                                                                                    
#define VXI_REQCNT       1   /* requested # of bytes have been transferred */       
#define VXI_CHR          2   /* termination character matched */                    
#define VXI_ENDR         4   /* END indicator read */                               



                                         
#ifdef __LP64__                                                          
typedef int Device_Link;                                                 
#else                                                                    
typedef int32_t Device_Link;                                                
#endif                                                                   

#ifdef __cplusplus
extern "C" bool_t xdr_Device_Link(XDR *, Device_Link*);
#elif __STDC__
extern  bool_t xdr_Device_Link(XDR *, Device_Link*);
#else /* Old Style C */
bool_t xdr_Device_Link();
#endif /* Old Style C */


enum Device_AddrFamily {
	DEVICE_TCP = 0,
	DEVICE_UDP = 1,
};
typedef enum Device_AddrFamily Device_AddrFamily;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_AddrFamily(XDR *, Device_AddrFamily*);
#elif __STDC__
extern  bool_t xdr_Device_AddrFamily(XDR *, Device_AddrFamily*);
#else /* Old Style C */
bool_t xdr_Device_AddrFamily();
#endif /* Old Style C */


                                        
#ifdef __LP64__                                                          
typedef int Device_Flags;                                                
#else                                                                    
typedef int32_t Device_Flags;                                               
#endif                                                                   

#ifdef __cplusplus
extern "C" bool_t xdr_Device_Flags(XDR *, Device_Flags*);
#elif __STDC__
extern  bool_t xdr_Device_Flags(XDR *, Device_Flags*);
#else /* Old Style C */
bool_t xdr_Device_Flags();
#endif /* Old Style C */


                                    
#ifdef __LP64__                                                          
typedef int Device_ErrorCode;                                            
#else                                                                    
typedef int32_t Device_ErrorCode;                                           
#endif                                                                   

#ifdef __cplusplus
extern "C" bool_t xdr_Device_ErrorCode(XDR *, Device_ErrorCode*);
#elif __STDC__
extern  bool_t xdr_Device_ErrorCode(XDR *, Device_ErrorCode*);
#else /* Old Style C */
bool_t xdr_Device_ErrorCode();
#endif /* Old Style C */


struct Device_Error {
	Device_ErrorCode error;
};
typedef struct Device_Error Device_Error;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_Error(XDR *, Device_Error*);
#elif __STDC__
extern  bool_t xdr_Device_Error(XDR *, Device_Error*);
#else /* Old Style C */
bool_t xdr_Device_Error();
#endif /* Old Style C */


struct Create_LinkParms {
                                          
#ifdef __LP64__                                                          
	int clientId;                                                                
#else                                                                    
	int32_t clientId;                                                               
#endif                                                                   

	bool_t lockDevice;
                                              
#ifdef __LP64__                                                          
	unsigned int lock_timeout;                                                       
#else                                                                    
	u_long lock_timeout;                                                             
#endif                                                                   

	char *device;
};
typedef struct Create_LinkParms Create_LinkParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Create_LinkParms(XDR *, Create_LinkParms*);
#elif __STDC__
extern  bool_t xdr_Create_LinkParms(XDR *, Create_LinkParms*);
#else /* Old Style C */
bool_t xdr_Create_LinkParms();
#endif /* Old Style C */


struct Create_LinkResp {
	Device_ErrorCode error;
	Device_Link lid;
	u_short abortPort;
                                              
#ifdef __LP64__                                                          
	unsigned int maxRecvSize;                                                       
#else                                                                    
	u_long maxRecvSize;                                                             
#endif                                                                   

};
typedef struct Create_LinkResp Create_LinkResp;
#ifdef __cplusplus
extern "C" bool_t xdr_Create_LinkResp(XDR *, Create_LinkResp*);
#elif __STDC__
extern  bool_t xdr_Create_LinkResp(XDR *, Create_LinkResp*);
#else /* Old Style C */
bool_t xdr_Create_LinkResp();
#endif /* Old Style C */


struct Device_WriteParms {
	Device_Link lid;
                                              
#ifdef __LP64__                                                          
	unsigned int io_timeout;                                                       
#else                                                                    
	u_long io_timeout;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int lock_timeout;                                                       
#else                                                                    
	u_long lock_timeout;                                                             
#endif                                                                   

	Device_Flags flags;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct Device_WriteParms Device_WriteParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_WriteParms(XDR *, Device_WriteParms*);
#elif __STDC__
extern  bool_t xdr_Device_WriteParms(XDR *, Device_WriteParms*);
#else /* Old Style C */
bool_t xdr_Device_WriteParms();
#endif /* Old Style C */


struct Device_WriteResp {
	Device_ErrorCode error;
                                              
#ifdef __LP64__                                                          
	unsigned int size;                                                       
#else                                                                    
	u_long size;                                                             
#endif                                                                   

};
typedef struct Device_WriteResp Device_WriteResp;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_WriteResp(XDR *, Device_WriteResp*);
#elif __STDC__
extern  bool_t xdr_Device_WriteResp(XDR *, Device_WriteResp*);
#else /* Old Style C */
bool_t xdr_Device_WriteResp();
#endif /* Old Style C */


struct Device_ReadParms {
	Device_Link lid;
                                              
#ifdef __LP64__                                                          
	unsigned int requestSize;                                                       
#else                                                                    
	u_long requestSize;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int io_timeout;                                                       
#else                                                                    
	u_long io_timeout;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int lock_timeout;                                                       
#else                                                                    
	u_long lock_timeout;                                                             
#endif                                                                   

	Device_Flags flags;
	char termChar;
};
typedef struct Device_ReadParms Device_ReadParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_ReadParms(XDR *, Device_ReadParms*);
#elif __STDC__
extern  bool_t xdr_Device_ReadParms(XDR *, Device_ReadParms*);
#else /* Old Style C */
bool_t xdr_Device_ReadParms();
#endif /* Old Style C */


struct Device_ReadResp {
	Device_ErrorCode error;
                                          
#ifdef __LP64__                                                          
	int reason;                                                                
#else                                                                    
	int32_t reason;                                                               
#endif                                                                   

	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct Device_ReadResp Device_ReadResp;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_ReadResp(XDR *, Device_ReadResp*);
#elif __STDC__
extern  bool_t xdr_Device_ReadResp(XDR *, Device_ReadResp*);
#else /* Old Style C */
bool_t xdr_Device_ReadResp();
#endif /* Old Style C */


struct Device_ReadStbResp {
	Device_ErrorCode error;
	u_char stb;
};
typedef struct Device_ReadStbResp Device_ReadStbResp;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_ReadStbResp(XDR *, Device_ReadStbResp*);
#elif __STDC__
extern  bool_t xdr_Device_ReadStbResp(XDR *, Device_ReadStbResp*);
#else /* Old Style C */
bool_t xdr_Device_ReadStbResp();
#endif /* Old Style C */


struct Device_GenericParms {
	Device_Link lid;
	Device_Flags flags;
                                              
#ifdef __LP64__                                                          
	unsigned int lock_timeout;                                                       
#else                                                                    
	u_long lock_timeout;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int io_timeout;                                                       
#else                                                                    
	u_long io_timeout;                                                             
#endif                                                                   

};
typedef struct Device_GenericParms Device_GenericParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_GenericParms(XDR *, Device_GenericParms*);
#elif __STDC__
extern  bool_t xdr_Device_GenericParms(XDR *, Device_GenericParms*);
#else /* Old Style C */
bool_t xdr_Device_GenericParms();
#endif /* Old Style C */


struct Device_RemoteFunc {
                                              
#ifdef __LP64__                                                          
	unsigned int hostAddr;                                                       
#else                                                                    
	u_long hostAddr;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int hostPort;                                                       
#else                                                                    
	u_long hostPort;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int progNum;                                                       
#else                                                                    
	u_long progNum;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int progVers;                                                       
#else                                                                    
	u_long progVers;                                                             
#endif                                                                   

	Device_AddrFamily progFamily;
};
typedef struct Device_RemoteFunc Device_RemoteFunc;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_RemoteFunc(XDR *, Device_RemoteFunc*);
#elif __STDC__
extern  bool_t xdr_Device_RemoteFunc(XDR *, Device_RemoteFunc*);
#else /* Old Style C */
bool_t xdr_Device_RemoteFunc();
#endif /* Old Style C */


struct Device_EnableSrqParms {
	Device_Link lid;
	bool_t enable;
	struct {
		u_int handle_len;
		char *handle_val;
	} handle;
};
typedef struct Device_EnableSrqParms Device_EnableSrqParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_EnableSrqParms(XDR *, Device_EnableSrqParms*);
#elif __STDC__
extern  bool_t xdr_Device_EnableSrqParms(XDR *, Device_EnableSrqParms*);
#else /* Old Style C */
bool_t xdr_Device_EnableSrqParms();
#endif /* Old Style C */


struct Device_LockParms {
	Device_Link lid;
	Device_Flags flags;
                                              
#ifdef __LP64__                                                          
	unsigned int lock_timeout;                                                       
#else                                                                    
	u_long lock_timeout;                                                             
#endif                                                                   

};
typedef struct Device_LockParms Device_LockParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_LockParms(XDR *, Device_LockParms*);
#elif __STDC__
extern  bool_t xdr_Device_LockParms(XDR *, Device_LockParms*);
#else /* Old Style C */
bool_t xdr_Device_LockParms();
#endif /* Old Style C */


struct Device_DocmdParms {
	Device_Link lid;
	Device_Flags flags;
                                              
#ifdef __LP64__                                                          
	unsigned int io_timeout;                                                       
#else                                                                    
	u_long io_timeout;                                                             
#endif                                                                   

                                              
#ifdef __LP64__                                                          
	unsigned int lock_timeout;                                                       
#else                                                                    
	u_long lock_timeout;                                                             
#endif                                                                   

                                          
#ifdef __LP64__                                                          
	int cmd;                                                                
#else                                                                    
	int32_t cmd;                                                               
#endif                                                                   

	bool_t network_order;
                                          
#ifdef __LP64__                                                          
	int datasize;                                                                
#else                                                                    
	int32_t datasize;                                                               
#endif                                                                   

	struct {
		u_int data_in_len;
		char *data_in_val;
	} data_in;
};
typedef struct Device_DocmdParms Device_DocmdParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_DocmdParms(XDR *, Device_DocmdParms*);
#elif __STDC__
extern  bool_t xdr_Device_DocmdParms(XDR *, Device_DocmdParms*);
#else /* Old Style C */
bool_t xdr_Device_DocmdParms();
#endif /* Old Style C */


struct Device_DocmdResp {
	Device_ErrorCode error;
	struct {
		u_int data_out_len;
		char *data_out_val;
	} data_out;
};
typedef struct Device_DocmdResp Device_DocmdResp;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_DocmdResp(XDR *, Device_DocmdResp*);
#elif __STDC__
extern  bool_t xdr_Device_DocmdResp(XDR *, Device_DocmdResp*);
#else /* Old Style C */
bool_t xdr_Device_DocmdResp();
#endif /* Old Style C */


struct Device_SrqParms {
	struct {
		u_int handle_len;
		char *handle_val;
	} handle;
};
typedef struct Device_SrqParms Device_SrqParms;
#ifdef __cplusplus
extern "C" bool_t xdr_Device_SrqParms(XDR *, Device_SrqParms*);
#elif __STDC__
extern  bool_t xdr_Device_SrqParms(XDR *, Device_SrqParms*);
#else /* Old Style C */
bool_t xdr_Device_SrqParms();
#endif /* Old Style C */


#define DEVICE_ASYNC ((rpc_uint)0x0607B0)
#define DEVICE_ASYNC_VERSION ((rpc_uint)1)

#ifdef __cplusplus
#define device_abort ((rpc_uint)1)
extern "C" Device_Error * device_abort_1(Device_Link *, CLIENT *);
extern "C" Device_Error * device_abort_1_svc(Device_Link *, struct svc_req *);

#elif __STDC__
#define device_abort ((rpc_uint)1)
extern  Device_Error * device_abort_1(Device_Link *, CLIENT *);
extern  Device_Error * device_abort_1_svc(Device_Link *, struct svc_req *);

#else /* Old Style C */
#define device_abort ((rpc_uint)1)
extern  Device_Error * device_abort_1();
extern  Device_Error * device_abort_1_svc();
#endif /* Old Style C */

#define DEVICE_CORE ((rpc_uint)0x0607AF)
#define DEVICE_CORE_VERSION ((rpc_uint)1)

#ifdef __cplusplus
#define create_link ((rpc_uint)10)
extern "C" Create_LinkResp * create_link_1(Create_LinkParms *, CLIENT *);
extern "C" Create_LinkResp * create_link_1_svc(Create_LinkParms *, struct svc_req *);
#define device_write ((rpc_uint)11)
extern "C" Device_WriteResp * device_write_1(Device_WriteParms *, CLIENT *);
extern "C" Device_WriteResp * device_write_1_svc(Device_WriteParms *, struct svc_req *);
#define device_read ((rpc_uint)12)
extern "C" Device_ReadResp * device_read_1(Device_ReadParms *, CLIENT *);
extern "C" Device_ReadResp * device_read_1_svc(Device_ReadParms *, struct svc_req *);
#define device_readstb ((rpc_uint)13)
extern "C" Device_ReadStbResp * device_readstb_1(Device_GenericParms *, CLIENT *);
extern "C" Device_ReadStbResp * device_readstb_1_svc(Device_GenericParms *, struct svc_req *);
#define device_trigger ((rpc_uint)14)
extern "C" Device_Error * device_trigger_1(Device_GenericParms *, CLIENT *);
extern "C" Device_Error * device_trigger_1_svc(Device_GenericParms *, struct svc_req *);
#define device_clear ((rpc_uint)15)
extern "C" Device_Error * device_clear_1(Device_GenericParms *, CLIENT *);
extern "C" Device_Error * device_clear_1_svc(Device_GenericParms *, struct svc_req *);
#define device_remote ((rpc_uint)16)
extern "C" Device_Error * device_remote_1(Device_GenericParms *, CLIENT *);
extern "C" Device_Error * device_remote_1_svc(Device_GenericParms *, struct svc_req *);
#define device_local ((rpc_uint)17)
extern "C" Device_Error * device_local_1(Device_GenericParms *, CLIENT *);
extern "C" Device_Error * device_local_1_svc(Device_GenericParms *, struct svc_req *);
#define device_lock ((rpc_uint)18)
extern "C" Device_Error * device_lock_1(Device_LockParms *, CLIENT *);
extern "C" Device_Error * device_lock_1_svc(Device_LockParms *, struct svc_req *);
#define device_unlock ((rpc_uint)19)
extern "C" Device_Error * device_unlock_1(Device_Link *, CLIENT *);
extern "C" Device_Error * device_unlock_1_svc(Device_Link *, struct svc_req *);
#define device_enable_srq ((rpc_uint)20)
extern "C" Device_Error * device_enable_srq_1(Device_EnableSrqParms *, CLIENT *);
extern "C" Device_Error * device_enable_srq_1_svc(Device_EnableSrqParms *, struct svc_req *);
#define device_docmd ((rpc_uint)22)
extern "C" Device_DocmdResp * device_docmd_1(Device_DocmdParms *, CLIENT *);
extern "C" Device_DocmdResp * device_docmd_1_svc(Device_DocmdParms *, struct svc_req *);
#define destroy_link ((rpc_uint)23)
extern "C" Device_Error * destroy_link_1(Device_Link *, CLIENT *);
extern "C" Device_Error * destroy_link_1_svc(Device_Link *, struct svc_req *);
#define create_intr_chan ((rpc_uint)25)
extern "C" Device_Error * create_intr_chan_1(Device_RemoteFunc *, CLIENT *);
extern "C" Device_Error * create_intr_chan_1_svc(Device_RemoteFunc *, struct svc_req *);
#define destroy_intr_chan ((rpc_uint)26)
extern "C" Device_Error * destroy_intr_chan_1(void *, CLIENT *);
extern "C" Device_Error * destroy_intr_chan_1_svc(void *, struct svc_req *);

#elif __STDC__
#define create_link ((rpc_uint)10)
extern  Create_LinkResp * create_link_1(Create_LinkParms *, CLIENT *);
extern  Create_LinkResp * create_link_1_svc(Create_LinkParms *, struct svc_req *);
#define device_write ((rpc_uint)11)
extern  Device_WriteResp * device_write_1(Device_WriteParms *, CLIENT *);
extern  Device_WriteResp * device_write_1_svc(Device_WriteParms *, struct svc_req *);
#define device_read ((rpc_uint)12)
extern  Device_ReadResp * device_read_1(Device_ReadParms *, CLIENT *);
extern  Device_ReadResp * device_read_1_svc(Device_ReadParms *, struct svc_req *);
#define device_readstb ((rpc_uint)13)
extern  Device_ReadStbResp * device_readstb_1(Device_GenericParms *, CLIENT *);
extern  Device_ReadStbResp * device_readstb_1_svc(Device_GenericParms *, struct svc_req *);
#define device_trigger ((rpc_uint)14)
extern  Device_Error * device_trigger_1(Device_GenericParms *, CLIENT *);
extern  Device_Error * device_trigger_1_svc(Device_GenericParms *, struct svc_req *);
#define device_clear ((rpc_uint)15)
extern  Device_Error * device_clear_1(Device_GenericParms *, CLIENT *);
extern  Device_Error * device_clear_1_svc(Device_GenericParms *, struct svc_req *);
#define device_remote ((rpc_uint)16)
extern  Device_Error * device_remote_1(Device_GenericParms *, CLIENT *);
extern  Device_Error * device_remote_1_svc(Device_GenericParms *, struct svc_req *);
#define device_local ((rpc_uint)17)
extern  Device_Error * device_local_1(Device_GenericParms *, CLIENT *);
extern  Device_Error * device_local_1_svc(Device_GenericParms *, struct svc_req *);
#define device_lock ((rpc_uint)18)
extern  Device_Error * device_lock_1(Device_LockParms *, CLIENT *);
extern  Device_Error * device_lock_1_svc(Device_LockParms *, struct svc_req *);
#define device_unlock ((rpc_uint)19)
extern  Device_Error * device_unlock_1(Device_Link *, CLIENT *);
extern  Device_Error * device_unlock_1_svc(Device_Link *, struct svc_req *);
#define device_enable_srq ((rpc_uint)20)
extern  Device_Error * device_enable_srq_1(Device_EnableSrqParms *, CLIENT *);
extern  Device_Error * device_enable_srq_1_svc(Device_EnableSrqParms *, struct svc_req *);
#define device_docmd ((rpc_uint)22)
extern  Device_DocmdResp * device_docmd_1(Device_DocmdParms *, CLIENT *);
extern  Device_DocmdResp * device_docmd_1_svc(Device_DocmdParms *, struct svc_req *);
#define destroy_link ((rpc_uint)23)
extern  Device_Error * destroy_link_1(Device_Link *, CLIENT *);
extern  Device_Error * destroy_link_1_svc(Device_Link *, struct svc_req *);
#define create_intr_chan ((rpc_uint)25)
extern  Device_Error * create_intr_chan_1(Device_RemoteFunc *, CLIENT *);
extern  Device_Error * create_intr_chan_1_svc(Device_RemoteFunc *, struct svc_req *);
#define destroy_intr_chan ((rpc_uint)26)
extern  Device_Error * destroy_intr_chan_1(void *, CLIENT *);
extern  Device_Error * destroy_intr_chan_1_svc(void *, struct svc_req *);

#else /* Old Style C */
#define create_link ((rpc_uint)10)
extern  Create_LinkResp * create_link_1();
extern  Create_LinkResp * create_link_1_svc();
#define device_write ((rpc_uint)11)
extern  Device_WriteResp * device_write_1();
extern  Device_WriteResp * device_write_1_svc();
#define device_read ((rpc_uint)12)
extern  Device_ReadResp * device_read_1();
extern  Device_ReadResp * device_read_1_svc();
#define device_readstb ((rpc_uint)13)
extern  Device_ReadStbResp * device_readstb_1();
extern  Device_ReadStbResp * device_readstb_1_svc();
#define device_trigger ((rpc_uint)14)
extern  Device_Error * device_trigger_1();
extern  Device_Error * device_trigger_1_svc();
#define device_clear ((rpc_uint)15)
extern  Device_Error * device_clear_1();
extern  Device_Error * device_clear_1_svc();
#define device_remote ((rpc_uint)16)
extern  Device_Error * device_remote_1();
extern  Device_Error * device_remote_1_svc();
#define device_local ((rpc_uint)17)
extern  Device_Error * device_local_1();
extern  Device_Error * device_local_1_svc();
#define device_lock ((rpc_uint)18)
extern  Device_Error * device_lock_1();
extern  Device_Error * device_lock_1_svc();
#define device_unlock ((rpc_uint)19)
extern  Device_Error * device_unlock_1();
extern  Device_Error * device_unlock_1_svc();
#define device_enable_srq ((rpc_uint)20)
extern  Device_Error * device_enable_srq_1();
extern  Device_Error * device_enable_srq_1_svc();
#define device_docmd ((rpc_uint)22)
extern  Device_DocmdResp * device_docmd_1();
extern  Device_DocmdResp * device_docmd_1_svc();
#define destroy_link ((rpc_uint)23)
extern  Device_Error * destroy_link_1();
extern  Device_Error * destroy_link_1_svc();
#define create_intr_chan ((rpc_uint)25)
extern  Device_Error * create_intr_chan_1();
extern  Device_Error * create_intr_chan_1_svc();
#define destroy_intr_chan ((rpc_uint)26)
extern  Device_Error * destroy_intr_chan_1();
extern  Device_Error * destroy_intr_chan_1_svc();
#endif /* Old Style C */

#define DEVICE_INTR ((rpc_uint)0x0607B1)
#define DEVICE_INTR_VERSION ((rpc_uint)1)

#ifdef __cplusplus
#define device_intr_srq ((rpc_uint)30)
extern "C" void * device_intr_srq_1(Device_SrqParms *, CLIENT *);
extern "C" void * device_intr_srq_1_svc(Device_SrqParms *, struct svc_req *);

#elif __STDC__
#define device_intr_srq ((rpc_uint)30)
extern  void * device_intr_srq_1(Device_SrqParms *, CLIENT *);
extern  void * device_intr_srq_1_svc(Device_SrqParms *, struct svc_req *);

#else /* Old Style C */
#define device_intr_srq ((rpc_uint)30)
extern  void * device_intr_srq_1();
extern  void * device_intr_srq_1_svc();
#endif /* Old Style C */

#endif /* !_VXI11_H_RPCGEN */
