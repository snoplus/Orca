//--------------------------------------------------------
// ORAmi286Controller
// Created by Mark  A. Howe on Fri Sept 14, 2007
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORAmi286Controller.h"
#import "ORAmi286Model.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"
#import "ORTimeRate.h"
#import "ORLevelMonitor.h"
#import "ORSerialPortController.h"

@implementation ORAmi286Controller

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"Ami286"];
	return self;
}

- (void) dealloc
{
	[NSObject cancelPreviousPerformRequestsWithTarget:self];
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [[plotter0 yAxis] setRngLow:0.0 withHigh:100.];
	[[plotter0 yAxis] setRngLimitsLow:0.0 withHigh:100 withMinRng:10];
	
	int i;
	for(i=0;i<4;i++){
		ORTimeLinePlot* aPlot;
		aPlot= [[ORTimeLinePlot alloc] initWithTag:i andDataSource:self];
		[plotter0 addPlot: aPlot];
		[aPlot setLineColor:[self colorForDataSet:i]];
		
		[(ORTimeAxis*)[plotter0 xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
		[aPlot release];
	}	
	
	
	[monitor0 setShowFillPoints:YES];
	[monitor1 setShowFillPoints:YES];
    [super awakeFromNib];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORAmi286Lock];;
}


#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(stateChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(stateChanged:)
                         name : ORAmi286Lock
                        object: nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORAmi286ModelPollTimeChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(shipLevelsChanged:)
                         name : ORAmi286ModelShipLevelsChanged
						object: model];
	
    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];
	
    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];
	
    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(updateMonitor:)
                         name : ORAmi286Update
                       object : model];
	
    [notifyCenter addObserver : self
                     selector : @selector(enabledMaskChanged:)
                         name : ORAmi286ModelEnabledMaskChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(fillStateChanged:)
                         name : ORAmi286FillStateChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(alarmLevelChanged:)
                         name : ORAmi286AlarmLevelChanged
						object: model];

	[notifyCenter addObserver : self
                     selector : @selector(fillPointChanged:)
                         name : ORAmi286FillPointChanged
						object: model];
	
	
    [notifyCenter addObserver : self
                     selector : @selector(eMailEnabledChanged:)
                         name : ORAmi286EMailEnabledChanged
                       object : model];
	
    [notifyCenter addObserver : self
                     selector : @selector(tableViewSelectionDidChange:)
                         name : NSTableViewSelectionDidChangeNotification
                       object : addressList];
	
    [notifyCenter addObserver : self
                     selector : @selector(sendOnValveChangeChanged:)
                         name : ORAmi286ModelSendOnValveChangeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(sendOnExpiredChanged:)
                         name : ORAmi286ModelSendOnExpiredChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(expiredTimeChanged:)
                         name : ORAmi286ModelExpiredTimeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(sendOnAlarmChanged:)
                         name : ORAmi286ModelSendOnAlarmChanged
						object: model];

	[serialPortController registerNotificationObservers];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"AMI 286 (Unit %lu)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self stateChanged:nil];
	[self pollTimeChanged:nil];
	[self shipLevelsChanged:nil];
	[self updateTimePlot:nil];
	[self updateMonitor:nil];
	[self alarmLevelChanged:nil];
	[self fillPointChanged:nil];
	[self fillStateChanged:nil];
	[self enabledMaskChanged:nil];
    [self miscAttributesChanged:nil];
	[self eMailEnabledChanged:nil];
	[addressList reloadData];
	[self tableViewSelectionDidChange:nil];
	[self sendOnValveChangeChanged:nil];
	[self sendOnExpiredChanged:nil];
	[self expiredTimeChanged:nil];
	[self sendOnAlarmChanged:nil];
	[serialPortController updateWindow];
}

- (void) sendOnAlarmChanged:(NSNotification*)aNote
{
	[sendOnAlarmCB setIntValue: [model sendOnAlarm]];
}

- (void) expiredTimeChanged:(NSNotification*)aNote
{
	[expiredTimeField setIntValue: [model expiredTime]];
}

- (void) sendOnExpiredChanged:(NSNotification*)aNote
{
	[sendOnExpiredCB setIntValue: [model sendOnExpired]];
}

- (void) sendOnValveChangeChanged:(NSNotification*)aNote
{
	[sendOnValveChangeCB setIntValue: [model sendOnValveChange]];
}

- (void) eMailEnabledChanged:(NSNotification*)aNotification
{
	[eMailEnabledButton setState:[model emailEnabled]];
	if([model emailEnabled])[emailEnabledField setStringValue:@"E-Mail Alerts Enabled"];
	else [emailEnabledField setStringValue:@""];
}

- (void) enabledMaskChanged:(NSNotification*)aNote
{
	unsigned char aMask = [model enabledMask];
	int i;
	for(i=0;i<4;i++){
		BOOL bitSet = (aMask&(1<<i))>0;
		if(bitSet != [[enabledMaskMatrix cellWithTag:i] intValue]){
			[[enabledMaskMatrix cellWithTag:i] setState:bitSet];
		}
		[self loadLevelTimeValuesForIndex:i];
	}
	[self stateChanged:nil];
	[monitor0 setNeedsDisplay:YES];
	[monitor1 setNeedsDisplay:YES];
	[monitor2 setNeedsDisplay:YES];
	[monitor3 setNeedsDisplay:YES];
	[levelMatrix setNeedsDisplay:YES];
	[level1Matrix setNeedsDisplay:YES];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter0 xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 xAxis]attributes] forKey:@"XAttributes0"];
	}
	
	if(aNotification == nil || [aNotification object] == [plotter0 yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 yAxis]attributes] forKey:@"YAttributes0"];
	}
}

- (void) miscAttributesChanged:(NSNotification*)aNote
{
	
	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 xAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 yAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 yAxis] setNeedsDisplay:YES];
		}
	}
}


- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate:0])){
		[plotter0 setNeedsDisplay:YES];
	}
}

- (void) fillStateChanged:(NSNotification*)aNote
{
	if(!aNote){
		[fillStatePU0 selectItemAtIndex:[model fillState:0]];
		[fillStatePU1 selectItemAtIndex:[model fillState:1]];
	}
	else {
		int index = [[[aNote userInfo] objectForKey:@"Index"]intValue];
		if(index == 0)     [fillStatePU0 selectItemAtIndex:[model fillState:index]];
		else if(index == 1)[fillStatePU1 selectItemAtIndex:[model fillState:index]];

	}
}

- (void) shipLevelsChanged:(NSNotification*)aNote
{
	[shipLevelsButton setIntValue: [model shipLevels]];
}


- (void) updateMonitor:(NSNotification*)aNote
{
	//we'll reduce updates to 1/sec
	if(!updateScheduled){
		updateScheduled = YES;	
		[self performSelector:@selector(scheduledUpdate) withObject:nil afterDelay:1];
	}
}

- (void) scheduledUpdate
{
	[monitor0 setNeedsDisplay:YES];
	[monitor1 setNeedsDisplay:YES];
	[monitor2 setNeedsDisplay:YES];
	[monitor3 setNeedsDisplay:YES];
	int i;
	for(i=0;i<4;i++){
		[self loadLevelTimeValuesForIndex:i];
		[self loadFillStatusForIndex:i];
		[self loadAlarmStatusForIndex:i];
	}
	updateScheduled = NO;	
}

- (void) loadLevelTimeValuesForIndex:(int)index
{
	
	unsigned char aMask = [model enabledMask];
	NSString* levelAsString;
	if(aMask & (1<<index)){
		levelAsString = [NSString stringWithFormat:@"%.1f%%",[model level:index]];
	}
	else {
		levelAsString = @"--";
	}
	[[levelMatrix cellWithTag:index] setStringValue:levelAsString];
	[[level1Matrix cellWithTag:index] setStringValue:levelAsString];
	
	unsigned long t = [model timeMeasured:index];
	NSDate* theDate;
	if(t){
		theDate = [NSDate dateWithTimeIntervalSince1970:t];
		[[timeMatrix cellWithTag:index] setObjectValue:[theDate stdDescription]];
	}
	else [[timeMatrix cellWithTag:index] setObjectValue:@"--"];
}

- (void) alarmLevelChanged:(NSNotification*)aNote
{
	if(!aNote){
		int i;
		for(i=0;i<4;i++){
			[[hiAlarmMatrix cellWithTag:i] setFloatValue:[model hiAlarmLevel:i]];
			[[lowAlarmMatrix cellWithTag:i] setFloatValue:[model lowAlarmLevel:i]];
			[self updateTank:i];
		}
	}
	else {
		int index = [[[aNote userInfo] objectForKey:@"Index"] intValue];
		[[hiAlarmMatrix cellWithTag:index] setFloatValue:[model hiAlarmLevel:index]];
		[[lowAlarmMatrix cellWithTag:index] setFloatValue:[model lowAlarmLevel:index]];
		[self updateTank:index];
	}
}


- (void) fillPointChanged:(NSNotification*)aNote
{
	if(!aNote){
		int i;
		for(i=0;i<4;i++){
			[[hiFillPointMatrix cellWithTag:i] setFloatValue:[model hiFillPoint:i]];
			[[lowFillPointMatrix cellWithTag:i] setFloatValue:[model lowFillPoint:i]];
			[self updateTank:i];
		}
	}
	else {
		int index = [[[aNote userInfo] objectForKey:@"Index"] intValue];
		[[hiFillPointMatrix cellWithTag:index] setFloatValue:[model hiFillPoint:index]];
		[[lowFillPointMatrix cellWithTag:index] setFloatValue:[model lowFillPoint:index]];
		[self updateTank:index];
	}
}

- (void) loadFillStatusForIndex:(int)index
{	
	[[fillStatusMatrix cellWithTag:index] setStringValue:[model fillStatusName:[model fillStatus:index]]];
}

- (void) loadAlarmStatusForIndex:(int)index
{	
	NSTextField* tf = nil;
	if(index == 0)		tf = alarmStatus0;
	else if(index == 1) tf = alarmStatus1;
	else if(index == 2) tf = alarmStatus2;
	else if(index == 3) tf = alarmStatus3;
	int mask = [model alarmStatus:index];
	NSString* s = @"";
	if(mask & (1<<0))s = [s stringByAppendingString:@"HI Alarm\n"];
	if(mask & (1<<1))s = [s stringByAppendingString:@"A Alarm\n"];
	if(mask & (1<<2))s = [s stringByAppendingString:@"B Alarm\n"];
	if(mask & (1<<3))s = [s stringByAppendingString:@"LO Alarm\n"];
	if(mask & (1<<4))s = [s stringByAppendingString:@"RATE Alarm\n"];
	if(mask & (1<<5))s = [s stringByAppendingString:@"FILL Alarm\n"];
	if(mask & (1<<6))s = [s stringByAppendingString:@"EXPIRED Alarm\n"];
	if(mask & (1<<7))s = [s stringByAppendingString:@"CONTACT Alarm\n"];
	[tf setStringValue:s];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORAmi286Lock to:secure];
    [lockButton setEnabled:secure];
}

- (void) stateChanged:(NSNotification*)aNotification
{
	
	//    BOOL runInProgress = [gOrcaGlobals runInProgress];
	//    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORAmi286Lock];
    BOOL locked = [gSecurity isLocked:ORAmi286Lock];
	
    [lockButton setState: locked];
	
    [serialPortController updateButtons:locked];
    
    [enabledMaskMatrix setEnabled:!locked];
    [pollTimePopup setEnabled:!locked];
    [shipLevelsButton setEnabled:!locked];
	
	int i;
	unsigned char aMask = [model enabledMask];
	for(i=0;i<4;i++){
		if(aMask & (1<<i)){
			[[lowAlarmMatrix cellWithTag:i] setEnabled:!locked];
			[[hiAlarmMatrix cellWithTag:i] setEnabled:!locked];
		}
		else {
			[[lowAlarmMatrix cellWithTag:i] setEnabled:NO];
			[[hiAlarmMatrix cellWithTag:i] setEnabled:NO];
		}
	}
	for(i=0;i<2;i++){
		if(aMask & (1<<i)){
			[[lowFillPointMatrix cellWithTag:i] setEnabled:!locked];
			[[hiFillPointMatrix cellWithTag:i] setEnabled:!locked];
		}
		else {
			[[lowFillPointMatrix cellWithTag:i] setEnabled:NO];
			[[hiFillPointMatrix cellWithTag:i] setEnabled:NO];
		}
	}
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

- (void) updateTank:(int)index
{
	switch(index){
		case 0: [monitor0 setNeedsDisplay:YES]; break;
		case 1: [monitor1 setNeedsDisplay:YES]; break;
		case 2: [monitor2 setNeedsDisplay:YES]; break;
		case 3: [monitor3 setNeedsDisplay:YES]; break;
	}
}

#pragma mark ***Actions
- (void) sendOnAlarmAction:(id)sender
{
	[model setSendOnAlarm:[sender intValue]];	
}

- (void) expiredTimeAction:(id)sender
{
	[model setExpiredTime:[sender intValue]];	
}

- (void) sendOnExpiredAction:(id)sender
{
	[model setSendOnExpired:[sender intValue]];	
}

- (void) sendOnValveChangeAction:(id)sender
{
	[model setSendOnValveChange:[sender intValue]];	
}

- (IBAction) loadHardwareAction:(id)sender;
{
	@try {
		[self endEditing];
		[model loadHardware];
	}
	@catch(NSException* localException) {
	}
}

- (IBAction) loadFillStateAction:(id)sender
{
	@try {
		[self endEditing];
		[model loadFillState];
	}
	@catch(NSException* localException) {
	}
}

- (IBAction) fillStateAction:(id)sender;
{
	if([model fillState:[sender tag]] != [sender indexOfSelectedItem]){
		[model setFillState:[sender tag] value:[sender indexOfSelectedItem]];
	}
}

- (IBAction) hiAlarmAction:(id)sender
{
	int index = [[hiAlarmMatrix selectedCell] tag];
	[model setHiAlarmLevel:index value:[sender floatValue]];
}

- (IBAction) lowAlarmAction:(id)sender
{
	int index = [[lowAlarmMatrix selectedCell] tag];
	[model setLowAlarmLevel:index value:[sender floatValue]];
}

- (IBAction) hiFillPointAction:(id)sender
{
	int index = [[hiFillPointMatrix selectedCell] tag];
	[model setHiFillPoint:index value:[sender floatValue]];
}

- (IBAction) lowFillPointAction:(id)sender
{
	int index = [[lowFillPointMatrix selectedCell] tag];
	[model setLowFillPoint:index value:[sender floatValue]];
}

- (void) enabledMaskAction:(id)sender
{
	int i;
	unsigned char aMask = 0;
	for(i=0;i<4;i++){
		if([[enabledMaskMatrix cellWithTag:i] intValue]) aMask |= (1<<i);
	}
	[model setEnabledMask:aMask];	
}

- (void) shipLevelsAction:(id)sender
{
	[model setShipLevels:[sender intValue]];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORAmi286Lock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) readLevelsAction:(id)sender
{
	[model readLevels];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:[[sender selectedItem] tag]];
}

- (IBAction) addAddress:(id)sender
{
	[model addEMail];
	[addressList reloadData];
	NSIndexSet* indexSet = [NSIndexSet indexSetWithIndex:[[model eMailList] count]-1];
	[addressList selectRowIndexes:indexSet byExtendingSelection:NO];
}

- (IBAction) removeAddress:(id)sender
{
	//only one can be selected at a time. If that restriction is lifted then the following will have to be changed
	//to something a lot more complicated.
	NSIndexSet* theSet = [addressList selectedRowIndexes];
	NSUInteger current_index = [theSet firstIndex];
    if(current_index != NSNotFound){
		[model removeEMail:current_index];
		[addressList reloadData];
		NSIndexSet* indexSet = [NSIndexSet indexSetWithIndex:[[model eMailList] count]-1];
		[addressList selectRowIndexes:indexSet byExtendingSelection:NO];
	}
}

- (IBAction) eMailEnabledAction:(id)sender
{
	[model setEmailEnabled:[sender intValue]];
}

#pragma mark •••Data Source

- (NSColor*) colorForDataSet:(int)set
{
	if(set==0)return [NSColor redColor];
	else if(set==1)return [NSColor orangeColor];
	else if(set==2)return [NSColor blueColor];
	else return [NSColor blackColor];
}

- (int) numberPointsInPlot:(id)aPlotter
{
	int set = [aPlotter tag];
	return [[model timeRate:set] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int set = [aPlotter tag];
	int count = [[model timeRate:set] count];
	int index = count-i-1;
	*xValue = [[model timeRate:set] timeSampledAtIndex:index];
	*yValue = [[model timeRate:set] valueAtIndex:index];
}

- (id) tableView:(NSTableView *) aTableView objectValueForTableColumn:(NSTableColumn *) aTableColumn row:(int) rowIndex
{
	return [model addressAtIndex:rowIndex];
}

- (void) tableView:(NSTableView *)aTableView setObjectValue:(id)anObject forTableColumn:(NSTableColumn *)aTableColumn row:(int)rowIndex
{
	NSMutableArray* theList = [model eMailList];
	[theList replaceObjectAtIndex:rowIndex withObject:anObject];
}

// just returns the number of items we have.
- (int) numberOfRowsInTableView:(NSTableView *)aTableView
{
	return [[model eMailList] count];
}

- (void) tableViewSelectionDidChange:(NSNotification *)aNotification
{
	if([aNotification object] == addressList || aNotification == nil){
		int selectedIndex = [addressList selectedRow];
		[removeAddressButton setEnabled:selectedIndex>=0];
	}
}

- (void) setLevelMonitor:(ORLevelMonitor*)aMonitor lowAlarm:(float)aValue
{
	if(aMonitor == monitor0)[model setLowAlarmLevel:0 value:aValue];
	else if(aMonitor == monitor1)[model setLowAlarmLevel:1 value:aValue];
	else if(aMonitor == monitor2)[model setLowAlarmLevel:2 value:aValue];
	else if(aMonitor == monitor3)[model setLowAlarmLevel:3 value:aValue];
	[self scheduledUpdate]; //force update now
}

- (void) setLevelMonitor:(ORLevelMonitor*)aMonitor hiAlarm:(float)aValue
{
	if(aMonitor == monitor0)[model setHiAlarmLevel:0 value:aValue];
	else if(aMonitor == monitor1)[model setHiAlarmLevel:1 value:aValue];
	else if(aMonitor == monitor2)[model setHiAlarmLevel:2 value:aValue];
	else if(aMonitor == monitor3)[model setHiAlarmLevel:3 value:aValue];
	[self scheduledUpdate]; //force update now
}

- (float) levelMonitorHiAlarmLevel:(id)aLevelMonitor
{
	if(aLevelMonitor == monitor0)      return [model hiAlarmLevel:0];
	else if(aLevelMonitor == monitor1) return [model hiAlarmLevel:1];
	else if(aLevelMonitor == monitor2) return [model hiAlarmLevel:2];
	else if(aLevelMonitor == monitor3) return [model hiAlarmLevel:3];
	else return 0;
}

- (float) levelMonitorLowAlarmLevel:(id)aLevelMonitor
{
	if(aLevelMonitor == monitor0)      return [model lowAlarmLevel:0];
	else if(aLevelMonitor == monitor1) return [model lowAlarmLevel:1];
	else if(aLevelMonitor == monitor2) return [model lowAlarmLevel:2];
	else if(aLevelMonitor == monitor3) return [model lowAlarmLevel:3];
	else return 0;
}

- (void) setLevelMonitor:(ORLevelMonitor*)aMonitor lowFillPoint:(float)aValue
{
	if(aMonitor == monitor0)	 [model setLowFillPoint:0 value:aValue];
	else if(aMonitor == monitor1)[model setLowFillPoint:1 value:aValue];
	[self scheduledUpdate]; //force update now
}

- (void) setLevelMonitor:(ORLevelMonitor*)aMonitor hiFillPoint:(float)aValue
{
	if(aMonitor == monitor0)	 [model setHiFillPoint:0 value:aValue];
	else if(aMonitor == monitor1)[model setHiFillPoint:1 value:aValue];
	[self scheduledUpdate]; //force update now
}

- (float) levelMonitorHiFillPoint:(id)aLevelMonitor
{
	if(aLevelMonitor == monitor0)      return [model hiFillPoint:0];
	else if(aLevelMonitor == monitor1) return [model hiFillPoint:1];
	else return 0;
}

- (float) levelMonitorLowFillPoint:(id)aLevelMonitor
{
	if(aLevelMonitor == monitor0)      return [model lowFillPoint:0];
	else if(aLevelMonitor == monitor1) return [model lowFillPoint:1];
	else return 0;
}

- (float) levelMonitorLevel:(id)aLevelMonitor
{
	if(aLevelMonitor == monitor0)      return [model level:0];
	else if(aLevelMonitor == monitor1) return [model level:1];
	else return 0;
}
@end


