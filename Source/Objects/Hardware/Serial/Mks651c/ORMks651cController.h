//--------------------------------------------------------
// ORMks651cController
// Created by David G. Phillips II on Tue Aug 30, 2011
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

@class ORCompositePlotView;

@interface ORMks651cController : OrcaObjectController
{
    IBOutlet NSTextField*   checksumField;
    IBOutlet NSTextField*   lockDocField;
	IBOutlet NSTextField*	spanCalibrationField;
	IBOutlet NSTextField*	specialZeroField;
	IBOutlet NSMatrix*		setPtSelectionMatrix;
	IBOutlet NSTextField*	openSoftstartField;
	IBOutlet NSTextField*	closeSoftstartField;
	IBOutlet NSTextField*	analogSoftstartField;
	IBOutlet NSTextField*	analogSetPointField;
	IBOutlet NSPopUpButton* analogFSLevelPU;
    IBOutlet NSPopUpButton* analogRangePU;
    IBOutlet NSPopUpButton* unitsPU;
	IBOutlet NSTextField*	learningField;
	IBOutlet NSTextField*	localField;
	IBOutlet NSTextField*   unitsField;
	IBOutlet NSPopUpButton*	pressureScalePU;
	IBOutlet NSButton*		shipPressuresButton;
    IBOutlet NSButton*      lockButton;
    IBOutlet NSButton*		initHardwareButton;
    IBOutlet NSTextField*   portStateField;
    IBOutlet NSPopUpButton* portListPopup;
    IBOutlet NSPopUpButton* pollTimePopup;
    IBOutlet NSButton*      openPortButton;
    IBOutlet NSButton*      readPressuresButton;
    IBOutlet NSTextField*   pressureField;
    IBOutlet NSMatrix*      softstartRateMatrix;
    IBOutlet NSPopUpButton* valveTypePU;
    IBOutlet NSPopUpButton* positionRangePU;
    IBOutlet NSPopUpButton* controlDirectionPU;
    IBOutlet NSPopUpButton* sensorRangePU;
    IBOutlet NSPopUpButton* sensorVoltageRangePU;
    IBOutlet NSPopUpButton* sensorTypePU;
    IBOutlet NSTextField*   systemStatusField;
    IBOutlet NSTextField*   softwareVersionField;
    IBOutlet NSTextField*   batteryStatusField;
    IBOutlet NSPopUpButton* valveResponsePU;
    IBOutlet NSPopUpButton* controlTypePU;
    IBOutlet NSTextField*   timeField;
	IBOutlet ORCompositePlotView*    plotter0;
    IBOutlet NSButton*      openValveButton;
    IBOutlet NSButton*      closeValveButton;
    IBOutlet NSButton*      holdValveButton;

    IBOutlet NSMatrix*		setPointMatrix;
    IBOutlet NSMatrix*      leadValueMatrix;
    IBOutlet NSMatrix*      gainValueMatrix;
	IBOutlet NSMatrix*		lowThresholdMatrix;
	IBOutlet NSMatrix*		highThresholdMatrix;

	IBOutlet NSPopUpButton* setPointTypePU0;
	IBOutlet NSPopUpButton* setPointTypePU1;
	IBOutlet NSPopUpButton* setPointTypePU2;
	IBOutlet NSPopUpButton* setPointTypePU3;
	IBOutlet NSPopUpButton* setPointTypePU4;

	NSPopUpButton* setPointTypePU[5];
}

#pragma mark ***Initialization
- (id) init;
- (void) dealloc;
- (void) awakeFromNib;

#pragma mark ***Notifications
- (void) registerNotificationObservers;
- (void) updateWindow;

#pragma mark ***Interface Management
- (void) spanCalibrationChanged:(NSNotification*)aNote;
- (void) specialZeroChanged:(NSNotification*)aNote;
- (void) setPtSelectionChanged:(NSNotification*)aNote;
- (void) openSoftstartChanged:(NSNotification*)aNote;
- (void) closeSoftstartChanged:(NSNotification*)aNote;
- (void) analogSoftstartChanged:(NSNotification*)aNote;
- (void) unitsChanged:(NSNotification*)aNote;
- (void) analogSetPointChanged:(NSNotification*)aNote;
- (void) analogFSLevelChanged:(NSNotification*)aNote;
- (void) learningChanged:(NSNotification*)aNote;
- (void) localChanged:(NSNotification*)aNote;
- (void) pressureScaleChanged:(NSNotification*)aNote;
- (void) updateTimePlot:(NSNotification*)aNote;
- (void) scaleAction:(NSNotification*)aNote;
- (void) shipPressuresChanged:(NSNotification*)aNote;
- (void) setPointChanged:(NSNotification*)aNote;
- (void) lockChanged:(NSNotification*)aNote;
- (void) portNameChanged:(NSNotification*)aNote;
- (void) portStateChanged:(NSNotification*)aNote;
- (void) pressureChanged:(NSNotification*)aNote;
- (void) softstartRateChanged:(NSNotification*)aNote;
- (void) valveTypeChanged:(NSNotification*)aNote;
- (void) analogRangeChanged:(NSNotification*)aNote;
- (void) setPointTypeChanged:(NSNotification*)aNote;
- (void) positionRangeChanged:(NSNotification*)aNote;
- (void) controlDirectionChanged:(NSNotification*)aNote;
- (void) sensorRangeChanged:(NSNotification*)aNote;
- (void) sensorVoltageRangeChanged:(NSNotification*)aNote;
- (void) sensorTypeChanged:(NSNotification*)aNote;
- (void) systemStatusChanged:(NSNotification*)aNote;
- (void) softwareVersionChanged:(NSNotification*)aNote;
- (void) batteryStatusChanged:(NSNotification*)aNote;
- (void) valveResponseChanged:(NSNotification*)aNote;
- (void) leadValueChanged:(NSNotification*)aNote;
- (void) gainValueChanged:(NSNotification*)aNote;
- (void) controlTypeChanged:(NSNotification*)aNote;
- (void) pollTimeChanged:(NSNotification*)aNote;
- (void) lowThresholdChanged:(NSNotification*)aNote;
- (void) highThresholdChanged:(NSNotification*)aNote;
- (void) miscAttributesChanged:(NSNotification*)aNote;
- (void) scaleAction:(NSNotification*)aNote;
- (void) checksumChanged:(NSNotification*)aNote;

#pragma mark ***Actions
- (IBAction) spanCalibrationAction:(id)sender;
- (IBAction) specialZeroAction:(id)sender;
- (IBAction) setPtSelectionAction:(id)sender;
- (IBAction) openSoftstartAction:(id)sender;
- (IBAction) closeSoftstartAction:(id)sender;
- (IBAction) analogSoftstartAction:(id)sender;
- (IBAction) initHardwareAction:(id)sender;
- (IBAction) readHardware:(id)sender;
- (IBAction) sensorRangeAction:(id)sender;
- (IBAction) analogFSLevelAction:(id)sender;
- (IBAction) analogRangeAction:(id)sender;
- (IBAction) sensorVoltageRangeAction:(id)sender;
- (IBAction) unitsAction:(id)sender;
- (IBAction) valveResponseAction:(id)sender;
- (IBAction) sensorTypeAction:(id)sender;
- (IBAction) controlTypeAction:(id)sender;
- (IBAction) openValveAction:(id)sender;
- (IBAction) closeValveAction:(id)sender;
- (IBAction) holdValveAction:(id)sender;
- (IBAction) lowThresholdAction:(id)sender;
- (IBAction) highThresholdAction:(id)sender;

- (IBAction) pressureScaleAction:(id)sender;
- (IBAction) shipPressuresAction:(id)sender;
- (IBAction) lockAction:(id) sender;
- (IBAction) portListAction:(id) sender;
- (IBAction) openPortAction:(id)sender;
- (IBAction) readPressuresAction:(id)sender;
- (IBAction) softstartRateAction:(id)sender;
- (IBAction) valveTypeAction:(id)sender;
- (IBAction) positionRangeAction:(id)sender;
- (IBAction) controlDirectionAction:(id)sender;
- (IBAction) pollTimeAction:(id)sender;
- (IBAction) setPointAction:(id)sender;
- (IBAction) pollNowAction:(id)sender;
- (IBAction) gainValueAction:(id)sender;
- (IBAction) leadValueAction:(id)sender;
- (IBAction) setPointTypeAction:(id)sender;

- (IBAction) writeZeroSensorAction:(id)sender;
- (IBAction) writeSpecialZeroAction:(id)sender;
- (IBAction) writeRemoveZeroCorrectionAction:(id)sender;
- (IBAction) writeLearnAnalogZeroAction:(id)sender;
- (IBAction) writeCalibrateSpanAction:(id)sender;
- (IBAction) writeLearnFullScaleAction:(id)sender;
- (IBAction) writeLearnSystemAction:(id)sender;
- (IBAction) writeStopLearnAction:(id)sender;
- (IBAction) loadDialogFromHW:(id)sender;

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) loadDialogDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo;
#endif

- (int) numberPointsInPlot:(id)aPlotter;
- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue;

@end


