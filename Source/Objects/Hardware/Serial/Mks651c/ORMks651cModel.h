//--------------------------------------------------------
// ORMks651cModel
// Created by David G. Phillips II on Tue Aug 30, 2011
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

@class ORSerialPort;
@class ORTimeRate;
@class ORSafeQueue;

@interface ORMks651cModel : OrcaObject
{
    @private
        NSString*			portName;
        BOOL				portWasOpen;
        ORSerialPort*		serialPort;
        uint32_t		dataId;
        NSString*			lastRequest;
        ORSafeQueue*		cmdQueue;
		float				pressure;
		float				setPoint[5];
		float               leadValue[5];
		float               gainValue[5];
		int					setPointType[5];
		float               softstartRate[5];
		float               highThreshold[2];
		float               lowThreshold[2];
	
		int					analogRange;
		int					sensorRange;
		int					sensorVoltageRange;
		int                 units;

		int					analogFSLevel;
        int					valveType;
        BOOL				positionRange;
        BOOL				controlDirection;
        int					sensorType;
        float               softwareVersion;
        float               systemStatus;
        int					valveResponse;
        int					batteryStatus;
        int					controlType;
        float               checksum;
		uint32_t		timeMeasured;
		int					pollTime;
        NSMutableString*    buffer;
		BOOL				shipPressures;
		ORTimeRate*			timeRates;
		int					pressureScale;
		float				pressureScaleValue;
		BOOL				local;
		int					learning;
		float				analogSetPoint;
		float				analogSoftstart;
		float				closeSoftstart;
		float				openSoftstart;
		int					setPtSelection;
		float				specialZero;
		float				spanCalibration;
		BOOL				loadDialog;
}

#pragma mark •••Initialization
- (id)   init;
- (void) dealloc;
- (void) registerNotificationObservers;
- (void) dataReceived:(NSNotification*)note;

#pragma mark •••Accessors
- (float) spanCalibration;
- (void) setSpanCalibration:(float)aSpanCalibration;
- (float) specialZero;
- (void) setSpecialZero:(float)aSpecialZero;
- (int) setPtSelection;
- (void) setSetPtSelection:(int)aSetPtSelection;
- (float) openSoftstart;
- (void) setOpenSoftstart:(float)aOpenSoftstart;
- (float) closeSoftstart;
- (void) setCloseSoftstart:(float)aCloseSoftstart;
- (float) analogSoftstart;
- (void) setAnalogSoftstart:(float)aAnalogSoftstart;
- (float) analogSetPoint;
- (void) setAnalogSetPoint:(float)aAnalogSetPoint;
- (int) analogFSLevel;
- (void) setAnalogFSLevel:(int)aAnalogFSLevel;
- (int) learning;
- (void) setLearning:(int)aLearning;
- (BOOL) local;
- (void) setLocal:(BOOL)aLocal;
- (int) units;
- (void) setUnits:(int)aUnits;
- (float) pressureScaleValue;
- (int) pressureScale;
- (void) setPressureScale:(int)aPressureScale;
- (ORTimeRate*)timeRate;
- (BOOL) shipPressures;
- (void) setShipPressures:(BOOL)aShipPressures;
- (int)  pollTime;
- (void) setPollTime:(int)aPollTime;
- (ORSerialPort*) serialPort;
- (void) setSerialPort:(ORSerialPort*)aSerialPort;
- (BOOL) portWasOpen;
- (void) setPortWasOpen:(BOOL)aPortWasOpen;
- (NSString*) portName;
- (void) setPortName:(NSString*)aPortName;
- (void) openPort:(BOOL)state;
- (float) pressure;
- (uint32_t) timeMeasured;
- (void) setPressure:(float)aValue;
- (void) setSetPoint:(int)index withValue:(float)aValue;
- (void) setLeadValue:(int)index withValue:(float)aValue;
- (void) setGainValue:(int)index withValue:(float)aValue;

- (void) setHighThreshold:(int)index withValue:(float)aValue;
- (void) setLowThreshold:(int)index withValue:(float)aValue;
- (void) setSoftstartRate:(int)index withValue:(float)aValue;
- (void) setValveType:(int)aValue;
- (void) setAnalogRange:(int)aValue;
- (void) setSetPointType:(int)index withValue:(int)aValue;
- (void) setPositionRange:(BOOL)aValue;
- (void) setControlDirection:(BOOL)aValue;
- (void) setSensorRange:(int)aValue;
- (void) setSensorVoltageRange:(int)aValue;
- (void) setSensorType:(int)aValue;
- (void) setSoftwareVersion:(float)aValue;
- (void) setSystemStatus:(float)aValue;
- (void) setValveResponse:(int)aValue;
- (void) setBatteryStatus:(int)aValue;
- (void) setControlType:(int)aValue;
- (void) setChecksum:(float)aValue;

- (float) setPoint:(int)index;
- (float) leadValue:(int)index;
- (float) gainValue:(int)index;
- (int)	  sensorRange;
- (int)	  sensorVoltageRange;

- (float) lowThreshold:(int)index;
- (float) highThreshold:(int)index;
- (float) softstartRate:(int)index;
- (int)	  valveType;
- (int)	  analogRange;
- (int)   setPointType:(int)index;
- (BOOL)  positionRange;
- (BOOL)  controlDirection;
- (int)	  sensorType;
- (float) systemStatus;
- (float) softwareVersion;
- (int)   batteryStatus;
- (int)	  valveResponse;
- (int)   controlType;
- (float) checksum;
- (NSString*) lastRequest;
- (void) setLastRequest:(NSString*)aRequest;

#pragma mark •••Data Records
- (void) appendDataDescription:(ORDataPacket*)aDataPacket userInfo:(NSDictionary*)userInfo;
- (NSDictionary*) dataRecordDescription;
- (uint32_t) dataId;
- (void) setDataId: (uint32_t) DataId;
- (void) setDataIds:(id)assigner;
- (void) syncDataIdsWith:(id)anotherMks651c;
- (void) shipPressureValues;
- (void) addCmdToQueue:(NSString*)aCmd waitForResponse:(BOOL)waitForResponse;

#pragma mark •••Commands
- (void) readPressures;
- (void) readSetPoints;
- (void) readThresholds;
- (void) readSoftstartRates;
- (void) readValveType;
- (void) readAnalogRange;
- (void) readSetPointTypes;
- (void) readPositionRange;
- (void) readControlDirection;
- (void) readSensorRange;
- (void) readSoftstartRates;
- (void) readSensorVoltageRange;
- (void) readSensorType;
- (void) readSystemStatus;
- (void) readSoftwareVersion;
- (void) readBatteryStatus;
- (void) readSystemStatus;
- (void) readSoftwareVersion;
- (void) readValveResponse;
- (void) readBatteryStatus;
- (void) readLeadValues;
- (void) readGainValues;
- (void) readControlType;
- (void) readChecksum;
- (void) readUnits;
- (void) pollHardware;
- (void) writeThresholds;
- (void) writeSetPointTypes;
- (void) writeSetPoints;
- (void) writeGainValues;
- (void) writeLeadValues;
- (void) writeAnalogRange;
- (void) writeSensorRange;
- (void) writeSensorVoltageRange;
- (void) writeValveResponse;
- (void) writeControlType;
- (void) writeUnits;
- (void) writeOpenValve;
- (void) writeCloseValve;
- (void) writeHoldValve;
- (void) writeSoftStartRates;
- (void) writeValveType;
- (void) writePositionRange;
- (void) writeControlDirection;
- (void) writeSetPtSelection;
- (void) writeZeroSensor;
- (void) writeSpecialZero;
- (void) writeRemoveZeroCorrection;
- (void) writeLearnAnalogZero;
- (void) writeCalibrateSpan;
- (void) writeLearnFullScale;
- (void) writeLearnSystem;
- (void) writeStopLearn;
- (void) readAndLoad;

- (void) writeStopLearn;
- (void) initHardware;
- (void) readAndCompare;
- (NSString*) unitsString;

- (id)   initWithCoder:(NSCoder*)decoder;
- (void) encodeWithCoder:(NSCoder*)encoder;

@end

@interface ORMks651cCmd : NSObject
{
	BOOL waitForResponse;
	NSString* cmd;
}

@property (nonatomic,assign) BOOL waitForResponse;
@property (nonatomic,copy) NSString* cmd;
@end


extern NSString* ORMks651cModelSpanCalibrationChanged;
extern NSString* ORMks651cModelSpecialZeroChanged;
extern NSString* ORMks651cModelSetPtSelectionChanged;
extern NSString* ORMks651cLowThresholdChanged;
extern NSString* ORMks651cHighThresholdChanged;
extern NSString* ORMks651cOpenSoftstartChanged;
extern NSString* ORMks651cCloseSoftstartChanged;
extern NSString* ORMks651cAnalogSoftstartChanged;
extern NSString* ORMks651cAnalogSetPointChanged;
extern NSString* ORMks651cAnalogFSLevelChanged;
extern NSString* ORMks651cLearningChanged;
extern NSString* ORMks651cLocalChanged;
extern NSString* ORMks651cUnitsChanged;
extern NSString* ORMks651cPressureScaleChanged;
extern NSString* ORMks651cShipPressuresChanged;
extern NSString* ORMks651cPollTimeChanged;
extern NSString* ORMks651cSerialPortChanged;
extern NSString* ORMks651cLock;
extern NSString* ORMks651cPortNameChanged;
extern NSString* ORMks651cPortStateChanged;
extern NSString* ORMks651cPressureChanged;
extern NSString* ORMks651cSetPointChanged;
extern NSString* ORMks651cSoftstartRateChanged;
extern NSString* ORMks651cValveTypeChanged;
extern NSString* ORMks651cAnalogRangeChanged;
extern NSString* ORMks651cSetPointTypeChanged;
extern NSString* ORMks651cPositionRangeChanged;
extern NSString* ORMks651cControlDirectionChanged;
extern NSString* ORMks651cSensorRangeChanged;
extern NSString* ORMks651cSensorVoltageRangeChanged;
extern NSString* ORMks651cSensorTypeChanged;
extern NSString* ORMks651cSystemStatusChanged;
extern NSString* ORMks651cSoftwareVersionChanged;
extern NSString* ORMks651cBatteryStatusChanged;
extern NSString* ORMks651cValveResponseChanged;
extern NSString* ORMks651cLeadValueChanged;
extern NSString* ORMks651cGainValueChanged;
extern NSString* ORMks651cControlTypeChanged;
extern NSString* ORMks651cChecksumChanged;
