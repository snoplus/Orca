//--------------------------------------------------------
// ORProXR16SSRModel
// Created by Mark  A. Howe on Thurs June 21, 2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORProXR16SSRModel.h"
#import "ORSerialPort.h"
#import "ORSerialPortAdditions.h"

#pragma mark •••External Strings
NSString* ORProXR16SSRModelRelayStateChanged		= @"ORProXR16SSRModelRelayStateChanged";
NSString* ORProXR16SSRModelUpdateAllRelaysChanged	= @"ORProXR16SSRModelUpdateAllRelaysChanged";
NSString* ORProXR16SSRModelOutletNameChanged		= @"ORProXR16SSRModelOutletNameChanged";
NSString* ORProXR16SSRLock							= @"ORProXR16SSRLock";

@interface ORProXR16SSRModel (private)
- (void) processOneCommandFromQueue;
- (void) setupOutletNames;
- (void) setRelayMask:(unsigned char)mask bank:(int)aBank;
- (void) setRelay:(int)index state:(BOOL)aState;
@end

@implementation ORProXR16SSRModel

- (void) dealloc
{
    [portName release];
	[outletNames release];
 
	[super dealloc];
}

- (void) setUpImage
{
	//---------------------------------------------------------------------------------------------------
	//arghhh....NSImage caches one image. The NSImage setCachMode:NSImageNeverCache appears to not work.
	//so, we cache the image here so that each crate can have its own version for drawing into.
	//---------------------------------------------------------------------------------------------------
	NSImage* aCachedImage = [NSImage imageNamed:@"ProXR16SSR"];
	NSSize imageSize = [aCachedImage size];
	NSImage* i = [[NSImage alloc] initWithSize:imageSize];
	[i lockFocus];
    [aCachedImage drawAtPoint:NSZeroPoint fromRect:[aCachedImage imageRect] operation:NSCompositingOperationSourceOver fraction:1.0];	
	int relay;
	for(relay=0;relay<8;relay++){
		NSBezierPath* circle = [NSBezierPath bezierPathWithOvalInRect:NSMakeRect(6+relay*8, imageSize.height-15,7,7)];
		if(relayState[relay]) [[NSColor redColor] set];
		else			      [[NSColor lightGrayColor] set];
		[circle fill];
	}
	
	for(relay=0;relay<8;relay++){
		NSBezierPath* circle = [NSBezierPath bezierPathWithOvalInRect:NSMakeRect(6+relay*8, 7,7,7)];
		if(relayState[relay+8]) [[NSColor redColor] set];
		else			        [[NSColor lightGrayColor] set];
		[circle fill];
	}
	
	[i unlockFocus];		
	[self setImage:i];
	[i release];
	
	[[NSNotificationCenter defaultCenter] postNotificationName:OROrcaObjectImageChanged object:self];
}

- (void) makeMainController
{
	[self linkToController:@"ORProXR16SSRController"];
}

- (NSString*) helpURL
{
	return @"RS232/ProXR16SSR.html";
}

- (void) dataReceived:(NSNotification*)note
{
    if([[note userInfo] objectForKey:@"serialPort"] == serialPort){
		NSData* theResponse = [[note userInfo] objectForKey:@"data"];
		NSUInteger responseLength    = [theResponse length];
		unsigned char* responseBytes = (unsigned char*)[theResponse bytes];
		if(responseLength>=1){
			if(responseBytes[0] == kProXR16SSRCmdResponse){
				[self cancelTimeout];
				[self setLastRequest:nil];			 //clear the last request
				[self processOneCommandFromQueue];	 //do the next command in the queue
                isValid = YES;
			}
			else {
				NSUInteger lastRequestLength = [(NSData*)lastRequest length];
				unsigned char* lastCmdBytes  = (unsigned char*)[(NSData*)lastRequest bytes];
				if(lastRequestLength>=2){
					switch(lastCmdBytes[1]){
						case kProXR16SSRAllRelayStatus:
							if(!inBuffer)inBuffer = [[NSMutableData data] retain];
							[inBuffer appendData:theResponse];
							if([inBuffer length] >=32){
								[self cancelTimeout];
								unsigned char* p = (unsigned char*)[inBuffer bytes];
								int i;
                                isValid = YES;
								for(i=0;i<32;i++)[self setRelayMask:p[i] bank:i];

								[inBuffer release];
								inBuffer = nil;
								[self setLastRequest:nil];			 //clear the last request
								[self processOneCommandFromQueue];	 //do the next command in the queue
							}
						break;
					}
				}
			}
		}
	}
}

#pragma mark •••Accessors
- (NSString*) commonScriptMethods
{
    NSMutableString *methods = [[NSMutableString alloc] init];
    [methods appendString: methodsInCommonSection(self)];
    return [methods autorelease];
}

//-------------Methode to flag beginning of common script methods---------------------------------
- (void) commonScriptMethodSectionBegin { }
- (NSString*) outletName:(int)index
{
	if(index<0)index = 0;
	else if(index>16)index=16;
	if(!outletNames)[self setupOutletNames];
	return [outletNames objectAtIndex:index];
}

- (void) setOutlet:(int)index name:(NSString*)aName
{
	if(!outletNames)[self setupOutletNames];
	[[[self undoManager] prepareWithInvocationTarget:self] setOutlet:index name:[self outletName:index]];
	[outletNames replaceObjectAtIndex:index withObject:aName];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORProXR16SSRModelOutletNameChanged object:self];
}

- (void) setOutletNames:(NSArray*)anArray
{
	[outletNames autorelease];
	outletNames = [anArray mutableCopy];
}

- (BOOL) relayState:(int)index
{
    if(index>=0 && index<16)return relayState[index];
    else return NO;
}

-  (void) closeRelay:(int) aChan
{    
	unsigned char cmdArray[3];
	cmdArray[0] = kProXR16SSRCmdStart;
	cmdArray[1] = kProXR16SSRRelayOn;
	cmdArray[2] = aChan;
    [self addCmdToQueue:[NSData dataWithBytes:cmdArray length:3]];
	[self readAllRelayStates];
}

-  (void) openRelay:(int) aChan
{
	unsigned char cmdArray[3];
	cmdArray[0] = kProXR16SSRCmdStart;
	cmdArray[1] = kProXR16SSRRelayOff;
 	cmdArray[2] = aChan;
    [self addCmdToQueue:[NSData dataWithBytes:cmdArray length:3]];
	[self readAllRelayStates];
}

-  (void) readAllRelayStates
{
	unsigned char cmdArray[3];
	cmdArray[0] = kProXR16SSRCmdStart;
	cmdArray[1] = kProXR16SSRAllRelayStatus;
	cmdArray[2] = 0;
    [self addCmdToQueue:[NSData dataWithBytes:cmdArray length:3]];
}
- (BOOL) isValid
{
	return isValid;
}

- (void) commonScriptMethodSectionEnd { }
//-------------end of common script methods---------------------------------

- (void) setUpPort
{
	[serialPort setSpeed:38400];
	[serialPort setParityNone];
	[serialPort setStopBits2:NO];
	[serialPort setDataBits:8];
}

- (void) firstActionAfterOpeningPort
{
	[self readAllRelayStates];
}

#pragma mark •••Archival
- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];
	[[self undoManager] disableUndoRegistration];
	[self setOutletNames:[decoder decodeObjectForKey:@"outletNames"]];
	[[self undoManager] enableUndoRegistration];
    
	return self;
}

- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
	[encoder encodeObject:outletNames forKey:@"outletNames"];
}

#pragma mark ••• Commands
- (void) addCmdToQueue:(NSData*)aCmd
{
	[self enqueueCmd:aCmd];
	if(!lastRequest) {
		[self processOneCommandFromQueue];
	}
}

#pragma mark •••Bit Processing Protocol
- (void) processIsStarting
{
    //nothing to do
}

- (void) processIsStopping
{
    //nothing to do
}

//note that everything called by these routines MUST be threadsafe
- (void) startProcessCycle
{
    //nothing to do
}

- (void) endProcessCycle
{
    //nothing to do
}

- (NSString*) identifier
{
	NSString* s;
 	@synchronized(self){
		s= [NSString stringWithFormat:@"ProXR16,%u",[self uniqueIdNumber]];
	}
	return s;
}

- (NSString*) processingTitle
{
	NSString* s;
 	@synchronized(self){
		s= [self identifier];
	}
	return s;
}

- (BOOL) processValue:(int)channel
{
	BOOL theValue = 0;
	@synchronized(self){
		theValue = [self relayState:channel];
	}
	return theValue;
}

- (void) setProcessOutput:(int)channel value:(int)value
{	
    //nothing to do
}

- (void) setOutputBit:(int)channel value:(int)value
{
	@synchronized(self){
		if(value==1)	  [self closeRelay:channel];
		else if(value==0) [self openRelay:channel];
	}
}
@end

@implementation ORProXR16SSRModel (private)
- (void) setupOutletNames
{
	outletNames = [[NSMutableArray array] retain];
	int i;
	for(i=0;i<16;i++)[outletNames addObject:[NSString stringWithFormat:@"Relay %d",i]];	
}

- (void) processOneCommandFromQueue
{
	NSData* aCmd = [self nextCmd];
	if(aCmd){
        [self setLastRequest:aCmd];
		[self startTimeout:3];
        [serialPort writeDataInBackgroundThread:aCmd];
        if(!lastRequest){
            [self performSelector:@selector(processOneCommandFromQueue) withObject:nil afterDelay:.1];
        }
    }
}

- (void) setRelayMask:(unsigned char)mask bank:(int)aBank
{
	if(aBank>=0 && aBank<2){
		int i;
		for(i=0;i<8;i++) relayState[aBank*8 + i] = (mask & (1<<i))>0;
		[self setUpImage];
		[[NSNotificationCenter defaultCenter] postNotificationName:ORProXR16SSRModelUpdateAllRelaysChanged object:self];
	}
}

- (void) setRelay:(int)index state:(BOOL)aState
{
    relayState[index] = aState;
    NSDictionary* userInfo = [NSDictionary dictionaryWithObjectsAndKeys:[NSNumber numberWithInt:index],@"Channel", nil];
    [[NSNotificationCenter defaultCenter] postNotificationName:ORProXR16SSRModelRelayStateChanged object:self userInfo:userInfo];
	[self setUpImage];
}

@end
