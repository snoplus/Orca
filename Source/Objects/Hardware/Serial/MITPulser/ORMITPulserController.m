//--------------------------------------------------------
// ORMITPulserController
// Created by Mark  A. Howe on Fri Jul 22 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this softwareMITPulser.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORMITPulserController.h"
#import "ORMITPulserModel.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import <Carbon/Carbon.h>
#import "ORTimeRate.h"

@interface ORMITPulserController (private)
- (void) populatePortListPopup;
@end

@implementation ORMITPulserController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"MITPulser"];
	return self;
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
    [super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORMITPulserLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORMITPulserModelPortNameChanged
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
                                              
    [notifyCenter addObserver : self
                     selector : @selector(clockSpeedChanged:)
                         name : ORMITPulserModelClockSpeedChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(pulserVersionChanged:)
                         name : ORMITPulserModelPulserVersionChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(resistanceChanged:)
                         name : ORMITPulserModelResistanceChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(dutyCycleChanged:)
                         name : ORMITPulserModelDutyCycleChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(frequencyChanged:)
                         name : ORMITPulserModelFrequencyChanged
						object: model];

}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
	[self clockSpeedChanged:nil];
	[self pulserVersionChanged:nil];
	[self resistanceChanged:nil];
	[self dutyCycleChanged:nil];
	[self frequencyChanged:nil];
}

- (void) frequencyChanged:(NSNotification*)aNote
{
	[frequencyField setFloatValue: [model frequency]];
}

- (void) dutyCycleChanged:(NSNotification*)aNote
{
	[dutyCycleField setIntValue: [model dutyCycle]];
}

- (void) resistanceChanged:(NSNotification*)aNote
{
	[resistanceField setIntValue: [model resistance]];
}

- (void) clockSpeedChanged:(NSNotification*)aNote
{
	[clockSpeedPU selectItemAtIndex: [model clockSpeed]];
}

- (void) pulserVersionChanged:(NSNotification*)aNote
{
	[clockSpeedPU removeAllItems];
	if([model pulserVersion] == 0){
		[clockSpeedPU insertItemWithTitle:@"1 kHz" atIndex:0];
		[clockSpeedPU insertItemWithTitle:@"1 MHz" atIndex:1];
	}
	else {
		[clockSpeedPU insertItemWithTitle:@"100 kHz " atIndex:0];
		[clockSpeedPU insertItemWithTitle:@"100 Hz" atIndex:1];
	}
	[pulserVersionPU selectItemAtIndex: [model pulserVersion]];
	
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORMITPulserLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
    //BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORMITPulserLock];
    BOOL locked = [gSecurity isLocked:ORMITPulserLock];

    [lockButton setState: locked];

    [portListPopup setEnabled:	!locked];
    [openPortButton setEnabled:	!locked];
	[frequencyField setEnabled:!lockedOrRunningMaintenance];
	[dutyCycleField setEnabled:!lockedOrRunningMaintenance];
	[resistanceField setEnabled:!lockedOrRunningMaintenance];
	[frequencyStepper setEnabled:!lockedOrRunningMaintenance];
	[dutyCycleStepper setEnabled:!lockedOrRunningMaintenance];
	[resistanceStepper setEnabled:!lockedOrRunningMaintenance];
	[clockSpeedPU setEnabled:!lockedOrRunningMaintenance];
	[pulserVersionPU setEnabled:!lockedOrRunningMaintenance];
	[loadHwButton setEnabled:!lockedOrRunningMaintenance];
	[onButton setEnabled:!lockedOrRunningMaintenance];
	[offButton setEnabled:!lockedOrRunningMaintenance];
}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];

            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;

    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}

#pragma mark ***Actions
- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORMITPulserLock to:[sender intValue] forWindow:[self window]];
}

- (void) frequencyAction:(id)sender
{
	[model setFrequency:[sender floatValue]];	
}

- (void) dutyCycleAction:(id)sender
{
	[model setDutyCycle:[sender intValue]];	
}

- (void) resistanceAction:(id)sender
{
	[model setResistance:[sender intValue]];	
}

- (void) clockSpeedAction:(id)sender
{
	[model setClockSpeed:(int)[sender indexOfSelectedItem]];
}

- (void) pulserVersionAction:(id)sender
{
	[model setPulserVersion:(int)[sender indexOfSelectedItem]];	
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) loadHWAction:(id)sender
{
	[self endEditing];
    [model loadHardware];
}

- (IBAction) turnPowerOn:(id)sender
{
	[self endEditing];
    [model setPower:YES];
}

- (IBAction) turnPowerOff:(id)sender
{
	[self endEditing];
    [model setPower:NO];
}

@end

@implementation ORMITPulserController (private)

- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];

	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end

