//--------------------------------------------------------
// ORModBusController
// Created by Mark  A. Howe on Tues Sept 8, 2009
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2009 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORModBusController.h"
#import "ORModBusModel.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "ORTimeRate.h"
#import "ORiTransGasSensorModel.h"
#import "ORiTransGasSensorController.h"

@interface ORModBusController (private)
- (void) populatePortListPopup;
@end

@implementation ORModBusController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"ModBus"];
	return self;
}

- (void) dealloc
{
	[NSObject cancelPreviousPerformRequestsWithTarget:self];
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[sensorControllers release];
	[super dealloc];
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
    [super awakeFromNib];
}

#pragma mark ***Notifications
- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(stateChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(stateChanged:)
                         name : ORModBusLock
                        object: nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORModBusModelPortNameChanged
                        object: nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORModBusModelPollTimeChanged
                       object : nil];
	
	[notifyCenter addObserver : self
					 selector : @selector(sensorsChanged:)
						 name : ORModBusModelSensorsChanged
					   object : nil];
	
	[notifyCenter addObserver : self
					 selector : @selector(sensorAdded:)
						 name : ORModBusModelSensorAdded
					   object : nil];
	
	[notifyCenter addObserver : self
					 selector : @selector(sensorRemoved:)
						 name : ORModBusModelSensorRemoved
					   object : nil];
	[notifyCenter addObserver : self
					 selector : @selector(shipValuesChanged:)
						 name : ORModBusModelShipValues
					   object : nil];
	
}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"Mod Bus (Unit %u)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
	[self sensorsChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
	[self pollTimeChanged:nil];
	[self shipValuesChanged:nil];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORModBusLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) stateChanged:(NSNotification*)aNotification
{
	
	//    BOOL runInProgress = [gOrcaGlobals runInProgress];
	//    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORModBusLock];
    BOOL locked = [gSecurity isLocked:ORModBusLock];
	
    [lockButton setState: locked];
    [portListPopup setEnabled:!locked];
    [openPortButton setEnabled:!locked];
    [pollTimePopup setEnabled:!locked];
	
}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];
			
            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

- (void) shipValuesChanged:(NSNotification*)aNotification
{
	[shipValuesCB setIntValue:[model shipValues]];
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
	
    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}

- (void) sensorAdded:(NSNotification*)aNotification
{
	if(!sensorControllers)	sensorControllers = [[NSMutableArray array] retain];

	uint32_t numToAdd = (uint32_t)([[model sensors] count] - [sensorControllers count]);
	int i;
	for(i=0;i<numToAdd;i++){
		ORiTransGasSensorController* aSensorPanel = [ORiTransGasSensorController sensorPanel];
		[sensorControllers addObject:aSensorPanel];
	}
	[self tileSensors];
}

- (void) sensorRemoved:(NSNotification*)aNotification
{
	uint32_t numToRemove = (uint32_t)([sensorControllers count] - [[model sensors]count]);
	int i;
	for(i=0;i<numToRemove;i++){
		[sensorControllers removeLastObject];
	}
	[self tileSensors];
}
		
- (void) sensorsChanged:(NSNotification*)aNotification
{
	if(!sensorControllers)	sensorControllers = [[NSMutableArray array] retain];
	uint32_t numToAdd = (uint32_t)([[model sensors] count] - [sensorControllers count]);
	int i;
	for(i=0;i<numToAdd;i++){
		[sensorControllers addObject:[ORiTransGasSensorController sensorPanel]];
	}
	[self tileSensors];
}
			
- (void) tileSensors
{
	//space Needed
	int numViewsNeeded = (int)[sensorControllers count];
	int numViews       = (int)[[sensorsView subviews] count];
	if(numViewsNeeded < numViews){
		int i;
		int n = numViews-numViewsNeeded;
		for(i=0;i<n;i++){
			[[[sensorsView subviews] lastObject] removeFromSuperviewWithoutNeedingDisplay];
		}
	}
	else {
		for(id aController in sensorControllers){
			[sensorsView addSubview:[aController view]];
		}
	}
	id subViews = [sensorsView subviews];
	float totalHeightNeeded = 0;
	for(id aView in subViews){
		totalHeightNeeded += [aView frame].size.height + 5;
	}
    [sensorsView setFrameSize: NSMakeSize([sensorsView frame].size.width,totalHeightNeeded)];
	
    NSPoint origin = NSMakePoint(10,[sensorsView frame].size.height);
	for(id aView in subViews){
        NSRect viewRect = [aView frame];
        origin.y -= (viewRect.size.height+5);
        [aView setFrameOrigin: origin];
	}	
	
	//loop over all and assign the model
	int i;
	int n = (int)[sensorControllers count];
	for(i=0;i<n;i++){
		id aController = [sensorControllers objectAtIndex:i];
		[aController setModel:[model sensor:i]];
	}
}

#pragma mark ***Actions

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORModBusLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:(int)[[sender selectedItem] tag]];
}

- (IBAction) addSensorAction:(id)sender
{
	[model addSensor:[ORiTransGasSensorModel sensor]];
}

- (IBAction) readNowAction:(id)sender
{
	[self endEditing];
	[model pollSensors];
}

- (IBAction) shipValuesAction:(id)sender
{
	[model setShipValues:[sender intValue]];	
}

@end

@implementation ORModBusController (private)
- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];
	
	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end

