//--------------------------------------------------------
// ORVarianTPSController
// Created by Mark  A. Howe on Wed 12/2/09
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORVarianTPSController.h"
#import "ORVarianTPSModel.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"
#import "ORSerialPort.h"
#import "ORTimeRate.h"
#import "ORSerialPortController.h"

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
@interface ORVarianTPSController (private)
- (void) _turnOffSheetDidEnd:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo;
@end
#endif

@implementation ORVarianTPSController

#pragma mark •••Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"VarianTPS"];
	return self;
}

- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{	
    [[plotter yAxis] setRngLow:0.0 withHigh:1000.];
	[[plotter yAxis] setRngLimitsLow:0.0 withHigh:1000000000 withMinRng:10];
	
    [[plotter xAxis] setRngLow:0.0 withHigh:10000];
	[[plotter xAxis] setRngLimitsLow:0.0 withHigh:200000. withMinRng:200];

	ORTimeLinePlot* aPlot;
	aPlot= [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter addPlot: aPlot];
	[(ORTimeAxis*)[plotter xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
	[aPlot release];
	
	[super awakeFromNib];	
}

#pragma mark •••Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
	
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORVarianTPSModelPollTimeChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORVarianTPSLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(actualRotorSpeedChanged:)
                         name : ORVarianTPSModelActualRotorSpeedChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(motorCurrentChanged:)
                         name : ORVarianTPSModelMotorCurrentChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(motorCurrentChanged:)
                         name : ORVarianTPSModelMotorCurrentChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(pressureChanged:)
                         name : ORVarianTPSModelPressureChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(stationPowerChanged:)
                         name : ORVarianTPSModelStationPowerChanged
						object: model];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];
	
    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];
	
    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
	
	[notifyCenter addObserver : self
                     selector : @selector(pressureScaleChanged:)
                         name : ORVarianTPSModelPressureScaleChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(remoteChanged:)
                         name : ORVarianTPSModelRemoteChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(statusChanged:)
                         name : ORVarianTPSModelWindowStatusChanged
						object: model];	
	
    [notifyCenter addObserver : self
                     selector : @selector(controllerTempChanged:)
                         name : ORVarianTPSModelControllerTempChanged
						object: model];	
	
	[serialPortController registerNotificationObservers];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"Varian TPS (%lu)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
	[self actualRotorSpeedChanged:nil];
	[self motorCurrentChanged:nil];
	[self pressureChanged:nil];
	[self stationPowerChanged:nil];
	[self updateTimePlot:nil];
    [self miscAttributesChanged:nil];
	[self pressureScaleChanged:nil];
	[self pollTimeChanged:nil];
	[self remoteChanged:nil];
	[self statusChanged:nil];
	[self controllerTempChanged:nil];
	[serialPortController updateWindow];

}

- (void) statusChanged:(NSNotification*)aNote
{
	[statusField setStringValue: [model statusString]];
}

- (void) controllerTempChanged:(NSNotification*)aNote
{
	[controllerTempField setIntValue: [model controllerTemp]];
}

- (void) remoteChanged:(NSNotification*)aNote
{
	[self updateButtons];
	[remoteField setStringValue: [model remote]? @"NO":@"YES"];
}

- (void) pressureScaleChanged:(NSNotification*)aNote
{
	[pressureScalePU selectItemAtIndex: [model pressureScale]];
	[plotter setNeedsDisplay:YES];
	if([model pressureScale]>0){
		[[plotter yAxis] setLabel:[NSString stringWithFormat:@"Pressure x E-%02d",[model pressureScale]]];
	}
	else {
		[[plotter yAxis] setLabel:@"Pressure"];
	}
}
- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter xAxis]attributes] forKey:@"XAttributes0"];
	};
	
	if(aNotification == nil || [aNotification object] == [plotter yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter yAxis]attributes] forKey:@"YAttributes0"];
	};
	
}

- (void) miscAttributesChanged:(NSNotification*)aNote
{
	
	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter xAxis] setAttributes:attrib];
			[plotter setNeedsDisplay:YES];
			[[plotter xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter yAxis] setAttributes:attrib];
			[plotter setNeedsDisplay:YES];
			[[plotter yAxis] setNeedsDisplay:YES];
			[trendLogCB setState:[[attrib objectForKey:ORAxisUseLog] boolValue]];
		}
	}
	
}

- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate])){
		[plotter setNeedsDisplay:YES];
	}
}

- (void) motorCurrentChanged:(NSNotification*)aNote		{ [motorCurrentField		setFloatValue:	[model motorCurrent]]; }
- (void) actualRotorSpeedChanged:(NSNotification*)aNote	{ [actualRotorSpeedField	setIntValue:	[model actualRotorSpeed]]; }

- (void) stationPowerChanged:(NSNotification*)aNote		
{ 
	[stationPowerField	setStringValue:	[model stationPower]? @"ON":@"OFF"];
	[self updateButtons];
}


- (void) pressureChanged:(NSNotification*)aNote
{
	float pressure = [model pressure];
	[pressureField setStringValue: pressure == 0?@"--":[NSString stringWithFormat:@"%7.1E",[model pressure]]];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORVarianTPSLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
	[self updateButtons];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORVarianTPSLock];;
}

- (void) updateButtons
{
    BOOL locked = [gSecurity isLocked:ORVarianTPSLock];
	BOOL portOpen = [[model serialPort] isOpen];
	BOOL stationOn = [model stationPower];
	BOOL inRemote  = ![model remote];
    [lockButton setState: locked];
	
	[serialPortController updateButtons:locked];
	
    [stationOnButton setEnabled:!locked && portOpen && !stationOn && inRemote];
    [stationOffButton setEnabled:!locked && portOpen && stationOn && inRemote];
    [updateButton setEnabled:portOpen];

    [pollTimePopup setEnabled:!locked && portOpen];
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

#pragma mark •••Actions

- (IBAction) pressureScaleAction:(id)sender
{
	[model setPressureScale:[sender indexOfSelectedItem]];	
}

- (IBAction) turnOnAction:(id)sender
{
	[model turnStationOn];
}

- (IBAction) turnOffAction:(id)sender
{
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Turning Off Pumping Station!"];
    [alert setInformativeText:@"Is this really what you want?"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert addButtonWithTitle:@"Yes, Turn it OFF"];
    [alert setAlertStyle:NSWarningAlertStyle];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertSecondButtonReturn){
            [model turnStationOff];
        }
    }];
#else
    NSBeginAlertSheet(@"Turning Off Pumping Station!",
                      @"Cancel",
                      @"Yes, Turn it OFF",
                      nil,[self window],
                      self,
                      @selector(_turnOffSheetDidEnd:returnCode:contextInfo:),
                      nil,
                      nil,@"Is this really what you want?");
#endif
}


- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORVarianTPSLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) updateAllAction:(id)sender
{
	[model updateAll];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:[[sender selectedItem] tag]];
}

#pragma mark •••Data Source
- (int) numberPointsInPlot:(id)aPlotter
{
	return [[model timeRate] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int count = [[model timeRate] count];
	int index = count-i-1;
	*xValue = [[model timeRate] timeSampledAtIndex:index];;
	*yValue = [[model timeRate] valueAtIndex:index] * [model pressureScaleValue];
}


@end

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
@implementation ORVarianTPSController (private)
- (void) _turnOffSheetDidEnd:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
    if(returnCode == NSAlertAlternateReturn){
		[model turnStationOff];
    }    
}
@end
#endif

