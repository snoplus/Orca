//--------------------------------------------------------
// ORCP8CryopumpModel
// Created by Mark Howe Tuesday, March 20,2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012, University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORCP8CryopumpModel.h"
#import "ORSerialPort.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#import "ORSerialPortAdditions.h"
#import "ORDataTypeAssigner.h"
#import "ORDataPacket.h"
#import "ORTimeRate.h"

#pragma mark •••External Strings
NSString* ORCP8CryopumpModelFirstStageControlMethodRBChanged = @"ORCP8CryopumpModelFirstStageControlMethodRBChanged";
NSString* ORCP8CryopumpModelSecondStageTempControlChanged	= @"ORCP8CryopumpModelSecondStageTempControlChanged";
NSString* ORCP8CryopumpModelRoughingInterlockChanged		= @"ORCP8CryopumpModelRoughingInterlockChanged";
NSString* ORCP8CryopumpModelStandbyModeChanged				= @"ORCP8CryopumpModelStandbyModeChanged";
NSString* ORCP8CryopumpModelRepurgeTimeChanged				= @"ORCP8CryopumpModelRepurgeTimeChanged";
NSString* ORCP8CryopumpModelPumpsPerCompressorChanged		= @"ORCP8CryopumpModelPumpsPerCompressorChanged";
NSString* ORCP8CryopumpModelRoughingInterlockStatusChanged	= @"ORCP8CryopumpModelRoughingInterlockStatusChanged";
NSString* ORCP8CryopumpModelRestartTemperatureChanged		= @"ORCP8CryopumpModelRestartTemperatureChanged";
NSString* ORCP8CryopumpModelRateOfRiseCyclesChanged			= @"ORCP8CryopumpModelRateOfRiseCyclesChanged";
NSString* ORCP8CryopumpModelRateOfRiseChanged				= @"ORCP8CryopumpModelRateOfRiseChanged";
NSString* ORCP8CryopumpModelRoughToPressureChanged			= @"ORCP8CryopumpModelRoughToPressureChanged";
NSString* ORCP8CryopumpModelRepurgeCyclesChanged			= @"ORCP8CryopumpModelRepurgeCyclesChanged";
NSString* ORCP8CryopumpModelExtendedPurgeTimeChanged		= @"ORCP8CryopumpModelExtendedPurgeTimeChanged";
NSString* ORCP8CryopumpModelPumpRestartDelayChanged			= @"ORCP8CryopumpModelPumpRestartDelayChanged";
NSString* ORCP8CryopumpModelThermocouplePressureChanged		= @"ORCP8CryopumpModelThermocouplePressureChanged";
NSString* ORCP8CryopumpModelThermocoupleStatusChanged		= @"ORCP8CryopumpModelThermocoupleStatusChanged";
NSString* ORCP8CryopumpModelStatusChanged					= @"ORCP8CryopumpModelStatusChanged";
NSString* ORCP8CryopumpModelSecondStageTempChanged			= @"ORCP8CryopumpModelSecondStageTempChanged";
NSString* ORCP8CryopumpModelRoughValveInterlockChanged		= @"ORCP8CryopumpModelRoughValveInterlockChanged";
NSString* ORCP8CryopumpModelRoughValveStatusChanged			= @"ORCP8CryopumpModelRoughValveStatusChanged";
NSString* ORCP8CryopumpModelRegenerationTimeChanged			= @"ORCP8CryopumpModelRegenerationTimeChanged";
NSString* ORCP8CryopumpModelRegenerationStepTimerChanged	= @"ORCP8CryopumpModelRegenerationStepTimerChanged";
NSString* ORCP8CryopumpModelRegenerationStartDelayChanged	= @"ORCP8CryopumpModelRegenerationStartDelayChanged";
NSString* ORCP8CryopumpModelRegenerationSequenceChanged		= @"ORCP8CryopumpModelRegenerationSequenceChanged";
NSString* ORCP8CryopumpModelRegenerationErrorChanged		= @"ORCP8CryopumpModelRegenerationErrorChanged";
NSString* ORCP8CryopumpModelRegenerationCyclesChanged		= @"ORCP8CryopumpModelRegenerationCyclesChanged";
NSString* ORCP8CryopumpModelRegenerationChanged				= @"ORCP8CryopumpModelRegenerationChanged";
NSString* ORCP8CryopumpModelPurgeStatusChanged				= @"ORCP8CryopumpModelPurgeStatusChanged";
NSString* ORCP8CryopumpModelPumpStatusChanged				= @"ORCP8CryopumpModelPumpStatusChanged";
NSString* ORCP8CryopumpModelPowerFailureRecoveryStatusChanged = @"ORCP8CryopumpModelPowerFailureRecoveryStatusChanged";
NSString* ORCP8CryopumpModelPowerFailureRecoveryChanged		= @"ORCP8CryopumpModelPowerFailureRecoveryChanged";
NSString* ORCP8CryopumpModelModuleVersionChanged			= @"ORCP8CryopumpModelModuleVersionChanged";
NSString* ORCP8CryopumpModelLastRateOfRaiseChanged			= @"ORCP8CryopumpModelLastRateOfRaiseChanged";
NSString* ORCP8CryopumpModelFirstStageControlMethodChanged	= @"ORCP8CryopumpModelFirstStageControlMethodChanged";
NSString* ORCP8CryopumpModelFirstStageControlTempChanged	= @"ORCP8CryopumpModelFirstStageControlTempChanged";
NSString* ORCP8CryopumpModelFirstStageTempChanged			= @"ORCP8CryopumpModelFirstStageTempChanged";
NSString* ORCP8CryopumpModelFailedRepurgeCyclesChanged		= @"ORCP8CryopumpModelFailedRepurgeCyclesChanged";
NSString* ORCP8CryopumpModelFailedRateRiseCyclesChanged		= @"ORCP8CryopumpModelFailedRateRiseCyclesChanged";
NSString* ORCP8CryopumpModelElapsedTimeChanged				= @"ORCP8CryopumpModelElapsedTimeChanged";
NSString* ORCP8CryopumpModelDutyCycleChanged				= @"ORCP8CryopumpModelDutyCycleChanged";
NSString* ORCP8CryopumpShipTemperaturesChanged				= @"ORCP8CryopumpShipTemperaturesChanged";
NSString* ORCP8CryopumpPollTimeChanged						= @"ORCP8CryopumpPollTimeChanged";
NSString* ORCP8CryopumpLock									= @"ORCP8CryopumpLock";
NSString* ORCP8CryopumpModelCmdErrorChanged					= @"ORCP8CryopumpModelCmdErrorChanged";
NSString* ORCP8CryopumpModelWasPowerFailireChanged          = @"ORCP8CryopumpModelWasPowerFailireChanged";
NSString* ORCP8CryopumpModelConstraintsChanged				= @"ORCP8CryopumpModelConstraintsChanged";
NSString* ORCP8CryopumpConstraintsDisabledChanged    = @"ORCP8CryopumpConstraintsDisabledChanged";

@interface ORCP8CryopumpModel (private)
- (void) processOneCommandFromQueue;
- (void) process_response:(NSString*)theResponse;
- (unsigned char) checkSum:(NSString*)aCmd;
- (void) clearDelay;
- (void) postCouchDBRecord;
@end

@implementation ORCP8CryopumpModel

- (void) dealloc
{
    [buffer release];
	[timeRates[0] release];
	[timeRates[1] release];
    [moduleVersion release];
	
	[pumpOnConstraints release];
	[pumpOffConstraints release];
	[purgeOpenConstraints release];
	[roughingOpenConstraints release];
	
	[super dealloc];
}

- (void) setUpImage
{
	[self setImage:[NSImage imageNamed:@"CP8Cryopump.tif"]];
}

- (void) makeMainController
{
	[self linkToController:@"ORCP8CryopumpController"];
}

- (NSString*) helpURL
{
	return @"RS232/MKS_651c.html";
}

- (void) dataReceived:(NSNotification*)note
{
    if([[note userInfo] objectForKey:@"serialPort"] == serialPort){
		[self cancelTimeout];
        NSString* theString = [[[[NSString alloc] initWithData:[[note userInfo] objectForKey:@"data"] 
												      encoding:NSASCIIStringEncoding] autorelease] uppercaseString];

		//the serial port may break the data up into small chunks, so we have to accumulate the chunks until
		//we get a full piece.
        if(!buffer)buffer = [[NSMutableString string] retain];
        [buffer appendString:theString];					
		
        do {
            NSRange lineRange = [buffer rangeOfString:@"\r"];
            if(lineRange.location!= NSNotFound){
                NSMutableString* theResponse = [[[buffer substringToIndex:lineRange.location+1] mutableCopy] autorelease];
                [buffer deleteCharactersInRange:NSMakeRange(0,lineRange.location+1)];      //take the cmd out of the buffer
				
				[self process_response:theResponse];
    
				[self setLastRequest:nil];			 //clear the last request
				[self processOneCommandFromQueue];	 //do the next command in the queue
            }
        } while([buffer rangeOfString:@"\r"].location!= NSNotFound);
	}
}

- (void) shipTemperatureValues
{
    if([[ORGlobal sharedGlobal] runInProgress]){
		
		uint32_t data[6];
		data[0] = dataId | 6;
		data[1] = ([self uniqueIdNumber]&0xfff);
		
		union {
			float asFloat;
			uint32_t asLong;
		}theData;
		
		int index = 2;
			theData.asFloat = temperature;
			data[index] = theData.asLong;
			index++;
			
			data[index] = timeMeasured;
			index++;
		[[NSNotificationCenter defaultCenter] postNotificationName:ORQueueRecordForShippingNotification 
															object:[NSData dataWithBytes:data length:sizeof(int32_t)*6]];
	}
}

#pragma mark •••Accessors
- (int) firstStageControlMethodRB
{
    return firstStageControlMethodRB;
}

- (void) setFirstStageControlMethodRB:(int)aFirstStageControlMethodRB
{
    firstStageControlMethodRB = aFirstStageControlMethodRB;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelFirstStageControlMethodRBChanged object:self];
}

- (NSString*) firstStageControlMethodString
{
	switch(firstStageControlMethodRB){
		case 0: return @"Ext Heater";
		case 1: return @"1st Stage Spd";
		case 2: return @"2nd Stage Spd";
		case 3: return @"Dual Stage";
		default: return @"?";
	}
}

- (BOOL)    wasPowerFailure
{
    return wasPowerFailure;
}

- (void)    setWasPowerFailure:(BOOL)aState
{
    wasPowerFailure = aState;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelWasPowerFailireChanged object:self];

}

- (int)     cmdError
{
    return cmdError;
}
- (void)    incrementCmdError
{
    cmdError++;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelCmdErrorChanged object:self];
}

- (int) secondStageTempControl
{
    return secondStageTempControl;
}

- (void) setSecondStageTempControl:(int)aSecondStageTempControl
{
    [[[self undoManager] prepareWithInvocationTarget:self] setSecondStageTempControl:secondStageTempControl];
    secondStageTempControl = aSecondStageTempControl;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelSecondStageTempControlChanged object:self];
}

- (BOOL) roughingInterlock
{
    return roughingInterlock;
}

- (void) setRoughingInterlock:(BOOL)aRoughingInterlock
{
    [[[self undoManager] prepareWithInvocationTarget:self] setRoughingInterlock:roughingInterlock];
    
    roughingInterlock = aRoughingInterlock;

    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRoughingInterlockChanged object:self];
}

- (BOOL) standbyMode
{
    return standbyMode;
}

- (void) setStandbyMode:(BOOL)aStandbyMode
{
    [[[self undoManager] prepareWithInvocationTarget:self] setStandbyMode:standbyMode];
    standbyMode = aStandbyMode;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelStandbyModeChanged object:self];
}

- (int) repurgeTime
{
    return repurgeTime;
}

- (void) setRepurgeTime:(int)aRepurgeTime
{
	if(aRepurgeTime<0)		    aRepurgeTime=0;
	else if(aRepurgeTime>9999)	aRepurgeTime=9999;
	
    [[[self undoManager] prepareWithInvocationTarget:self] setRepurgeTime:repurgeTime];
    repurgeTime = aRepurgeTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRepurgeTimeChanged object:self];
}

- (int) pumpsPerCompressor
{
    return pumpsPerCompressor;
}

- (void) setPumpsPerCompressor:(int)aPumpsPerCompressor
{
	if(aPumpsPerCompressor<1)		aPumpsPerCompressor=1;
	else if(aPumpsPerCompressor>3)	aPumpsPerCompressor=3;
    [[[self undoManager] prepareWithInvocationTarget:self] setPumpsPerCompressor:pumpsPerCompressor];
    pumpsPerCompressor = aPumpsPerCompressor;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelPumpsPerCompressorChanged object:self];
}

- (int) roughingInterlockStatus
{
    return roughingInterlockStatus;
}

- (void) setRoughingInterlockStatus:(int)aStatus
{
    roughingInterlockStatus = aStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRoughingInterlockStatusChanged object:self];
}

- (int) restartTemperature
{
    return restartTemperature;
}

- (void) setRestartTemperature:(int)aRestartTemperature
{
	if(aRestartTemperature<0)		 aRestartTemperature=0;
	else if(aRestartTemperature>80) aRestartTemperature=80;
    [[[self undoManager] prepareWithInvocationTarget:self] setRestartTemperature:restartTemperature];
    restartTemperature = aRestartTemperature;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRestartTemperatureChanged object:self];
}

- (int) rateOfRiseCycles
{
    return rateOfRiseCycles;
}

- (void) setRateOfRiseCycles:(int)aRateOfRiseCycles
{
    [[[self undoManager] prepareWithInvocationTarget:self] setRateOfRiseCycles:rateOfRiseCycles];
    rateOfRiseCycles = aRateOfRiseCycles;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRateOfRiseCyclesChanged object:self];
}

- (int) rateOfRise
{
    return rateOfRise;
}

- (void) setRateOfRise:(int)aRateOfRise
{
	if(aRateOfRise<1)		 aRateOfRise=1;
	else if(aRateOfRise>100) aRateOfRise=100;
	
    [[[self undoManager] prepareWithInvocationTarget:self] setRateOfRise:rateOfRise];
    rateOfRise = aRateOfRise;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRateOfRiseChanged object:self];
}

- (int) roughToPressure
{
    return roughToPressure;
}

- (void) setRoughToPressure:(int)aRoughToPressure
{
	if(aRoughToPressure<25)		 aRoughToPressure=25;
	else if(aRoughToPressure>200) aRoughToPressure=200;
    [[[self undoManager] prepareWithInvocationTarget:self] setRoughToPressure:roughToPressure];
    roughToPressure = aRoughToPressure;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRoughToPressureChanged object:self];
}

- (int) repurgeCycles
{
    return repurgeCycles;
}

- (void) setRepurgeCycles:(int)aRepurgeCycles
{
	if(aRepurgeCycles<0)		 aRepurgeCycles=0;
	else if(aRepurgeCycles>200) aRepurgeCycles=200;
    [[[self undoManager] prepareWithInvocationTarget:self] setRepurgeCycles:repurgeCycles];
    repurgeCycles = aRepurgeCycles;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRepurgeCyclesChanged object:self];
}

- (int) extendedPurgeTime
{
    return extendedPurgeTime;
}

- (void) setExtendedPurgeTime:(int)aExtendedPurgeTime
{
	if(aExtendedPurgeTime<0)		 aExtendedPurgeTime=0;
	else if(aExtendedPurgeTime>9990) aExtendedPurgeTime=9990;
    [[[self undoManager] prepareWithInvocationTarget:self] setExtendedPurgeTime:extendedPurgeTime];
    extendedPurgeTime = aExtendedPurgeTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelExtendedPurgeTimeChanged object:self];
}

- (int) pumpRestartDelay
{
    return pumpRestartDelay;
}

- (void) setPumpRestartDelay:(int)aPumpRestartDelay
{
	if(aPumpRestartDelay<0)		 aPumpRestartDelay=0;
	else if(aPumpRestartDelay>59994) aPumpRestartDelay=59994;
    [[[self undoManager] prepareWithInvocationTarget:self] setPumpRestartDelay:pumpRestartDelay];
    pumpRestartDelay = aPumpRestartDelay;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelPumpRestartDelayChanged object:self];
}

- (float) thermocouplePressure
{
    return thermocouplePressure;
}

- (void) setThermocouplePressure:(float)aThermocouplePressure
{
    thermocouplePressure = aThermocouplePressure;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelThermocouplePressureChanged object:self];
}

- (int) thermocoupleStatus
{
    return thermocoupleStatus;
}

- (void) setThermocoupleStatus:(int)aThermocoupleStatus
{
    thermocoupleStatus = aThermocoupleStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelThermocoupleStatusChanged object:self];
}

- (int) status
{
    return status;
}

- (void) setStatus:(int)aStatus
{
    status = aStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelStatusChanged object:self];
}

- (float) secondStageTemp
{
    return secondStageTemp;
}

- (void) setSecondStageTemp:(float)aSecondStageTemp
{
    secondStageTemp = aSecondStageTemp;
    
    //it is assumed that the temps are always measured together. We'll use the time stamp from the first stage
    if(timeRates[1] == nil) timeRates[1] = [[ORTimeRate alloc] init];
	[timeRates[1] addDataToTimeAverage:secondStageTemp];

    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelSecondStageTempChanged object:self];
}

- (int) roughValveInterlock
{
    return roughValveInterlock;
}

- (void) setRoughValveInterlock:(int)aRoughValveInterlock
{
    roughValveInterlock = aRoughValveInterlock;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRoughValveInterlockChanged object:self];
}

- (int) roughValveStatus
{
    return roughValveStatus;
}

- (void) setRoughValveStatus:(int)aRoughValveStatus
{
    roughValveStatus = aRoughValveStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRoughValveStatusChanged object:self];
}

- (int) regenerationTime
{
    return regenerationTime;
}

- (void) setRegenerationTime:(int)aRegenerationTime
{
    regenerationTime = aRegenerationTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRegenerationTimeChanged object:self];
}

- (int) regenerationStepTimer
{
    return regenerationStepTimer;
}

- (void) setRegenerationStepTimer:(int)aRegenerationStepTimer
{
    regenerationStepTimer = aRegenerationStepTimer;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRegenerationStepTimerChanged object:self];
}

- (int) regenerationStartDelay
{
    return regenerationStartDelay;
}

- (void) setRegenerationStartDelay:(int)aRegenerationStartDelay
{
    [[[self undoManager] prepareWithInvocationTarget:self] setRegenerationStartDelay:regenerationStartDelay];
    regenerationStartDelay = aRegenerationStartDelay;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRegenerationStartDelayChanged object:self];
}

- (int) regenerationSequence
{
    return regenerationSequence;
}

- (void) setRegenerationSequence:(int)aRegenerationSequence
{
    regenerationSequence = aRegenerationSequence;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRegenerationSequenceChanged object:self];
}

- (int) regenerationError
{
    return regenerationError;
}

- (void) setRegenerationError:(int)aRegenerationError
{
    regenerationError = aRegenerationError;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRegenerationErrorChanged object:self];
}

- (int) regenerationCycles
{
    return regenerationCycles;
}

- (void) setRegenerationCycles:(int)aRegenerationCycles
{
    regenerationCycles = aRegenerationCycles;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelRegenerationCyclesChanged object:self];
}

- (int) purgeStatus
{
    return purgeStatus;
}

- (void) setPurgeStatus:(int)aPurgeStatus
{
    purgeStatus = aPurgeStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelPurgeStatusChanged object:self];
}

- (int) pumpStatus
{
    return pumpStatus;
}

- (void) setPumpStatus:(int)aPumpStatus
{
    pumpStatus = aPumpStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelPumpStatusChanged object:self];
}

- (int) powerFailureRecoveryStatus
{
    return powerFailureRecoveryStatus;
}

- (void) setPowerFailureRecoveryStatus:(int)aPowerFailureRecoveryStatus
{
    powerFailureRecoveryStatus = aPowerFailureRecoveryStatus;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelPowerFailureRecoveryStatusChanged object:self];
}

- (int) powerFailureRecovery
{
    return powerFailureRecovery;
}

- (void) setPowerFailureRecovery:(int)aPowerFailureRecovery
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPowerFailureRecovery:powerFailureRecovery];
    powerFailureRecovery = aPowerFailureRecovery;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelPowerFailureRecoveryChanged object:self];
}

- (NSString*) moduleVersion
{
	if([moduleVersion length])return moduleVersion;
	else return @"--";
}

- (void) setModuleVersion:(NSString*)aModuleVersion
{
    [moduleVersion autorelease];
    moduleVersion = [aModuleVersion copy];    

    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelModuleVersionChanged object:self];
}

- (int) lastRateOfRaise
{
    return lastRateOfRaise;
}

- (void) setLastRateOfRaise:(int)aLastRateOfRaise
{
    lastRateOfRaise = aLastRateOfRaise;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelLastRateOfRaiseChanged object:self];
}

- (int) firstStageControlMethod
{
    return firstStageControlMethod;
}

- (void) setFirstStageControlMethod:(int)aFirstStageControlMethod
{
    [[[self undoManager] prepareWithInvocationTarget:self] setFirstStageControlMethod:firstStageControlMethod];
    firstStageControlMethod = aFirstStageControlMethod;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelFirstStageControlMethodChanged object:self];
}

- (int) firstStageControlTemp
{
    return firstStageControlTemp;
}

- (void) setFirstStageControlTemp:(int)aFirstStageControlTemp
{
    [[[self undoManager] prepareWithInvocationTarget:self] setFirstStageControlTemp:firstStageControlTemp];
    firstStageControlTemp = aFirstStageControlTemp;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelFirstStageControlTempChanged object:self];
}

- (float) firstStageTemp
{
    return firstStageTemp;
}

- (void) setFirstStageTemp:(float)aFirstStageTemp
{
    firstStageTemp = aFirstStageTemp;
    
    //get the time(UT!)
	time_t	ut_Time;
	time(&ut_Time);
	timeMeasured = (uint32_t)ut_Time;
    
	if(timeRates[0] == nil) timeRates[0] = [[ORTimeRate alloc] init];
	[timeRates[0] addDataToTimeAverage:firstStageTemp];

    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelFirstStageTempChanged object:self];
}

- (int) failedRepurgeCycles
{
    return failedRepurgeCycles;
}

- (void) setFailedRepurgeCycles:(int)aFailedRepurgeCycles
{
    failedRepurgeCycles = aFailedRepurgeCycles;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelFailedRepurgeCyclesChanged object:self];
}

- (int) failedRateRiseCycles
{
    return failedRateRiseCycles;
}

- (void) setFailedRateRiseCycles:(int)aFailedRateRiseCycles
{
    failedRateRiseCycles = aFailedRateRiseCycles;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelFailedRateRiseCyclesChanged object:self];
}

- (int) elapsedTime
{
    return elapsedTime;
}

- (void) setElapsedTime:(int)aElapsedTime
{    
    elapsedTime = aElapsedTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelElapsedTimeChanged object:self];
}

- (int) dutyCycle
{
    return dutyCycle;
}

- (void) setDutyCycle:(int)aDutyCycle
{
    dutyCycle = aDutyCycle;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelDutyCycleChanged object:self];
}

- (ORTimeRate*)timeRate:(int)index
{
	if(index<2)return timeRates[index];
    else return nil;
}

- (BOOL) shipTemperatures
{
    return shipTemperatures;
}

- (void) setShipTemperatures:(BOOL)aState
{
    [[[self undoManager] prepareWithInvocationTarget:self] setShipTemperatures:shipTemperatures];
    shipTemperatures = aState;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpShipTemperaturesChanged object:self];
}

- (int) pollTime
{
    return pollTime;
}

- (void) setPollTime:(int)aPollTime
{
    [[[self undoManager] prepareWithInvocationTarget:self] setPollTime:pollTime];
    pollTime = aPollTime;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpPollTimeChanged object:self];

	if(pollTime){
		[self performSelector:@selector(pollHardware) withObject:nil afterDelay:2];
	}
	else {
		[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollHardware) object:nil];
	}
}

- (float) temperature
{
	return temperature;
}

- (uint32_t) timeMeasured
{
	return timeMeasured;
}

- (BOOL) acceptsGuardian: (OrcaObject *)aGuardian
{
	return [super acceptsGuardian:aGuardian] || [aGuardian isMemberOfClass:NSClassFromString(@"ORMJDVacuumModel")];
}

- (void) setUpPort
{
	[serialPort setSpeed:2400];
	[serialPort setParityEven];
	[serialPort setStopBits2:0];
	[serialPort setDataBits:7];
 }

- (void) firstActionAfterOpeningPort
{
	[self readModuleVersion];
}

- (NSString*) auxStatusString:(int)aChannel
{
	if([self isValid]){
		if([self pumpStatus]) return [NSString stringWithFormat:@"%dK",(int)[self secondStageTemp]];
		else return @"OFF";
	}
	else return @"?";	
}

#pragma mark •••Archival
- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];
	[[self undoManager] disableUndoRegistration];
	[self setSecondStageTempControl:	[decoder decodeIntForKey:@"secondStageTempControl"]];
	[self setRoughingInterlock:			[decoder decodeBoolForKey:@"roughingInterlock"]];
	[self setStandbyMode:				[decoder decodeBoolForKey:@"standbyMode"]];
	[self setRepurgeTime:				[decoder decodeIntForKey:@"repurgeTime"]];
	[self setPumpsPerCompressor:		[decoder decodeIntForKey:@"pumpsPerCompressor"]];
	[self setRestartTemperature:		[decoder decodeIntForKey:@"restartTemperature"]];
	[self setRateOfRiseCycles:			[decoder decodeIntForKey:@"rateOfRiseCycles"]];
	[self setRateOfRise:				[decoder decodeIntForKey:@"rateOfRise"]];
	[self setRoughToPressure:			[decoder decodeIntForKey:@"roughToPressure"]];
	[self setRepurgeCycles:				[decoder decodeIntForKey:@"repurgeCycles"]];
	[self setExtendedPurgeTime:			[decoder decodeIntForKey:@"extendedPurgeTime"]];
	[self setPumpRestartDelay:			[decoder decodeIntForKey:@"pumpRestartDelay"]];
	[self setRegenerationStartDelay:	[decoder decodeIntForKey:@"regenerationStartDelay"]];
	[self setPowerFailureRecovery:		[decoder decodeIntForKey:@"powerFailureRecovery"]];
	[self setLastRateOfRaise:			[decoder decodeIntForKey:@"lastRateOfRaise"]];
	[self setFirstStageControlMethod:	[decoder decodeIntForKey:@"firstStageControlMethod"]];
	[self setFirstStageControlTemp:		[decoder decodeIntForKey:@"firstStageControlTemp"]];
	[self setShipTemperatures:			[decoder decodeBoolForKey:	 @"shipTemperatures"]];
	[self setPollTime:					[decoder decodeIntForKey:	 @"pollTime"]];
	
	[[self undoManager] enableUndoRegistration];

	return self;
}

- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
    [encoder encodeInteger:secondStageTempControl	forKey:@"secondStageTempControl"];
    [encoder encodeBool:roughingInterlock		forKey:@"roughingInterlock"];
    [encoder encodeBool:standbyMode				forKey:@"standbyMode"];
    [encoder encodeInteger:repurgeTime				forKey:@"repurgeTime"];
    [encoder encodeInteger:pumpsPerCompressor		forKey:@"pumpsPerCompressor"];
    [encoder encodeInteger:restartTemperature		forKey:@"restartTemperature"];
    [encoder encodeInteger:rateOfRiseCycles			forKey:@"rateOfRiseCycles"];
    [encoder encodeInteger:rateOfRise				forKey:@"rateOfRise"];
    [encoder encodeInteger:roughToPressure			forKey:@"roughToPressure"];
    [encoder encodeInteger:repurgeCycles			forKey:@"repurgeCycles"];
    [encoder encodeInteger:extendedPurgeTime		forKey:@"extendedPurgeTime"];
    [encoder encodeInteger:pumpRestartDelay			forKey:@"pumpRestartDelay"];
    [encoder encodeInteger:regenerationStartDelay	forKey: @"regenerationStartDelay"];
    [encoder encodeInteger:powerFailureRecovery		forKey: @"powerFailureRecovery"];
    [encoder encodeInteger:firstStageControlMethod	forKey:@"firstStageControlMethod"];
    [encoder encodeInteger:firstStageControlTemp	forKey:@"firstStageControlTemp"];
    [encoder encodeBool:shipTemperatures		forKey: @"shipTemperatures"];
    [encoder encodeInteger: pollTime				forKey: @"pollTime"];
}

#pragma mark •••Constraints
- (void) addPumpOnConstraint:(NSString*)aName reason:(NSString*)aReason
{
	if(!pumpOnConstraints)pumpOnConstraints = [[NSMutableDictionary dictionary] retain];
	[pumpOnConstraints setObject:aReason forKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}
- (void) removePumpOnConstraint:(NSString*)aName
{
	[pumpOnConstraints removeObjectForKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}

- (void) addPumpOffConstraint:(NSString*)aName reason:(NSString*)aReason
{
	if(!pumpOffConstraints)pumpOffConstraints = [[NSMutableDictionary dictionary] retain];
	[pumpOffConstraints setObject:aReason forKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}
- (void) removePumpOffConstraint:(NSString*)aName
{
	[pumpOffConstraints removeObjectForKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}

- (void) addPurgeConstraint:(NSString*)aName reason:(NSString*)aReason
{
	if(!purgeOpenConstraints)purgeOpenConstraints = [[NSMutableDictionary dictionary] retain];
	[purgeOpenConstraints setObject:aReason forKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}
- (void) removePurgeConstraint:(NSString*)aName
{
	[purgeOpenConstraints removeObjectForKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}

- (void) addRoughingConstraint:(NSString*)aName reason:(NSString*)aReason
{
	if(!roughingOpenConstraints)roughingOpenConstraints = [[NSMutableDictionary dictionary] retain];
	[roughingOpenConstraints setObject:aReason forKey:aName];
	[[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpModelConstraintsChanged object:self];
}
- (void) removeRoughingConstraint:(NSString*)aName
{
	[roughingOpenConstraints removeObjectForKey:aName];
}
- (void) disableConstraints
{
    constraintsDisabled = YES;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpConstraintsDisabledChanged object:self];
}

- (void) enableConstraints
{
    constraintsDisabled = NO;
    [[NSNotificationCenter defaultCenter] postNotificationName:ORCP8CryopumpConstraintsDisabledChanged object:self];
}

- (BOOL) constraintsDisabled
{
    return constraintsDisabled;
}

- (NSDictionary*)pumpOnConstraints		 { return pumpOnConstraints;		}
- (NSDictionary*)pumpOffConstraints		 { return pumpOffConstraints;		}
- (NSDictionary*)purgeOpenConstraints	 { return purgeOpenConstraints;		}
- (NSDictionary*)roughingOpenConstraints { return roughingOpenConstraints;	}

- (NSString*) pumpOnOffConstraintReport
{
    NSString* s = @"";
    for(id aKey in pumpOnConstraints){
        s = [s stringByAppendingFormat:@"%@ : %@\n",aKey,[pumpOnConstraints objectForKey:aKey]];
    }
    for(id aKey in pumpOffConstraints){
        s = [s stringByAppendingFormat:@"%@ : %@\n",aKey,[pumpOffConstraints objectForKey:aKey]];
    }
    return s;
}

- (NSString*) purgeOpenConstraintReport
{
    NSString* s=@"";
    for(id aKey in purgeOpenConstraints){
        s = [s stringByAppendingFormat:@"%@ : %@\n",aKey,[purgeOpenConstraints objectForKey:aKey]];
    }
    return s;
}
- (NSString*) roughingOpenConstraintReport
{
    NSString* s=@"";
    for(id aKey in roughingOpenConstraints){
        s = [s stringByAppendingFormat:@"%@ : %@\n",aKey,[roughingOpenConstraints objectForKey:aKey]];
    }
    return s;
}


#pragma mark ••• Commands
- (void) addCmdToQueue:(NSString *)aCmd
{
    [self addCmdToQueue:aCmd waitForResponse:YES];
}

- (void) addCmdToQueue:(NSString*)aCmd waitForResponse:(BOOL)waitForResponse
{
    if([serialPort isOpen]){ 
		if(![aCmd hasPrefix:@"++"]){
			//make sure the someone didn't add stuff that we are going to add.
			aCmd = [aCmd stringByReplacingOccurrencesOfString:@"$" withString:@""];
		}
		ORCP8CryopumpCmd* cmdObj = [[[ORCP8CryopumpCmd alloc] init] autorelease];
		cmdObj.cmd = [NSString stringWithFormat:@"$%@%c\r",aCmd,[self checkSum:aCmd]];
		cmdObj.waitForResponse = waitForResponse;
		
		[self enqueueCmd:cmdObj];
        
		cmdObj = [[[ORCP8CryopumpCmd alloc] init] autorelease];
		cmdObj.cmd = @"++Delay";
		cmdObj.waitForResponse = NO;
        [self enqueueCmd:cmdObj]; //arggg -- appears we need a delay between all commands

		if(!lastRequest){
			[self processOneCommandFromQueue];
		}
	}
}

- (void) readTemperatures
{
	[self readFirstStageTemp];
	[self readSecondStageTemp];
	if(shipTemperatures)[self addCmdToQueue:@"++ShipRecords" waitForResponse:NO];
}


- (void) initHardware
{
	[self writeRegenerationCycleParameters];
	[self writeFirstStageTempControl];
	[self writePowerFailureRecoveryMode];
	[self addCmdToQueue: [NSString stringWithFormat:@"I%d",secondStageTempControl]];
}

#pragma mark •••Queries
- (void) readDutyCycle					{ [self addCmdToQueue: @"XOI??"]; }
- (void) readElapsedTime				{ [self addCmdToQueue: @"Y?"]; }
- (void) readFailedRateRiseCycles		{ [self addCmdToQueue: @"m"	]; }
- (void) readFailedPurgeCycles			{ [self addCmdToQueue: @"I"	]; }
- (void) readFirstStageTemp				{ [self addCmdToQueue: @"J"	]; }
- (void) readFirstStageControlTemp		{ [self addCmdToQueue: @"H?"]; }
- (void) readLastRateOfRaise			{ [self addCmdToQueue: @"n"	]; } 
- (void) readModuleVersion				{ [self addCmdToQueue: @"@"	]; } 
- (void) readPowerFailureRecoveryStatus	{ [self addCmdToQueue: @"t?"]; }  
- (void) readPumpStatus					{ [self addCmdToQueue: @"A?"]; }
- (void) readPurgeStatus				{ [self addCmdToQueue: @"E?"]; }
- (void) readRegenerationTime			{ [self addCmdToQueue: @"a"	]; }
- (void) readRegenerationCycles			{ [self addCmdToQueue: @"Z?"]; }
- (void) readRegenerationError			{ [self addCmdToQueue: @"e"	]; }

- (void) readgs
{
	[self addCmdToQueue:@"P0?" waitForResponse:YES];
	[self addCmdToQueue:@"P1?" waitForResponse:YES];
	[self addCmdToQueue:@"P2?" waitForResponse:YES];
	[self addCmdToQueue:@"P3?" waitForResponse:YES];
	[self addCmdToQueue:@"P4?" waitForResponse:YES];
	[self addCmdToQueue:@"P5?" waitForResponse:YES];
	[self addCmdToQueue:@"P6?" waitForResponse:YES];
	[self addCmdToQueue:@"PA?" waitForResponse:YES];
	[self addCmdToQueue:@"PC?" waitForResponse:YES];
	[self addCmdToQueue:@"PG?" waitForResponse:YES];
	[self addCmdToQueue:@"PS?" waitForResponse:YES];
	[self addCmdToQueue:@"Pz?" waitForResponse:YES];
	
}
- (void) readRegenerationSequence		{ [self addCmdToQueue: @"O"	]; }
- (void) readRegenerationStartDelay		{ [self addCmdToQueue: @"j?"]; }
- (void) readRegenerationStepTimer		{ [self addCmdToQueue: @"k"	]; }
- (void) readRoughValveStatus			{ [self addCmdToQueue: @"D?"]; }
- (void) readRoughValveInterlock		{ [self addCmdToQueue: @"Q?"]; }
- (void) readSecondStageTemp			{ [self addCmdToQueue: @"K"	]; }
- (void) readSecondStageTempControl		{ [self addCmdToQueue: @"I?"]; }
- (void) readStatus						{ [self addCmdToQueue: @"S1"]; }
- (void) readThermocoupleStatus			{ [self addCmdToQueue: @"B?"]; }
- (void) readThermocouplePressure		{ [self addCmdToQueue: @"L"	]; }

#pragma mark •••HW Writes
- (void) writeFirstStageTempControl
{
	[self addCmdToQueue: [NSString stringWithFormat:@"H%d,%d",firstStageControlTemp, firstStageControlMethod]];
}

- (void) writePowerFailureRecoveryMode
{
	[self addCmdToQueue: [NSString stringWithFormat:@"i%d",powerFailureRecovery]];
}

- (void) writeCryoPumpOn:(BOOL)aState
{
	[self addCmdToQueue: [NSString stringWithFormat:@"A%d",aState]];
}

- (void) writePurgeValveOpen:(BOOL)aState
{
	[self addCmdToQueue: [NSString stringWithFormat:@"E%d",aState]];
}

- (void) writeRegenerationCycleParameters
{
	[self addCmdToQueue: [NSString stringWithFormat:@"j%d",regenerationStartDelay] waitForResponse:YES];
	[self addCmdToQueue: [NSString stringWithFormat:@"P0%d",pumpRestartDelay]];
	[self addCmdToQueue: [NSString stringWithFormat:@"P1%d",extendedPurgeTime]];
	[self addCmdToQueue: [NSString stringWithFormat:@"P2%d",repurgeCycles]	];
	[self addCmdToQueue: [NSString stringWithFormat:@"P3%d",roughToPressure]];
	[self addCmdToQueue: [NSString stringWithFormat:@"P4%d",rateOfRise]		];
	[self addCmdToQueue: [NSString stringWithFormat:@"P5%d",rateOfRiseCycles]];
	[self addCmdToQueue: [NSString stringWithFormat:@"P6%d",restartTemperature]];
	[self addCmdToQueue: [NSString stringWithFormat:@"PC%d",pumpsPerCompressor]];
	[self addCmdToQueue: [NSString stringWithFormat:@"PG%d",repurgeTime]	];
	[self addCmdToQueue: [NSString stringWithFormat:@"PA%d",roughingInterlock]];
	[self addCmdToQueue: [NSString stringWithFormat:@"Pz%d",standbyMode]	];
}

- (void) writeRegenerationStartDelay:(int)aDelay
{
	[self addCmdToQueue: [NSString stringWithFormat:@"j%d",aDelay] waitForResponse:YES];
}

- (void) writeRoughValveOpen:(BOOL)aState
{
	[self addCmdToQueue: [NSString stringWithFormat:@"D%d",aState] waitForResponse:YES];
}

- (void) writeRoughValveInterlockPermissionYes
{
	[self addCmdToQueue: @"Q" waitForResponse:YES];
}

- (void) writeSecondStageControlTemp:(int)aTemp
{
	[self addCmdToQueue: [NSString stringWithFormat:@"I%d",aTemp]];
}

- (void) writeThermocoupleOn:(BOOL)aState
{
	[self addCmdToQueue: [NSString stringWithFormat:@"B%d",aState]];
}

#pragma mark •••Data Records
- (uint32_t) dataId { return dataId; }
- (void) setDataId: (uint32_t) DataId
{
    dataId = DataId;
}
	 
- (void) setDataIds:(id)assigner
{
    dataId       = [assigner assignDataIds:kLongForm];
}

- (void) syncDataIdsWith:(id)anotherCP8Cryopump
{
    [self setDataId:[anotherCP8Cryopump dataId]];
}

- (void) appendDataDescription:(ORDataPacket*)aDataPacket userInfo:(NSDictionary*)userInfo
{
    //----------------------------------------------------------------------------------------
    // first add our description to the data description
    [aDataPacket addDataDescriptionItem:[self dataRecordDescription] forKey:@"CP8CryopumpModel"];
}

- (NSDictionary*) dataRecordDescription
{
    NSMutableDictionary* dataDictionary = [NSMutableDictionary dictionary];
    NSDictionary* aDictionary = [NSDictionary dictionaryWithObjectsAndKeys:
        @"ORCP8CryopumpDecoderForTemperatures",     @"decoder",
        [NSNumber numberWithLong:dataId],			@"dataId",
        [NSNumber numberWithBool:NO],				@"variable",
        [NSNumber numberWithLong:8],				@"length",
        nil];
    [dataDictionary setObject:aDictionary forKey:@"Temperatures"];
    
    return dataDictionary;
}

- (void) recoverFromTimeout
{
	//there was a timout on the serial line, try again.
	[self pollHardware];
}

- (void) pollHardware
{
	[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(pollHardware) object:nil];

	[self readAllHardware];
    [self postCouchDBRecord];

	if(pollTime!=0){
		[self performSelector:@selector(pollHardware) withObject:nil afterDelay:pollTime];
	}
}
- (void) readAllHardware
{
    [self readTemperatures];
    [self readStatus];
    [self readRegenerationSequence];
    [self readRegenerationStartDelay];
    [self readRegenerationStepTimer];
    [self readRoughValveStatus];
    [self readRoughValveInterlock];
    [self readSecondStageTempControl];
    [self readThermocoupleStatus];
    [self readThermocouplePressure];
    
    [self readDutyCycle];
    [self readElapsedTime];	
    [self readFailedRateRiseCycles];
    [self readFirstStageControlTemp];
    [self readLastRateOfRaise];
    [self readPowerFailureRecoveryStatus];
    [self readPumpStatus];	
    [self readPurgeStatus];
    [self readRegenerationCycles];	
    [self readRegenerationError];	
	[self readRegenerationTime];
    //[self readFailedPurgeCycles];

}

#pragma mark •••Bit Processing Protocol
- (void) processIsStarting { }
- (void) processIsStopping { }
- (void) startProcessCycle { }
- (void) endProcessCycle   { }

- (NSString*) identifier
{
	NSString* s;
 	@synchronized(self){
		s= [NSString stringWithFormat:@"CP8,%u",[self uniqueIdNumber]];
	}
	return s;
}

- (NSString*) processingTitle
{
	NSString* s;
 	@synchronized(self){
		s= [self identifier];
	}
	return s;
}

- (BOOL) processValue:(int)channel
{
	BOOL theValue = 0;
	@synchronized(self){
		switch(channel){
			case 0: theValue = 	[self roughValveStatus];	break;
			case 1: theValue = 	[self purgeStatus];			break;
		}
	}
	return theValue;
}
- (void) setProcessOutput:(int)channel value:(int)value { }
- (void) setOutputBit:(int)channel value:(BOOL)value
{
	@synchronized(self){
		switch(channel){
			case 0: [self writeRoughValveOpen:value];	break;
			case 1: [self writePurgeValveOpen:value];	break;
		}
	}
}

@end

@implementation ORCP8CryopumpModel (private)
- (void) postCouchDBRecord
{
    NSDictionary* values = [NSDictionary dictionaryWithObjectsAndKeys:
                            [NSNumber numberWithInt:  pollTime],                @"pollTime",
                            [NSNumber numberWithInt:  secondStageTempControl],  @"secondStageTempControl",
                            [NSNumber numberWithBool:  roughingInterlock],      @"roughingInterlock",
                            [NSNumber numberWithBool:  standbyMode],            @"standbyMode",
                            [NSNumber numberWithInt:  repurgeTime],             @"repurgeTime",
                            [NSNumber numberWithInt:  pumpsPerCompressor],      @"pumpsPerCompressor",
                            [NSNumber numberWithInt:  restartTemperature],      @"restartTemperature",
                            [NSNumber numberWithInt:  rateOfRiseCycles],        @"rateOfRiseCycles",
                            [NSNumber numberWithInt:  rateOfRise],              @"rateOfRise",
                            [NSNumber numberWithInt:  roughToPressure],         @"roughToPressure",
                            
                            [NSNumber numberWithInt:  repurgeCycles],           @"repurgeCycles",
                            [NSNumber numberWithInt:  extendedPurgeTime],       @"extendedPurgeTime",
                            [NSNumber numberWithInt:  pumpRestartDelay],        @"pumpRestartDelay",
                            [NSNumber numberWithInt:  regenerationStartDelay],  @"regenerationStartDelay",
                            [NSNumber numberWithInt:  powerFailureRecovery],    @"powerFailureRecovery",
                            [NSNumber numberWithInt:  roughToPressure],         @"roughToPressure",

                            [NSNumber numberWithInt:  powerFailureRecovery],    @"powerFailureRecovery",
                            [NSNumber numberWithInt:  lastRateOfRaise],         @"lastRateOfRaise",
                            [NSNumber numberWithInt:  firstStageControlMethod], @"firstStageControlMethod",
                            [NSNumber numberWithInt:  firstStageControlTemp],   @"firstStageControlTemp",
                            [NSNumber numberWithInt:  roughValveStatus],        @"roughValveStatus",
                            [NSNumber numberWithInt:  purgeStatus],             @"purgeStatus",
                            [self auxStatusString:0],                           @"statusString",
                            nil];
    [[NSNotificationCenter defaultCenter] postNotificationName:@"ORCouchDBAddObjectRecord" object:self userInfo:values];
}

- (void) clearDelay
{
	delay = NO;
	[self processOneCommandFromQueue];
}

- (void) processOneCommandFromQueue
{
    if(delay)return;

	ORCP8CryopumpCmd* cmdObj = [self nextCmd];
	if(cmdObj){
		NSString* aCmd = cmdObj.cmd;
		if([aCmd isEqualToString:@"++Delay"]){
			delay = YES;
			[NSObject cancelPreviousPerformRequestsWithTarget:self selector:@selector(clearDelay) object:nil];
			[self performSelector:@selector(clearDelay) withObject:nil afterDelay:.1];
		}
		else if([aCmd isEqualToString:@"++ShipRecords"]){
			if(shipTemperatures) [self shipTemperatureValues];
			[self processOneCommandFromQueue];
		}
		else {
			if(cmdObj.waitForResponse) {
				[self startTimeout:3];
				[self setLastRequest:aCmd];
			}
			else [self setLastRequest:nil];
			if(![aCmd hasSuffix:@"\r"]) aCmd = [aCmd stringByAppendingString:@"\r"];
			[serialPort writeString:aCmd];
			if(!lastRequest){
				[self processOneCommandFromQueue];
			}
		}
	}
}

- (float) responseAsFloat:(NSString*)theResponse
{
	return [[theResponse substringWithRange:NSMakeRange(2,[theResponse length]-4)]floatValue];
}

- (int) responseAsInt:(NSString*)theResponse
{
	return [[theResponse substringWithRange:NSMakeRange(2,[theResponse length]-4)]intValue];
}

- (BOOL) responseAsBool:(NSString*)theResponse
{
	return [[theResponse substringWithRange:NSMakeRange(2,[theResponse length]-4)]intValue];
}

- (NSString*) responseAsString:(NSString*)theResponse
{
	return [theResponse substringWithRange:NSMakeRange(2,[theResponse length]-4)];
}

- (void) process_response:(NSString*)theResponse
{	
	if(!lastRequest)return;
	
	[self setIsValid:YES];

	if([theResponse hasPrefix:@"$A"] || [theResponse hasPrefix:@"$B"]){
        [self setWasPowerFailure:[theResponse hasPrefix:@"$B"]];
        char cmdChar = [[lastRequest substringWithRange:NSMakeRange(1,1)] characterAtIndex:0];
		switch(cmdChar){
			case 'X': [self setDutyCycle: [self responseAsInt:theResponse]];			 break;
			case 'Y': [self setElapsedTime: [self responseAsInt:theResponse]];			 break;
			case 'm': [self setFailedRateRiseCycles:[self responseAsInt:theResponse]];	 break;
			case 'I': [self setFailedRepurgeCycles: [self responseAsInt:theResponse]];	 break;
			case 'J': [self setFirstStageTemp:		[self responseAsFloat:theResponse]]; break;
			case 'H': 
				//[self setFirstStageControlTemp:		[self responseAsInt:theResponse]%400];	
				[self setFirstStageControlMethodRB:	[self responseAsInt:theResponse]/400];	
			break;
			case 'n': [self setLastRateOfRaise:		[self responseAsInt:theResponse]];			break;
			case '@': [self setModuleVersion:		[self responseAsString:theResponse]];		break;
			case 't': [self setPowerFailureRecoveryStatus: [self responseAsInt:theResponse]];	break;
			case 'A': [self setPumpStatus:			[self responseAsBool:theResponse]];			break;
			case 'E': [self setPurgeStatus:			[self responseAsBool:theResponse]];			break;
			case 'e': 
			{
				switch([[theResponse substringWithRange:NSMakeRange(2,1)] intValue]){
					case '@':	[self setRegenerationError:0]; break;
					case 'B':	[self setRegenerationError:1]; break;
					case 'C':	[self setRegenerationError:2]; break;
					case 'D':	[self setRegenerationError:3]; break;
					case 'E':	[self setRegenerationError:4]; break;
					case 'F':	[self setRegenerationError:5]; break;
					case 'G':	[self setRegenerationError:6]; break;
					case 'H':	[self setRegenerationError:7]; break;
				}
			}
			break;
                
            /*    
			case 'P': 
			{
				switch([[theResponse substringWithRange:NSMakeRange(2,1)]intValue]){
					case '0': [self setPumpRestartDelay:	[self responseAsInt:theResponse]];  break;
					case '1': [self setExtendedPurgeTime:	[self responseAsInt:theResponse]];  break;
					case '2': [self setRepurgeCycles:		[self responseAsInt:theResponse]];  break;
					case '3': [self setRoughToPressure:		[self responseAsInt:theResponse]];  break;
					case '4': [self setRateOfRise:			[self responseAsInt:theResponse]];  break;
					case '5': [self setRateOfRiseCycles:	[self responseAsInt:theResponse]];  break;
					case '6': [self setRestartTemperature:	[self responseAsBool:theResponse]]; break;
					case 'A': [self setRoughingInterlock:	[self responseAsInt:theResponse]];  break;
					case 'C': [self setPumpsPerCompressor:	[self responseAsInt:theResponse]];  break;
					case 'G': [self setRepurgeTime:			[self responseAsInt:theResponse]];  break;
					case 'z': [self setStandbyMode:			[self responseAsBool:theResponse]]; break;
				}
			}
			break;
			*/
                
			case 'O': [self setRegenerationSequence:	[self responseAsInt:theResponse]];			break;
			//case 'j': [self setRegenerationStartDelay:	[self responseAsInt:theResponse]];			break;
			case 'k': [self setRegenerationStepTimer:	[self responseAsInt:theResponse]];			break;
			case 'a': [self setRegenerationTime:		[self responseAsInt:theResponse]];			break;
			case 'D': [self setRoughValveStatus:		[self responseAsBool:theResponse]];			break;
			case 'Q': [self setRoughingInterlockStatus:	[theResponse characterAtIndex:2] - 0x30];	break;
			case 'K': [self setSecondStageTemp:			[self responseAsFloat:theResponse]];		break;
			//case 'I': [self setSecondStageTempControl:	[self responseAsInt:theResponse]];			break;
			case 'S': [self setStatus:					 [theResponse characterAtIndex:2] - 0x30];	break;
			case 'B': [self setThermocoupleStatus:		[self responseAsBool:theResponse]];			break;
			case 'L': [self setThermocouplePressure:	[self responseAsFloat:theResponse]];		break;
		}
	}
    else 	if([theResponse hasPrefix:@"$E"] || [theResponse hasPrefix:@"$F"]){
        [self incrementCmdError];
        [self setWasPowerFailure:[theResponse hasPrefix:@"$F"]];

    }
}

- (unsigned char) checkSum:(NSString*)aCmd
{
	//calculate the mod 256 of the character sum 
	int i;
	unsigned char charSum = 0;
	for(i=0 ; i<[aCmd length] ; i++) {
		charSum+=[aCmd characterAtIndex:i]&0x7f; //add up each character value adding it to the total
	}
	
    charSum = 0x3f & (charSum ^ (charSum>>6));
    charSum = (0x30+charSum) & 0x7f;
	return charSum;
}

@end

@implementation ORCP8CryopumpCmd
@synthesize cmd,waitForResponse;
- (void) dealloc
{
	self.cmd		 = nil;

	[super dealloc];
}
@end
