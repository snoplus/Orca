//--------------------------------------------------------
// ORCP8CryopumpController
// Created by Mark Howe Tuesday, March 20,2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012, University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORCP8CryopumpController.h"
#import "ORCP8CryopumpModel.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"
#import "ORTimeRate.h"
#import "BiStateView.h"
#import "ORSerialPortController.h"
#import "ORSerialPort.h"

@implementation ORCP8CryopumpController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"CP8Cryopump"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[blankView release];
	[super dealloc];
}

- (void) awakeFromNib
{
    [[plotter0 yAxis] setRngLow:-1000. withHigh:1000.];
	[[plotter0 yAxis] setRngLimitsLow:-100000 withHigh:100000 withMinRng:10];
	[plotter0 setUseGradient:YES];

    [[plotter0 xAxis] setRngLow:0.0 withHigh:10000];
	[[plotter0 xAxis] setRngLimitsLow:0.0 withHigh:200000. withMinRng:200];

	ORTimeLinePlot* aPlot;
	aPlot= [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter0 addPlot: aPlot];
    [aPlot setName:@"First Stage"];
	[aPlot setLineColor:[NSColor redColor]];
    [aPlot release];
    
	aPlot= [[ORTimeLinePlot alloc] initWithTag:1 andDataSource:self];
	[plotter0 addPlot: aPlot];
    [aPlot setName:@"Second Stage"];
	[aPlot setLineColor:[NSColor blueColor]];
    [aPlot release];
   
	[plotter0 setShowLegend:YES];

    
	[(ORTimeAxis*)[plotter0 xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
	
	blankView = [[NSView alloc] init];
    basicOpsSize	= NSMakeSize(610,545);
    expertOpsSize	= NSMakeSize(490,660);
    plotSize		= NSMakeSize(610,545);
	
    NSString* key = [NSString stringWithFormat: @"orca.ORCryoPump%lu.selectedtab",[model uniqueIdNumber]];
    int index = [[NSUserDefaults standardUserDefaults] integerForKey: key];
    if((index<0) || (index>[tabView numberOfTabViewItems]))index = 0;
    [tabView selectTabViewItemAtIndex: index];

	NSUInteger style = [[self window] styleMask];
	if(index == 2){
		[[self window] setStyleMask: style | NSResizableWindowMask];
	}
	else {
		[[self window] setStyleMask: style & ~NSResizableWindowMask];
	}
	
	
	[super awakeFromNib];
}

#pragma mark ***Notifications
- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORCP8CryopumpLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORCP8CryopumpPollTimeChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(shipTemperaturesChanged:)
                         name : ORCP8CryopumpShipTemperaturesChanged
						object: model];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];

    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];

    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
    [notifyCenter addObserver : self
                     selector : @selector(dutyCycleChanged:)
                         name : ORCP8CryopumpModelDutyCycleChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(elapsedTimeChanged:)
                         name : ORCP8CryopumpModelElapsedTimeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(failedRateRiseCyclesChanged:)
                         name : ORCP8CryopumpModelFailedRateRiseCyclesChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(failedRepurgeCyclesChanged:)
                         name : ORCP8CryopumpModelFailedRepurgeCyclesChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(firstStageTempChanged:)
                         name : ORCP8CryopumpModelFirstStageTempChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(firstStageControlTempChanged:)
                         name : ORCP8CryopumpModelFirstStageControlTempChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(firstStageControlMethodChanged:)
                         name : ORCP8CryopumpModelFirstStageControlMethodChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(lastRateOfRaiseChanged:)
                         name : ORCP8CryopumpModelLastRateOfRaiseChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(moduleVersionChanged:)
                         name : ORCP8CryopumpModelModuleVersionChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(powerFailureRecoveryChanged:)
                         name : ORCP8CryopumpModelPowerFailureRecoveryChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(powerFailureRecoveryStatusChanged:)
                         name : ORCP8CryopumpModelPowerFailureRecoveryStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(pumpStatusChanged:)
                         name : ORCP8CryopumpModelPumpStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(purgeStatusChanged:)
                         name : ORCP8CryopumpModelPurgeStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(regenerationCyclesChanged:)
                         name : ORCP8CryopumpModelRegenerationCyclesChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(regenerationErrorChanged:)
                         name : ORCP8CryopumpModelRegenerationErrorChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(regenerationSequenceChanged:)
                         name : ORCP8CryopumpModelRegenerationSequenceChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(regenerationStartDelayChanged:)
                         name : ORCP8CryopumpModelRegenerationStartDelayChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(regenerationStepTimerChanged:)
                         name : ORCP8CryopumpModelRegenerationStepTimerChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(regenerationTimeChanged:)
                         name : ORCP8CryopumpModelRegenerationTimeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(roughValveStatusChanged:)
                         name : ORCP8CryopumpModelRoughValveStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(roughValveInterlockChanged:)
                         name : ORCP8CryopumpModelRoughValveInterlockChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(secondStageTempChanged:)
                         name : ORCP8CryopumpModelSecondStageTempChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(statusChanged:)
                         name : ORCP8CryopumpModelStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(thermocoupleStatusChanged:)
                         name : ORCP8CryopumpModelThermocoupleStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(thermocouplePressureChanged:)
                         name : ORCP8CryopumpModelThermocouplePressureChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(thermocouplePressureChanged:)
                         name : ORCP8CryopumpModelThermocouplePressureChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(pumpRestartDelayChanged:)
                         name : ORCP8CryopumpModelPumpRestartDelayChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(extendedPurgeTimeChanged:)
                         name : ORCP8CryopumpModelExtendedPurgeTimeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(repurgeCyclesChanged:)
                         name : ORCP8CryopumpModelRepurgeCyclesChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(roughToPressureChanged:)
                         name : ORCP8CryopumpModelRoughToPressureChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(rateOfRiseChanged:)
                         name : ORCP8CryopumpModelRateOfRiseChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(rateOfRiseCyclesChanged:)
                         name : ORCP8CryopumpModelRateOfRiseCyclesChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(restartTemperatureChanged:)
                         name : ORCP8CryopumpModelRestartTemperatureChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(roughingInterlockStatusChanged:)
                         name : ORCP8CryopumpModelRoughingInterlockStatusChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(pumpsPerCompressorChanged:)
                         name : ORCP8CryopumpModelPumpsPerCompressorChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(repurgeTimeChanged:)
                         name : ORCP8CryopumpModelRepurgeTimeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(standbyModeChanged:)
                         name : ORCP8CryopumpModelStandbyModeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(roughingInterlockChanged:)
                         name : ORCP8CryopumpModelRoughingInterlockChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(secondStageTempControlChanged:)
                         name : ORCP8CryopumpModelSecondStageTempControlChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(cmdErrorChanged:)
                         name : ORCP8CryopumpModelCmdErrorChanged
						object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(wasPowerFailureChanged:)
                         name : ORCP8CryopumpModelWasPowerFailireChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(firstStageControlMethodRBChanged:)
                         name : ORCP8CryopumpModelFirstStageControlMethodRBChanged
						object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORSerialPortModelPortStateChanged
						object: model];

	[notifyCenter addObserver : self
                     selector : @selector(constraintsChanged:)
                         name : ORCP8CryopumpModelConstraintsChanged
						object: model];
	
    
    [notifyCenter addObserver : self
                     selector : @selector(constraintsChanged:)
                         name : ORCP8CryopumpConstraintsDisabledChanged
						object: model];

	[serialPortController registerNotificationObservers];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"CP-8 (Unit %lu)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self wasPowerFailureChanged:nil];
    [self cmdErrorChanged:nil];
    [self lockChanged:nil];
	[self pollTimeChanged:nil];
	[self shipTemperaturesChanged:nil];
	[self updateTimePlot:nil];
    [self miscAttributesChanged:nil];
	[self dutyCycleChanged:nil];
	[self elapsedTimeChanged:nil];
	[self failedRateRiseCyclesChanged:nil];
	[self failedRepurgeCyclesChanged:nil];
	[self firstStageTempChanged:nil];
	[self firstStageControlTempChanged:nil];
	[self firstStageControlMethodChanged:nil];
	[self lastRateOfRaiseChanged:nil];
	[self moduleVersionChanged:nil];
	[self powerFailureRecoveryChanged:nil];
	[self powerFailureRecoveryStatusChanged:nil];
	[self pumpStatusChanged:nil];
	[self purgeStatusChanged:nil];
	[self regenerationCyclesChanged:nil];
	[self regenerationErrorChanged:nil];
	[self regenerationSequenceChanged:nil];
	[self regenerationStartDelayChanged:nil];
	[self regenerationStepTimerChanged:nil];
	[self regenerationTimeChanged:nil];
	[self roughValveStatusChanged:nil];
	[self roughValveInterlockChanged:nil];
	[self secondStageTempChanged:nil];
	[self statusChanged:nil];
	[self thermocoupleStatusChanged:nil];
	[self thermocouplePressureChanged:nil];
	[self thermocouplePressureChanged:nil];
	[self pumpRestartDelayChanged:nil];
	[self extendedPurgeTimeChanged:nil];
	[self repurgeCyclesChanged:nil];
	[self roughToPressureChanged:nil];
	[self rateOfRiseChanged:nil];
	[self rateOfRiseCyclesChanged:nil];
	[self restartTemperatureChanged:nil];
	[self roughingInterlockStatusChanged:nil];
	[self pumpsPerCompressorChanged:nil];
	[self repurgeTimeChanged:nil];
	[self standbyModeChanged:nil];
	[self roughingInterlockChanged:nil];
	[self secondStageTempControlChanged:nil];
	[self firstStageControlMethodRBChanged:nil];
	[self constraintsChanged:nil];
	[serialPortController updateWindow];

}

- (void)tabView:(NSTabView *)aTabView didSelectTabViewItem:(NSTabViewItem *)tabViewItem
{
    [[self window] setContentView:blankView];
	NSUInteger style = [[self window] styleMask];
	switch([tabView indexOfTabViewItem:tabViewItem]){
		case  0: 
			[self resizeWindowToSize:basicOpsSize];   
			[[self window] setStyleMask: style & ~NSResizableWindowMask];
			break;
		case  1: 
			[self resizeWindowToSize:expertOpsSize];     
			[[self window] setStyleMask: style & ~NSResizableWindowMask];
			break;
		default: 
			[self resizeWindowToSize:plotSize];	
			[[self window] setStyleMask: style | NSResizableWindowMask];
			break;
	}
    [[self window] setContentView:totalView];
	
    NSString* key = [NSString stringWithFormat: @"orca.ORCryoPump%lu.selectedtab",[model uniqueIdNumber]];
    int index = [tabView indexOfTabViewItem:tabViewItem];
    [[NSUserDefaults standardUserDefaults] setInteger:index forKey:key];
}

- (void)windowDidResize:(NSNotification *)notification
{
	if([tabView indexOfTabViewItem:[tabView selectedTabViewItem]] == 2){
		plotSize = [[self window] frame].size; 
	}
}

- (void) constraintsChanged:(NSNotification*)aNote
{
    NSImage* lockImage = [[NSImage imageNamed:@"smallLock"] copy];
	if([[model pumpOnConstraints] count] || [[model pumpOffConstraints] count]){
        if([model constraintsDisabled]){
            [self addDisableSymbol:lockImage];
        }
		[powerConstraintButton setImage:lockImage];
        [powerConstraintButton setEnabled:YES];
	}
	else {
        [powerConstraintButton setImage:nil];
        [powerConstraintButton setEnabled:NO];
   }
	
	if([[model purgeOpenConstraints] count]){
        if([model constraintsDisabled]){
            [self addDisableSymbol:lockImage];
        }
		[purgeConstraintButton setImage:lockImage];
        [purgeConstraintButton setEnabled:YES];
	}
	else {
        [purgeConstraintButton setImage:nil];
        [purgeConstraintButton setEnabled:NO];
    }
	
	if([[model roughingOpenConstraints] count]){
        if([model constraintsDisabled]){
            [self addDisableSymbol:lockImage];
        }
		[roughingConstraintButton setImage:lockImage];
        [roughingConstraintButton setEnabled:YES];
	}
	else {
        [roughingConstraintButton setImage:nil];
        [roughingConstraintButton setEnabled:NO];
    }
    [lockImage release];
}

- (void)addDisableSymbol:(NSImage*)lockImage
{
    NSSize lockSize = [lockImage size];
    [lockImage lockFocus];
    [[NSColor redColor] set];
    [NSBezierPath setDefaultLineWidth:2];
    [NSBezierPath strokeLineFromPoint:NSMakePoint(0,0) toPoint:NSMakePoint(lockSize.width,lockSize.height)];
    [NSBezierPath strokeLineFromPoint:NSMakePoint(0,lockSize.height) toPoint:NSMakePoint(lockSize.width,0)];
    [lockImage unlockFocus];
}

- (void) firstStageControlMethodRBChanged:(NSNotification*)aNote
{
	[firstStageControlMethodRBField setStringValue: [model firstStageControlMethodString]];
}

- (void) wasPowerFailureChanged:(NSNotification*)aNote
{
	[wasPowerFailureField setStringValue: [model wasPowerFailure]?@"There was a Power Failure":@"" ];
}

- (void) cmdErrorChanged:(NSNotification*)aNote
{
	[cmdErrorField setIntValue: [model cmdError]];
}

- (void) secondStageTempControlChanged:(NSNotification*)aNote
{
	[secondStageTempControlField setIntValue: [model secondStageTempControl]];
}

- (void) roughingInterlockChanged:(NSNotification*)aNote
{
	[roughingInterlockPU selectItemAtIndex: [model roughingInterlock]];
}

- (void) standbyModeChanged:(NSNotification*)aNote
{
	[standbyModePU selectItemAtIndex: [model standbyMode]];
}

- (void) repurgeTimeChanged:(NSNotification*)aNote
{
	[repurgeTimeField setIntValue: [model repurgeTime]];
}

- (void) pumpsPerCompressorChanged:(NSNotification*)aNote
{
	[pumpsPerCompressorField setIntValue: [model pumpsPerCompressor]];
}

- (void) roughingInterlockStatusChanged:(NSNotification*)aNote
{
	int mask = [model roughingInterlockStatus];
	[roughingInterlockStatusField setStringValue:  (mask & 0x1) ? @"Has Permission"         : @"Not Using/No Permission"];
	[roughingInterlockStatusField1 setStringValue: (mask & 0x2) ? @"Needs Roughing Manifold": @""];	
	[roughingInterlockStatusField2 setStringValue: (mask & 0x4) ? @"Cryopump running"       : @""];
}

- (void) restartTemperatureChanged:(NSNotification*)aNote
{
	[restartTemperatureField setIntValue: [model restartTemperature]];
}

- (void) rateOfRiseCyclesChanged:(NSNotification*)aNote
{
	[rateOfRiseCyclesField setIntValue: [model rateOfRiseCycles]];
}

- (void) rateOfRiseChanged:(NSNotification*)aNote
{
	[rateOfRiseField setIntValue: [model rateOfRise]];
}

- (void) roughToPressureChanged:(NSNotification*)aNote
{
	[roughToPressureField setIntValue: [model roughToPressure]];
}

- (void) repurgeCyclesChanged:(NSNotification*)aNote
{
	[repurgeCyclesField setIntValue: [model repurgeCycles]];
}

- (void) extendedPurgeTimeChanged:(NSNotification*)aNote
{
	[extendedPurgeTimeField setIntValue: [model extendedPurgeTime]];
}

- (void) pumpRestartDelayChanged:(NSNotification*)aNote
{
	[pumpRestartDelayField setIntValue: [model pumpRestartDelay]];
}

- (void) thermocouplePressureChanged:(NSNotification*)aNote
{
	[thermocouplePressureField setFloatValue: [model thermocouplePressure]];
}

- (void) thermocoupleStatusChanged:(NSNotification*)aNote
{
	[thermocoupleStatusField setStringValue: [model thermocoupleStatus]?@"ON":@"OFF"];
	[self updateButtons];
}

- (void) statusChanged:(NSNotification*)aNote
{
	int mask = [model status];
	[pumpOnBiStateView				 setState: mask & (0x1<<0)];
	[roughOpenBiStateView			 setState: (mask & (0x1<<1))>0];
	[purgeOpenBiStateView			 setState: (mask & (0x1<<2))>0];
	[thermocoupleOnBiStateView		 setState: (mask & (0x1<<3))>0];
	[powerFailureOccurredBiStateView setState: (mask & (0x1<<4))>0];
}

- (void) secondStageTempChanged:(NSNotification*)aNote
{
	[secondStageTempField setFloatValue: [model secondStageTemp]];
}

- (void) roughValveInterlockChanged:(NSNotification*)aNote
{
	[roughValveInterlockField setIntValue: [model roughValveInterlock]];
}

- (void) roughValveStatusChanged:(NSNotification*)aNote
{
	[roughValveStatusField setStringValue: [model roughValveStatus]?@"OPEN":@"CLOSED"];
	[self updateButtons];
}

- (void) regenerationTimeChanged:(NSNotification*)aNote
{
	[regenerationTimeField setIntValue: [model regenerationTime]];
}

- (void) regenerationStepTimerChanged:(NSNotification*)aNote
{
	[regenerationStepTimerField setIntValue: [model regenerationStepTimer]];
}

- (void) regenerationStartDelayChanged:(NSNotification*)aNote
{
	[regenerationStartDelayField setIntValue: [model regenerationStartDelay]];
}

- (void) regenerationSequenceChanged:(NSNotification*)aNote
{
	NSString* s = @"--";
	switch([model regenerationSequence]){
		case 'Z': s = @"Start Delay";						break;
		case 'A': s = @"20s cancelation delay";				break;
		case 'B': 
		case 'C': 
		case 'D': 
		case 'E': 
			s = [NSString stringWithFormat:@"Cryopump Warm up: %c",	(char)[model regenerationSequence]];		
		break;
		case 'H': s = @"Extended Purge/Repurge Cycle";		break;
		case 'J': s = @"Waiting on Roughing Clearance";		break;
		case 'L': s = @"Rate of Rise";						break;
		case 'M': s = @"Cool Down";							break;
		case 'P': s = @"Regen Completed";					break;
		case 'T': s = @"Roughging";							break;
		case 'W': s = @"Restart Delay";						break;
		case 'V': s = @"Regen Aborted";						break;
		case 'z': s = @"Pump Ready in Standby Mode";		break;
		case 's': s = @"Cryopump Stopped After Warmup";		break;
	}
	[regenerationSequenceField setStringValue: s];
	[self updateButtons];
}

- (void) regenerationErrorChanged:(NSNotification*)aNote
{
	NSString* s = @"--";
	switch([model regenerationError]){
		case '@': s = @"No Error";					break;
		case 'B': s = @"Warm up Timeout";			break;
		case 'C': s = @"Cool Down Timeout";			break;
		case 'D': s = @"Roughing Error";			break;
		case 'E': s = @"Rate of Rise Limit";		break;
		case 'F': s = @"Manual Abort";				break;
		case 'G': s = @"Rough Valve Timeout";		break;
		case 'H': s = @"Illegal State";				break;
	}
	[regenerationErrorField setStringValue: s];
}

- (void) regenerationCyclesChanged:(NSNotification*)aNote
{
	[regenerationCyclesField setIntValue: [model regenerationCycles]];
}

- (void) purgeStatusChanged:(NSNotification*)aNote
{
	[purgeStatusField setStringValue: [model purgeStatus]?@"OPEN":@"CLOSED"];
	[self updateButtons];
}

- (void) pumpStatusChanged:(NSNotification*)aNote
{
	[pumpStatusField setStringValue: [model pumpStatus]?@"ON":@"OFF"];
	[self updateButtons];
}

- (void) powerFailureRecoveryStatusChanged:(NSNotification*)aNote
{
	NSString* s = @"Status: --";
	switch([model powerFailureRecoveryStatus]){
		case 0: s = @"Status: No pwr fail recovery in progress"; break;
		case 1: s = @"Status: Cool down in progress";			 break;
		case 2: s = @"Status: Regeneration in progress";		 break;
		case 3: s = @"Status: Attempting to cool to 17K";		 break;
		case 4: s = @"Status: Recoverd pump to < 17K";			 break;
		case 5: s = @"Status: 2nd stage not recovering";		 break;
	}
	[powerFailureRecoveryStatusField setStringValue: s];
}

- (void) powerFailureRecoveryChanged:(NSNotification*)aNote
{
	[powerFailureRecoveryPU selectItemAtIndex: [model powerFailureRecovery]];
}

- (void) moduleVersionChanged:(NSNotification*)aNote
{
	[moduleVersionField setStringValue: [model moduleVersion]];
}

- (void) lastRateOfRaiseChanged:(NSNotification*)aNote
{
	[lastRateOfRaiseField setIntValue: [model lastRateOfRaise]];
}

- (void) firstStageControlMethodChanged:(NSNotification*)aNote
{
	[firstStageControlMethodPU selectItemAtIndex: [model firstStageControlMethod]];
}

- (void) firstStageControlTempChanged:(NSNotification*)aNote
{
	[firstStageControlTempField setIntValue: [model firstStageControlTemp]];
}

- (void) firstStageTempChanged:(NSNotification*)aNote
{
	[firstStageTempField setFloatValue: [model firstStageTemp]];
	unsigned long t = [model timeMeasured];
	NSDate* theDate;
	if(t){
		theDate = [NSDate dateWithTimeIntervalSince1970:t];
		[timeField setObjectValue:[theDate description]];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) failedRepurgeCyclesChanged:(NSNotification*)aNote
{
	[failedRepurgeCyclesField setIntValue: [model failedRepurgeCycles]];
}

- (void) failedRateRiseCyclesChanged:(NSNotification*)aNote
{
	[failedRateRiseCyclesField setIntValue: [model failedRateRiseCycles]];
}

- (void) elapsedTimeChanged:(NSNotification*)aNote
{
	[elapsedTimeField setIntValue: [model elapsedTime]];
}

- (void) dutyCycleChanged:(NSNotification*)aNote
{
	[dutyCycleField setIntValue: [model dutyCycle]];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter0 xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 xAxis]attributes] forKey:@"XAttributes0"];
	}
	
	if(aNotification == nil || [aNotification object] == [plotter0 yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 yAxis]attributes] forKey:@"YAttributes0"];
	}
}

- (void) miscAttributesChanged:(NSNotification*)aNote
{

	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 xAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 yAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 yAxis] setNeedsDisplay:YES];
		}
	}
}

- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate:0])){
		[plotter0 setNeedsDisplay:YES];
	}
}

- (void) shipTemperaturesChanged:(NSNotification*)aNote
{
	[shipTemperaturesButton setIntValue: [model shipTemperatures]];
}


- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORCP8CryopumpLock to:secure];
    [lockButton setEnabled:secure];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORCP8CryopumpLock];;
}

- (void) lockChanged:(NSNotification*)aNotification
{

    BOOL locked = [gSecurity isLocked:ORCP8CryopumpLock];

    [lockButton setState: locked];
	[self updateButtons];
}

- (void) updateButtons
{
    BOOL locked     = [gSecurity isLocked:ORCP8CryopumpLock];
	BOOL portOpen   = [[model serialPort] isOpen];
    BOOL notLockedAndPortOpen = !locked && portOpen;
    
	[serialPortController updateButtons:locked];

    [pollTimePopup					setEnabled:!locked];
    [shipTemperaturesButton			setEnabled:!locked];
 
	[secondStageTempControlField	setEnabled:notLockedAndPortOpen];
	[roughingInterlockPU			setEnabled:notLockedAndPortOpen];
	[standbyModePU					setEnabled:notLockedAndPortOpen];
	[repurgeTimeField				setEnabled:notLockedAndPortOpen];
	[pumpsPerCompressorField		setEnabled:notLockedAndPortOpen];
	[restartTemperatureField		setEnabled:notLockedAndPortOpen];
	[rateOfRiseCyclesField			setEnabled:notLockedAndPortOpen];
	[rateOfRiseField				setEnabled:notLockedAndPortOpen];
	[roughToPressureField			setEnabled:notLockedAndPortOpen];
	[repurgeCyclesField				setEnabled:notLockedAndPortOpen];
	[extendedPurgeTimeField			setEnabled:notLockedAndPortOpen];
	[pumpRestartDelayField			setEnabled:notLockedAndPortOpen];
	[regenerationTimeField			setEnabled:notLockedAndPortOpen];
	[regenerationStepTimerField		setEnabled:notLockedAndPortOpen];
	[regenerationStartDelayField	setEnabled:notLockedAndPortOpen];
	[powerFailureRecoveryPU			setEnabled:notLockedAndPortOpen];
	[firstStageControlMethodPU		setEnabled:notLockedAndPortOpen];
	[firstStageControlTempField		setEnabled:notLockedAndPortOpen];
    [initHardwareButton				setEnabled:notLockedAndPortOpen];
	[regenAbortButton				setEnabled:notLockedAndPortOpen];
	[regenStartFullButton			setEnabled:notLockedAndPortOpen];
	[regenStartFastButton			setEnabled:notLockedAndPortOpen];
	[regenActivateNormalPumpingButton setEnabled:notLockedAndPortOpen];
	[regenWarmAndStopButton			setEnabled:notLockedAndPortOpen];
	[initHardwareButton				setEnabled:notLockedAndPortOpen];
	
	int mask = [model roughingInterlockStatus];
	
	[roughValveInterlockButton		setEnabled:!locked && (mask & 0x2)];

	[pumpOnButton					setEnabled:notLockedAndPortOpen && [model pumpStatus]==NO];
	[pumpOffButton					setEnabled:notLockedAndPortOpen && [model pumpStatus]==YES];
	[purgeOnButton					setEnabled:notLockedAndPortOpen && [model purgeStatus]==NO];
	[purgeOffButton					setEnabled:notLockedAndPortOpen && [model purgeStatus]==YES];
	[roughingValveOpenButton		setEnabled:notLockedAndPortOpen && [model roughValveStatus]==NO];
	[roughingValveClosedButton		setEnabled:notLockedAndPortOpen && [model roughValveStatus]==YES];
	[thermocoupleOnButton			setEnabled:notLockedAndPortOpen && [model thermocoupleStatus]==NO];
	[thermocoupleOffButton			setEnabled:notLockedAndPortOpen && [model thermocoupleStatus]==YES];
	
}


- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}


#pragma mark ***Actions
- (IBAction) roughingInterlockAction:(id)sender		  { [model setRoughingInterlock:		[sender indexOfSelectedItem]]; }
- (IBAction) standbyModeAction:(id)sender			  { [model setStandbyMode:				[sender indexOfSelectedItem]]; }
- (IBAction) secondStageTempControlAction:(id)sender  { [model setSecondStageTempControl:	[sender intValue]]; }
- (IBAction) repurgeTimeAction:(id)sender			  { [model setRepurgeTime:				[sender intValue]]; }
- (IBAction) pumpsPerCompressorAction:(id)sender	  { [model setPumpsPerCompressor:		[sender intValue]]; }
- (IBAction) restartTemperatureAction:(id)sender	  { [model setRestartTemperature:		[sender intValue]]; }
- (IBAction) rateOfRiseCyclesAction:(id)sender		  { [model setRateOfRiseCycles:			[sender intValue]]; }
- (IBAction) rateOfRiseAction:(id)sender			  { [model setRateOfRise:				[sender intValue]]; }
- (IBAction) roughToPressureAction:(id)sender		  { [model setRoughToPressure:			[sender intValue]]; }
- (IBAction) repurgeCyclesAction:(id)sender			  { [model setRepurgeCycles:			[sender intValue]]; }
- (IBAction) extendedPurgeTimeAction:(id)sender		  { [model setExtendedPurgeTime:		[sender intValue]]; }
- (IBAction) pumpRestartDelayAction:(id)sender		  { [model setPumpRestartDelay:			[sender intValue]]; }
- (IBAction) thermocoupleStatusAction:(id)sender	  { [model setThermocoupleStatus:		[sender intValue]]; }
- (IBAction) statusAction:(id)sender				  { [model setStatus:					[sender intValue]]; }
- (IBAction) roughValveInterlockAction:(id)sender	  { [model setRoughValveInterlock:		[sender intValue]]; }
- (IBAction) roughValveStatusAction:(id)sender		  { [model setRoughValveStatus:			[sender intValue]]; }
- (IBAction) regenerationStartDelayAction:(id)sender  { [model setRegenerationStartDelay:	[sender intValue]]; }
- (IBAction) powerFailureRecoveryAction:(id)sender	  { [model setPowerFailureRecovery:		[sender indexOfSelectedItem]]; }
- (IBAction) firstStageControlMethodAction:(id)sender { [model setFirstStageControlMethod:	[sender indexOfSelectedItem]]; }
- (IBAction) firstStageControlTempAction:(id)sender   { [model setFirstStageControlTemp:	[sender intValue]]; }
- (IBAction) shipTemperaturesAction:(id)sender		  { [model setShipTemperatures:			[sender intValue]]; }

- (IBAction) lockAction:(id) sender					  { [gSecurity tryToSetLock:ORCP8CryopumpLock to:[sender intValue] forWindow:[self window]];}
- (IBAction) readTemperaturesAction:(id)sender		  { [model pollHardware];}
- (IBAction) pollTimeAction:(id)sender				  { [model setPollTime:[[sender selectedItem] tag]];}
- (IBAction) pollNowAction:(id)sender				  { [model pollHardware]; }

- (IBAction) initHardwareAction:(id)sender			  
{ 
	[self endEditing];
	[model initHardware];
}

- (IBAction) turnCryoPumpOnAction:(id)sender
{
	[self endEditing];
	if([[model pumpOnConstraints] count] && ![model constraintsDisabled]){
		[self beginConstraintPanel:[model pumpOnConstraints]  actionTitle:@"Turn Cryo ON"];
	}
	else {
        NSString* s = @"Turn ON Cryo Pump?";
        if([[model pumpOnConstraints] count] && [model constraintsDisabled]){
            s = [s stringByAppendingString:@" WARNING--Constraints in place but are diabled."];
        }

#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
        NSAlert *alert = [[[NSAlert alloc] init] autorelease];
        [alert setMessageText:@"YES/Turn ON Cryopump"];
        [alert setInformativeText:@"Really turn ON the cryopump?"];
        [alert addButtonWithTitle:@"YES/Turn ON Cryopump"];
        [alert addButtonWithTitle:@"Cancel"];
        [alert setAlertStyle:NSWarningAlertStyle];
        
        [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
            if (result == NSAlertFirstButtonReturn){
                [model writeCryoPumpOn:YES];
            }
        }];
#else
        NSBeginAlertSheet(s,
						  @"YES/Turn ON Cryopump",
						  @"Cancel",
						  nil,[self window],
						  self,
						  @selector(turnOnCryoPumpDidFinish:returnCode:contextInfo:),
						  nil,
						  nil,
						  @"Really turn ON the cryopump?");
#endif
	}
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) turnOnCryoPumpDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writeCryoPumpOn:YES];
}
#endif

- (IBAction) closeConstraintPanel:(id)sender
{
    [constraintPanel orderOut:nil];
    [NSApp endSheet:constraintPanel];
}

- (IBAction) turnCryoPumpOffAction:(id)sender
{
    [self endEditing];
	if([[model pumpOffConstraints] count] && ![model constraintsDisabled]){
		[self beginConstraintPanel:[model pumpOffConstraints]  actionTitle:@"Turn Cryo OFF"];
	}
	else { 
        NSString* s = @"Turn OFF Cryo Pump?";
        if([[model pumpOffConstraints] count] && [model constraintsDisabled]){
            s = [s stringByAppendingString:@" WARNING--Constraints in place but are diabled."];
        }
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
        NSAlert *alert = [[[NSAlert alloc] init] autorelease];
        [alert setMessageText:s];
        [alert setInformativeText:@"Really turn OFF the cryopump?"];
        [alert addButtonWithTitle:@"YES/Turn OFF Cryopump"];
        [alert addButtonWithTitle:@"Cancel"];
        [alert setAlertStyle:NSWarningAlertStyle];
        
        [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
            if (result == NSAlertFirstButtonReturn){
                [model writeCryoPumpOn:NO];
             }
        }];
#else
        NSBeginAlertSheet(s,
					  @"YES/Turn OFF Cryopump",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(turnOffCryoPumpDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"Really turn OFF the cryopump?");
#endif
	}
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) turnOffCryoPumpDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writeCryoPumpOn:NO];
}
#endif
- (IBAction) openPurgeValveAction:(id)sender
{
	[self endEditing];
	if([[model purgeOpenConstraints] count] && ![model constraintsDisabled]){
		[self beginConstraintPanel:[model purgeOpenConstraints]  actionTitle:@"Open Purge Valve"];
	}
	else {
        NSString* s = @"Open Purge Valve";
        if([[model purgeOpenConstraints] count] && [model constraintsDisabled]){
            s = [s stringByAppendingString:@" WARNING--Constraints in place but are diabled."];
        }
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
        NSAlert *alert = [[[NSAlert alloc] init] autorelease];
        [alert setMessageText:s];
        [alert setInformativeText:@"Really OPEN the purge valve?"];
        [alert addButtonWithTitle:@"YES/OPEN Purge Valve"];
        [alert addButtonWithTitle:@"Cancel"];
        [alert setAlertStyle:NSWarningAlertStyle];
        
        [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
            if (result == NSAlertFirstButtonReturn){
                [model writePurgeValveOpen:YES];
             }
        }];
#else
        NSBeginAlertSheet(s,
						  @"YES/OPEN Purge Valve",
						  @"Cancel",
						  nil,[self window],
						  self,
						  @selector(openPurgeValveDidFinish:returnCode:contextInfo:),
						  nil,
						  nil,
						  @"Really OPEN the purge valve?");
#endif
	}
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) openPurgeValveDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writePurgeValveOpen:YES];
}
#endif
- (void) beginConstraintPanel:(NSDictionary*)constraints actionTitle:(NSString*)aTitle
{
	NSArray* allKeys = [constraints allKeys];
	int n = [allKeys count];
	[constraintTitleField setStringValue:[NSString stringWithFormat:@"Action: <%@> can not be done because there %d constraint%@ in effect. See below for more info.",
										  aTitle,
										  n,
										  n==1?@"":@"s"]];
	NSMutableString* s = [NSMutableString string];
	for(id aKey in allKeys){
		[s appendFormat:@"%@ --> %@\n\n",aKey,[constraints objectForKey:aKey]];
	}
	[constraintView setString:s];
	[NSApp beginSheet:constraintPanel modalForWindow:[self window]
		modalDelegate:self didEndSelector:NULL contextInfo:nil];
}


- (IBAction) closePurgeValveAction:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Close Purge Valve"];
    [alert setInformativeText:@"Really CLOSE the purge valve?"];
    [alert addButtonWithTitle:@"YES/CLOSE Purge Valve"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSWarningAlertStyle];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model writePurgeValveOpen:NO];
        }
    }];
#else
    NSBeginAlertSheet(@"Close Purge Valve",
					  @"YES/CLOSE Purge Valve",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(closePurgeValveDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"Really CLOSE the purge valve?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) closePurgeValveDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writePurgeValveOpen:NO];
}
#endif
- (IBAction) openRoughingValveAction:(id)sender
{
	[self endEditing];
	if([[model roughingOpenConstraints] count] && ![model constraintsDisabled]){
		[self beginConstraintPanel:[model roughingOpenConstraints]  actionTitle:@"Open Roughing Valve"];
	}
	else {
        NSString* s = @"Open Roughing Valve?";
        if([[model roughingOpenConstraints] count] && [model constraintsDisabled]){
            s = [s stringByAppendingString:@" WARNING--Constraints in place but are diabled."];
        }
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
        NSAlert *alert = [[[NSAlert alloc] init] autorelease];
        [alert setMessageText:s];
        [alert setInformativeText:@"Really OPEN the Roughing valve?"];
        [alert addButtonWithTitle:@"YES/OPEN Roughing Valve"];
        [alert addButtonWithTitle:@"Cancel"];
        [alert setAlertStyle:NSWarningAlertStyle];
        
        [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
            if (result == NSAlertFirstButtonReturn){
                [model writeRoughValveOpen:YES];
            }
        }];
#else
        NSBeginAlertSheet(s,
					  @"YES/OPEN Roughing Valve",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(openRoughingValveDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"Really OPEN the Roughing valve?");
#endif
	}
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) openRoughingValveDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writeRoughValveOpen:YES];
}
#endif

- (IBAction) closeRoughingValveAction:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Close Roughing Valve"];
    [alert setInformativeText:@"Really CLOSE the Roughing valve?"];
    [alert addButtonWithTitle:@"YES/CLOSE Roughing Valve"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSWarningAlertStyle];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model writeRoughValveOpen:NO];
        }
    }];
#else
    NSBeginAlertSheet(@"Close Roughing Valve",
					  @"YES/CLOSE Roughing Valve",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(closeRoughingValveDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"Really CLOSE the Roughing valve?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) closeRoughingValveDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writeRoughValveOpen:NO];
}
#endif
- (IBAction) turnThermocoupleOnAction:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Turn ON Cryo Pump"];
    [alert setInformativeText:@"Really turn ON the Thermocouple?"];
    [alert addButtonWithTitle:@"YES/Turn ON Thermocouple"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSWarningAlertStyle];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model writeThermocoupleOn:YES];
        }
    }];
#else
    NSBeginAlertSheet(@"Turn ON Cryo Pump",
					  @"YES/Turn ON Thermocouple",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(turnOnThermocoupleDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"Really turn ON the Thermocouple?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) turnOnThermocoupleDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writeThermocoupleOn:YES];
}
#endif
- (IBAction) turnThermocoupleOffAction:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Turn OFF Cryo Pump"];
    [alert setInformativeText:@"Really turn OFF the Thermocouple?"];
    [alert addButtonWithTitle:@"Yes/Turn OFF Thermocouple"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSWarningAlertStyle];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model writeThermocoupleOn:NO];
        }
    }];
#else
    NSBeginAlertSheet(@"Turn OFF Cryo Pump",
					  @"YES/Turn OFF Thermocouple",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(turnOnThermocoupleDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"Really turn OFF the Thermocouple?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) turnOffThermocoupleDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
	if(returnCode == NSAlertDefaultReturn)[model writeThermocoupleOn:NO];
}
#endif

- (IBAction) listPumpOnOffConstraintsAction:(id)sender
{
	if([[model pumpOnConstraints]count] || [[model pumpOffConstraints]count]){
        ORRunAlertPanel(@"The following constraints are in place", @"%@", @"OK", nil, nil,
                        [model pumpOnOffConstraintReport]);
        
    }
}

- (IBAction) listPurgeOpenConstraintsAction:(id)sender
{
	if([[model pumpOnConstraints]count]){
        ORRunAlertPanel(@"The following constraints are in place", @"%@", @"OK", nil, nil,
                        [model purgeOpenConstraintReport]);
        
    }
}

- (IBAction) listRoughingOpenConstraintsAction:(id)sender
{
	if([[model pumpOnConstraints]count]){
        ORRunAlertPanel(@"The following constraints are in place", @"%@", @"OK", nil, nil,
                        [model roughingOpenConstraintReport]);
        
    }
}


#pragma mark ***Data Source
- (int) numberPointsInPlot:(id)aPlotter
{
	int set = [aPlotter tag];
	return [[model timeRate:set] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int set = [aPlotter tag];
	int count = [[model timeRate:set] count];
	int index = count-i-1;
	*xValue = [[model timeRate:set]timeSampledAtIndex:index];
	*yValue = [[model timeRate:set] valueAtIndex:index];
}
@end

