//--------------------------------------------------------
// ORNMon5085Controller
// Created by Mark  A. Howe on Fri Oct 4, 2014
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2013 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of
//North Carolina  sponsored in part by the United States
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020.
//The University has certain rights in the program pursuant to
//the contract and the program should not be copied or distributed
//outside your organization.  The DOE and the University of
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty,
//express or implied, or assume any liability or responsibility
//for the us of this software.
//-------------------------------------------------------------

#pragma mark •••Imported Files

#import "ORNMon5085Controller.h"
#import "ORNMon5085Model.h"
#import "ORSerialPort.h"
#import "ORSerialPortController.h"
#import "ORTimeRate.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"

@implementation ORNMon5085Controller

#pragma mark •••Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"NMon5085"];
	return self;
}

- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{	
 	[super awakeFromNib];
    [[plotter yAxis] setInteger:NO];
    [[plotter yAxis] setRngLow:0.0 withHigh:2];
	[[plotter yAxis] setRngLimitsLow:0.0 withHigh:10 withMinRng:.0001];
    [[plotter xAxis] setRngLow:0.0 withHigh:3000.];
	[[plotter xAxis] setRngLimitsLow:0.0 withHigh:3000. withMinRng:10];
	[plotter setUseGradient:YES];
    
    ORTimeLinePlot* aPlot = [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter addPlot: aPlot];
	[aPlot setLineColor:[NSColor redColor]];
	[aPlot release];
    
    
	[(ORTimeAxis*)[plotter xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];

}

#pragma mark •••Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
	
    [notifyCenter addObserver : self
                     selector : @selector(modeChanged:)
                         name : ORNMon5085ModelModeChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORNMon5085Lock
                        object: nil];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];
	
    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];

    [notifyCenter addObserver : self
                     selector : @selector(modeTimeChanged:)
                         name : ORNMon5085ModelModeTimeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(radValueChanged:)
                         name : ORNMon5085ModelRadValueChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(unitsChanged:)
                         name : ORNMon5085ModelUnitsChanged
						object: model];
    
    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(isRunningChanged:)
                         name : ORNMon5085ModelIsRunningChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(timeUtilStopChanged:)
                         name : ORNMon5085ModelTimeUtilStopChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(calibrationValueChanged:)
                         name : ORNMon5085ModelCalibrationValueChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(discriminatorChanged:)
                         name : ORNMon5085ModelDiscriminatorChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(actualModeChanged:)
                         name : ORNMon5085ModelActualModeChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(deadtimeChanged:)
                         name : ORNMon5085ModelDeadtimeChanged
						object: model];

    [serialPortController registerNotificationObservers];

    [notifyCenter addObserver : self
                     selector : @selector(highVoltageChanged:)
                         name : ORNMon5085ModelHighVoltageChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(dateOfMaxRadValueChanged:)
                         name : ORNMon5085ModelDateOfMaxRadValueChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(maxRadValueChanged:)
                         name : ORNMon5085ModelMaxRadValueChanged
						object: model];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"NMon5085 (%u)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self modeChanged:nil];
    [self lockChanged:nil];
	[self updateTimePlot:nil];

    [self miscAttributesChanged:nil];
	[serialPortController updateWindow];

	[self modeTimeChanged:nil];
	[self radValueChanged:nil];
	[self unitsChanged:nil];
	[self isRunningChanged:nil];
	[self timeUtilStopChanged:nil];
	[self calibrationValueChanged:nil];
	[self discriminatorChanged:nil];
	[self actualModeChanged:nil];
	[self deadtimeChanged:nil];
	[self highVoltageChanged:nil];
	[self dateOfMaxRadValueChanged:nil];
	[self maxRadValueChanged:nil];
}

- (void) maxRadValueChanged:(NSNotification*)aNote
{
	[maxRadValueField setFloatValue: [model maxRadValue]];
}

- (void) dateOfMaxRadValueChanged:(NSNotification*)aNote
{
	[dateOfMaxRadValueField setObjectValue: [model dateOfMaxRadValue]];
}

- (void) highVoltageChanged:(NSNotification*)aNote
{
	[highVoltageField setStringValue: [NSString stringWithFormat:@"%dA",[model highVoltage]]];
}

- (void) deadtimeChanged:(NSNotification*)aNote
{
	[deadtimeField setIntValue: [model deadtime]];
}

- (void) actualModeChanged:(NSNotification*)aNote
{
	[actualModeField setStringValue: [model actualMode]];
}

- (void) discriminatorChanged:(NSNotification*)aNote
{
	[discriminatorField setIntValue: [model discriminator]];
}

- (void) calibrationValueChanged:(NSNotification*)aNote
{
	[calibrationValueField setStringValue: [NSString stringWithFormat:@"%5.2E",[model calibrationValue]]];
}

- (void) timeUtilStopChanged:(NSNotification*)aNote
{
    if(([model mode] == kNMon5085Integrate) || 
       ([model mode] == kNMon5085Scaler)){
        int t = [model timeUtilStop];
        int h = t / 3600;
        t = t % 3600;
        int m = t / 60;
        t = t % 60;
        int s = t;
        
        [timeUtilStopField setStringValue:[NSString stringWithFormat:@"%02d:%02d:%02d",h,m,s]];
    }
    else  [timeUtilStopField setStringValue:@"N/A"];
}

- (void) isRunningChanged:(NSNotification*)aNote
{
	[isRunningField setStringValue: [model isRunning]?@"Running":@"NOT Running"];
    [self timeUtilStopChanged:nil];
    [self updateButtons];
}

- (void) isLogChanged:(NSNotification*)aNote
{
	[isLogCB setIntValue: [model isLog]];
	[[plotter yAxis] setLog:[model isLog]];
	[plotter setNeedsDisplay:YES];
}

- (void) unitsChanged:(NSNotification*)aNote
{
	[unitsField setStringValue: [model units]];
	[units1Field setStringValue: [model units]];
	[plotter setYLabel:[model units]];
}

- (void) radValueChanged:(NSNotification*)aNote
{
	[radValueField setFloatValue: [model radValue]];
    [timeMeasuredField setObjectValue:[model dateMeasured]];
}

- (void) modeTimeChanged:(NSNotification*)aNote
{
    int t = [model modeTime];
    int h = t / 3600;
    t = t % 3600;
    int m = t / 60;
    t = t % 60;
    int s = t;
    
	[modeTimeField setIntValue: [model modeTime]];
    [hhmmssField setStringValue:[NSString stringWithFormat:@"%02d:%02d:%02d",h,m,s]];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter xAxis]attributes] forKey:@"XAttributes0"];
	}
	
	if(aNotification == nil || [aNotification object] == [plotter yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter yAxis]attributes] forKey:@"YAttributes0"];
	}
}

- (void) miscAttributesChanged:(NSNotification*)aNote
{
	
	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter xAxis] setAttributes:attrib];
			[plotter setNeedsDisplay:YES];
			[[plotter xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter yAxis] setAttributes:attrib];
			[plotter setNeedsDisplay:YES];
			[[plotter yAxis] setNeedsDisplay:YES];
			[plotLogCB setState:[[plotter yAxis] isLog]];
		}
	}
}

- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate])){
		[plotter setNeedsDisplay:YES];
	}
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORNMon5085Lock to:secure];
    [lockButton setEnabled:secure];
}

- (void) modeChanged:(NSNotification*)aNotification
{
    [modePU selectItemAtIndex:[model opMode]];
	[self updateButtons];
}

- (void) lockChanged:(NSNotification*)aNotification
{
	[self updateButtons];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORNMon5085Lock];;
}

- (void) updateButtons
{
    BOOL locked = [gSecurity isLocked:ORNMon5085Lock];
	//BOOL portOpen = [[model serialPort] isOpen];
    [lockButton setState: locked];
	[serialPortController updateButtons:locked];
    [modeTimeField setEnabled:!locked && (([model mode]==kNMon5085Integrate) || ([model mode]==kNMon5085Scaler))];
    [modePU setEnabled:![model isRunning]];
    [runButton setTitle:[model isRunning]?@"Stop":@"Load HW/Start"];
 }

#pragma mark •••Actions
- (void) modeTimeAction:(id)sender
{
	[model setModeTime:[sender intValue]];
}

- (IBAction) lockAction:(id) sender						
{ 
	[gSecurity tryToSetLock:ORNMon5085Lock to:[sender intValue] forWindow:[self window]]; 
}

- (IBAction) modeAction:(id) sender
{
    [model setMode:[sender indexOfSelectedItem]];
}

- (IBAction) toggleRun:(id) sender
{
    [self endEditing];
    [model toggleRun];
}

- (IBAction) isLogAction:(id)sender
{
	[model setIsLog:[sender intValue]];
}


#pragma mark •••Data Source

- (int) numberPointsInPlot:(id)aPlotter
{
	return (int)[[model timeRate] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	NSUInteger count = [[model timeRate] count];
	NSUInteger index = (count-i-1);
	*yValue = [[model timeRate] valueAtIndex:index];
	*xValue = [[model timeRate] timeSampledAtIndex:index];
}

@end

