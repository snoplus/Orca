//--------------------------------------------------------
// ORTM700Controller
// Created by Mark  A. Howe on Mon 5/14/2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------
#pragma mark •••Imported Files

#import "ORTM700Controller.h"
#import "ORTM700Model.h"
#import "ORSerialPort.h"
#import "OHexFormatter.h"
#import "StopLightView.h"
#import "ORSerialPortController.h"

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
@interface ORTM700Controller (private)
- (void) _turnOffSheetDidEnd:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo;
@end
#endif

@implementation ORTM700Controller

#pragma mark •••Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"TM700"];
	return self;
}

- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{	
 	[super awakeFromNib];	
}

#pragma mark •••Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
	
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORTM700ModelPollTimeChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORTM700Lock
                        object: nil];

     [notifyCenter addObserver : self
                     selector : @selector(deviceAddressChanged:)
                         name : ORTM700ModelDeviceAddressChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(turboAcceleratingChanged:)
                         name : ORTM700TurboAcceleratingChanged
						object: model];
	
	[notifyCenter addObserver : self
                     selector : @selector(speedAttainedChanged:)
                         name : ORTM700TurboSpeedAttainedChanged
						object: model];
	
	[notifyCenter addObserver : self
                     selector : @selector(turboOverTempChanged:)
                         name : ORTM700TurboOverTempChanged
						object: model];
			
    [notifyCenter addObserver : self
                     selector : @selector(setRotorSpeedChanged:)
                         name : ORTM700ModelSetRotorSpeedChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(actualRotorSpeedChanged:)
                         name : ORTM700ModelActualRotorSpeedChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(motorCurrentChanged:)
                         name : ORTM700ModelMotorCurrentChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(motorCurrentChanged:)
                         name : ORTM700ModelMotorCurrentChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(motorPowerChanged:)
                         name : ORTM700ModelMotorPowerChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(stationPowerChanged:)
                         name : ORTM700ModelStationPowerChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(tmpRotSetChanged:)
                         name : ORTM700ModelTmpRotSetChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(runUpTimeCtrlChanged:)
                         name : ORTM700ModelRunUpTimeCtrlChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(runUpTimeChanged:)
                         name : ORTM700ModelRunUpTimeChanged
						object: model];
	
	    
    [notifyCenter addObserver : self
                     selector : @selector(errorCodeChanged:)
                         name : ORTM700ModelErrorCodeChanged
						object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORSerialPortModelPortStateChanged
						object: model];	

	[notifyCenter addObserver : self
                     selector : @selector(constraintsChanged:)
                         name : ORTM700ConstraintsChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(inStandByChanged:)
                         name : ORTM700ModelInStandByChanged
						object: model];
    
    [notifyCenter addObserver : self
                     selector : @selector(constraintsChanged:)
                         name : ORTM700ConstraintsDisabledChanged
						object: model];
   
    

    
	[serialPortController registerNotificationObservers];

}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"TM700 (%lu)",[model uniqueIdNumber]]];
}


- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
	[self errorCodeChanged:nil];
	[self deviceAddressChanged:nil];
	[self setRotorSpeedChanged:nil];
	[self actualRotorSpeedChanged:nil];
	[self motorCurrentChanged:nil];
	[self turboAcceleratingChanged:nil];
	[self speedAttainedChanged:nil];
	[self turboOverTempChanged:nil];
	[self unitOverTempChanged:nil]; 
	[self motorPowerChanged:nil];
	[self stationPowerChanged:nil];
	[self pollTimeChanged:nil];
	[self tmpRotSetChanged:nil];
	[self runUpTimeCtrlChanged:nil];
	[self runUpTimeChanged:nil];
    [self updateButtons];
	[self constraintsChanged:nil];
	[self inStandByChanged:nil];
    
	[serialPortController updateWindow];
}

- (void) inStandByChanged:(NSNotification*)aNote
{
	[inStandByField setStringValue: [model inStandBy]?@"YES":@"NO"];
    [self updateButtons];
}

- (void) constraintsChanged:(NSNotification*)aNote
{
    NSImage* lockImage = [[NSImage imageNamed:@"smallLock"] copy];
	if([[model pumpOffConstraints] count]){
        
        if([model constraintsDisabled]){
 			NSSize lockSize = [lockImage size];
           [lockImage lockFocus];
            [[NSColor redColor] set];
            [NSBezierPath setDefaultLineWidth:2];
            [NSBezierPath strokeLineFromPoint:NSMakePoint(0,0) toPoint:NSMakePoint(lockSize.width,lockSize.height)];
            [NSBezierPath strokeLineFromPoint:NSMakePoint(0,lockSize.height) toPoint:NSMakePoint(lockSize.width,0)];
            [lockImage unlockFocus];
        }
        
		[constraintButton setImage:lockImage];
        [constraintButton setEnabled:YES];
	}
	else {
        [constraintButton setImage:nil];
        [constraintButton setEnabled:NO];
    }
    [lockImage release];
}

- (void) errorCodeChanged:(NSNotification*)aNote
{
    NSString* errorCode = [(ORTM700Model*)model errorCode];
    if([errorCode isEqualToString:@"000000"])errorCode = @"";
	[errorCodeField setStringValue: errorCode];
    [self updateButtons];
}

- (void) runUpTimeChanged:(NSNotification*)aNote
{
	[runUpTimeTextField setIntValue: [model runUpTime]];
}

- (void) runUpTimeCtrlChanged:(NSNotification*)aNote
{
	[runUpTimeCtrlField setStringValue: [model runUpTimeCtrl] ? @"ON":@"OFF"];
}

- (void) tmpRotSetChanged:(NSNotification*)aNote
{
	[tmpRotSetField setIntValue: [model tmpRotSet]];
}

- (void) motorCurrentChanged:(NSNotification*)aNote		{ [motorCurrentField		setFloatValue:	[model motorCurrent]/100.]; }
- (void) actualRotorSpeedChanged:(NSNotification*)aNote	{ [actualRotorSpeedField	setIntValue:	[model actualRotorSpeed]]; }
- (void) setRotorSpeedChanged:(NSNotification*)aNote	{ [setRotorSpeedField		setIntValue:	[model setRotorSpeed]]; }
- (void) deviceAddressChanged:(NSNotification*)aNote	{ [deviceAddressField		setIntValue:	[model deviceAddress]]; }

- (void) stationPowerChanged:(NSNotification*)aNote		
{ 
	[stationPowerField	setStringValue:	[model stationPower] ? @"ON":@"OFF"];
	[self updateStopLight];
	[self updateButtons];
}

- (void) speedAttainedChanged:(NSNotification*)aNote	
{ 
	[speedAttainedField setStringValue:	[model speedAttained] ? @"YES":@"NO"];
	[self updateStopLight];
}

- (void) turboAcceleratingChanged:(NSNotification*)aNote
{ 
	[turboAcceleratingField	setStringValue:	[model turboAccelerating] ? @"YES":@"NO"];
	[self updateStopLight];
}

- (void) updateStopLight
{
	if([model motorPower]){
		if([model speedAttained])[lightBoardView setState:kGoLight];
		else [lightBoardView setState:kCautionLight];
	}
	else [lightBoardView setState:kStoppedLight];
}

- (void) motorPowerChanged:(NSNotification*)aNote		
{ 
	[motorPowerField setStringValue: [model motorPower] ? @"ON":@"OFF"];
	[self updateStopLight];
	[self updateButtons];
}

- (void) turboOverTempChanged:(NSNotification*)aNote
{	
	[turboPumpOverTempField setStringValue: [model turboPumpOverTemp]?@"HOT":@"OK"];
	[turboPumpOverTempField setTextColor:	[model turboPumpOverTemp]?[NSColor redColor]:[NSColor blackColor]];
}

- (void) unitOverTempChanged:(NSNotification*)aNote
{
	[driveUnitOverTempField setStringValue: [model driveUnitOverTemp]?@"HOT":@"OK"];
	[driveUnitOverTempField setTextColor:	[model driveUnitOverTemp]?[NSColor redColor]:[NSColor blackColor]];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORTM700Lock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{
	[self updateButtons];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORTM700Lock];;
}

- (void) updateButtons
{
    BOOL locked     = [gSecurity isLocked:ORTM700Lock];
	BOOL portOpen   = [[model serialPort] isOpen];
	BOOL stationOn  = [model stationPower] && [model motorPower];

    NSString* errorCode = [(ORTM700Model*)model errorCode];
    BOOL errExists = [errorCode isEqualToString:@"000000"]?NO:YES;
    
    [lockButton setState: locked];
	
	[serialPortController updateButtons:locked];
	
    [stationOnButton    setEnabled: !locked && portOpen && !stationOn];
    [stationOffButton   setEnabled: !locked && portOpen && stationOn];
	[tmpRotSetField     setEnabled: !locked && portOpen];
    [updateButton       setEnabled: portOpen];
    [ackErrorButton     setEnabled: errExists && portOpen];
    [pollTimePopup      setEnabled: !locked];
	[initButton         setEnabled: !locked && portOpen];
	[standByButton      setEnabled: !locked && stationOn];
    [standByButton      setTitle:   stationOn?([model inStandBy] ? @"Continue":@"Stand By"):@"--"];
}

- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

#pragma mark •••Actions
- (IBAction) standByAction:(id)sender;
{
	[model sendStandby:![model inStandBy]];
}

- (IBAction) acknowledgeErrorAction:(id)sender
{
    [model sendErrorAck];
}

- (IBAction) runUpTimeAction:(id)sender
{
	[model setRunUpTime:[sender intValue]];	
}

- (IBAction) tmpRotSetAction:(id)sender
{
	[model setTmpRotSet:[sender intValue]];	
}

- (IBAction) turnOnAction:(id)sender
{
	[model turnStationOn];
}

- (IBAction) turnOffAction:(id)sender
{
	if([[model pumpOffConstraints] count] && ![model constraintsDisabled]){
		[self beginConstraintPanel:[model pumpOffConstraints]  actionTitle:@"Turn Turbo OFF"];
	}
	else {
        NSString* s = @"Turn Off Pumping Station?";
        if([[model pumpOffConstraints] count] && [model constraintsDisabled]){
            s = [s stringByAppendingString:@" WARNING--Constraints in place but are diabled."];
        }
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
        NSAlert *alert = [[[NSAlert alloc] init] autorelease];
        [alert setMessageText:s];
        [alert setInformativeText:@"Is this really what you want?"];
        [alert addButtonWithTitle:@"YES, Turn it OFF"];
        [alert addButtonWithTitle:@"Cancel"];
        [alert setAlertStyle:NSWarningAlertStyle];
        
        [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
            if (result == NSAlertFirstButtonReturn){
                [model turnStationOff];
            }
        }];
#else
        NSBeginAlertSheet(s,
                      @"Cancel",
                      @"Yes, Turn it OFF",
                      nil,[self window],
                      self,
                      @selector(_turnOffSheetDidEnd:returnCode:contextInfo:),
                      nil,
                      nil,@"Is this really what you want?");
#endif
	}
}
- (void) beginConstraintPanel:(NSDictionary*)constraints actionTitle:(NSString*)aTitle
{
	NSArray* allKeys = [constraints allKeys];
	int n = [allKeys count];
	[constraintTitleField setStringValue:[NSString stringWithFormat:@"Action: <%@> can not be done because there %d constraint%@ in effect. See below for more info.",
										  aTitle,
										  n,
										  n==1?@"":@"s"]];
	NSMutableString* s = [NSMutableString string];
	for(id aKey in allKeys){
		[s appendFormat:@"%@ --> %@\n\n",aKey,[constraints objectForKey:aKey]];
	}
	[constraintView setString:s];
	[NSApp beginSheet:constraintPanel modalForWindow:[self window]
		modalDelegate:self didEndSelector:NULL contextInfo:nil];
}
- (IBAction) closeConstraintPanel:(id)sender
{
    [constraintPanel orderOut:nil];
    [NSApp endSheet:constraintPanel];
}

- (IBAction) deviceAddressAction:(id)sender
{
	[model setDeviceAddress:[sender intValue]];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORTM700Lock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) updateAllAction:(id)sender
{
	[model updateAll];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:[[sender selectedItem] tag]];
}

- (IBAction) initAction:(id)sender
{
	[self endEditing];
	[model initUnit];
}

- (IBAction) listConstraintsAction:(id)sender
{
	if([[model pumpOffConstraints]count]){
        ORRunAlertPanel(@"The following constraints are in place", @"%@", @"OK", nil, nil,
                        [model pumpOffConstraintReport]);
        
    }
}


@end

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
@implementation ORTM700Controller (private)
- (void) _turnOffSheetDidEnd:(id)sheet returnCode:(int)returnCode contextInfo:(id)userInfo
{
    if(returnCode == NSAlertAlternateReturn){
		[model turnStationOff];
    }    
}
@end
#endif

