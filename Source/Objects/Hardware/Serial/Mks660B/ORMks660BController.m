//--------------------------------------------------------
// ORMks660BController
// Created by Mark Howe on Wednesday, April 25, 2012
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2012 University of North Carolina. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//North Carolina sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//North Carolina reserve all rights in the program. Neither the authors,
//University of North Carolina, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORMks660BController.h"
#import "ORMks660BModel.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"
#import "ORSerialPortController.h"
#import "ORTimeRate.h"

@implementation ORMks660BController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"Mks660B"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [[plotter0 yAxis] setRngLow:-1000. withHigh:1000.];
	[[plotter0 yAxis] setRngLimitsLow:-100000 withHigh:100000 withMinRng:10];
	[plotter0 setUseGradient:YES];

    [[plotter0 xAxis] setRngLow:0.0 withHigh:10000];
	[[plotter0 xAxis] setRngLimitsLow:0.0 withHigh:200000. withMinRng:200];

	ORTimeLinePlot* aPlot;
	aPlot= [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter0 addPlot: aPlot];
	[aPlot setLineColor:[NSColor redColor]];
	
	[(ORTimeAxis*)[plotter0 xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
	[aPlot release];
	
	NSNumberFormatter *numberFormatter = [[[NSNumberFormatter alloc] init] autorelease];
	[numberFormatter setFormat:@"#0.0"];	

	
	int i;
	for(i=0;i<2;i++){
		[[lowSetPointMatrix cellAtRow:i column:0] setTag:i];
		[[highSetPointMatrix cellAtRow:i column:0] setTag:i];
	}
	
	[super awakeFromNib];
}

#pragma mark ***Notifications
- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORMks660BLock
                        object: nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(pressureChanged:)
                         name : ORMks660BPressureChanged
                       object : nil];
        
    [notifyCenter addObserver : self
                     selector : @selector(lowSetPointChanged:)
                         name : ORMks660BLowSetPointChanged
                       object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(highSetPointChanged:)
                         name : ORMks660BHighSetPointChanged
                       object : nil];
     
    [notifyCenter addObserver : self
                     selector : @selector(pollTimeChanged:)
                         name : ORMks660BPollTimeChanged
                       object : nil];

    [notifyCenter addObserver : self
                     selector : @selector(shipPressuresChanged:)
                         name : ORMks660BShipPressuresChanged
						object: model];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];

    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];

    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
    [notifyCenter addObserver : self
                     selector : @selector(decimalPtPositionChanged:)
                         name : ORMks660BModelDecimalPtPositionChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(highHysteresisChanged:)
                         name : ORMks660BModelHighHysteresisChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(lowHysteresisChanged:)
                         name : ORMks660BModelLowHysteresisChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(calibrationNumberChanged:)
                         name : ORMks660BModelCalibrationNumberChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(fullScaleRBChanged:)
                         name : ORMks660BModelFullScaleRBChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(highAlarmChanged:)
                         name : ORMks660BModelHighAlarmChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(highLimitChanged:)
                         name : ORMks660BModelHighLimitChanged
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(lowAlarmChanged:)
                         name : ORMks660BModelLowAlarmChanged
						object: model];
	
    [notifyCenter addObserver : self
                     selector : @selector(involvedInProcessChanged:)
                         name : ORMks660BInvolvedInProcessChanged
						object: model];
	
	[notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORSerialPortModelPortStateChanged
						object: model];
	
	[serialPortController registerNotificationObservers];

}

- (void) involvedInProcessChanged:(NSNotification*)aNote
{
	[self lockChanged:nil];
}

- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"MKS660B (Unit %u)",[model uniqueIdNumber]]];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
	[self pressureChanged:nil];
    [self lowSetPointChanged:nil];
    [self highSetPointChanged:nil];
 	[self pollTimeChanged:nil];
	[self shipPressuresChanged:nil];
	[self updateTimePlot:nil];
    [self miscAttributesChanged:nil];
	[self decimalPtPositionChanged:nil];
	[self highHysteresisChanged:nil];
	[self lowHysteresisChanged:nil];
	[self calibrationNumberChanged:nil];
	[self fullScaleRBChanged:nil];
	[self highAlarmChanged:nil];
	[self highLimitChanged:nil];
	[self lowAlarmChanged:nil];
	[serialPortController updateWindow];
}

- (void) lowAlarmChanged:(NSNotification*)aNote
{
	[lowAlarmTextField setFloatValue: [model lowAlarm]];
}

- (void) highLimitChanged:(NSNotification*)aNote
{
	[highLimitTextField setFloatValue: [model highLimit]];
}

- (void) highAlarmChanged:(NSNotification*)aNote
{
	[highAlarmTextField setFloatValue: [model highAlarm]];
}

- (void) fullScaleRBChanged:(NSNotification*)aNote
{
	[fullScaleRBTextField setIntValue: [model fullScaleRB]];
}

- (void) calibrationNumberChanged:(NSNotification*)aNote
{
	[calibrationNumberTextField setIntValue: [model calibrationNumber]];
}

- (void) lowHysteresisChanged:(NSNotification*)aNote
{
	[lowHysteresisTextField setIntValue: [model lowHysteresis]];
}

- (void) highHysteresisChanged:(NSNotification*)aNote
{
	[highHysteresisTextField setIntValue: [model highHysteresis]];
}

- (void) decimalPtPositionChanged:(NSNotification*)aNote
{
	[decimalPtPositionPU selectItemAtIndex: [model decimalPtPosition]];
	[self setUpFormats];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == [plotter0 xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 xAxis]attributes] forKey:@"XAttributes0"];
	}
	
	if(aNotification == nil || [aNotification object] == [plotter0 yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 yAxis]attributes] forKey:@"YAttributes0"];
	}
}

- (void) miscAttributesChanged:(NSNotification*)aNote
{

	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 xAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 yAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[[plotter0 yAxis] setNeedsDisplay:YES];
		}
	}
}

- (void) updateTimePlot:(NSNotification*)aNote
{
	if(!aNote || ([aNote object] == [model timeRate])){
		[plotter0 setNeedsDisplay:YES];
	}
}

- (void) shipPressuresChanged:(NSNotification*)aNote
{
	[shipPressuresButton setIntValue: [model shipPressures]];
}


- (void) lowSetPointChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<2;i++){
		float theConvertedValue = [model lowSetPoint:i]/powf(10.,4-[model decimalPtPosition]);
		[[lowSetPointMatrix cellWithTag:i] setFloatValue: theConvertedValue];
    }
}
- (void) highSetPointChanged:(NSNotification*)aNote
{
    int i;
    for(i=0;i<2;i++){
		float theConvertedValue = [model highSetPoint:i]/powf(10.,4-[model decimalPtPosition]);
		[[highSetPointMatrix cellWithTag:i] setFloatValue: theConvertedValue];
    }
}


- (void) pressureChanged:(NSNotification*)aNote
{
	NSString* format = [NSString stringWithFormat:@"%%.%df",4 - [model decimalPtPosition]];
	NSString* theValue = [NSString stringWithFormat:format,[model pressure]];
	[pressureField setStringValue:theValue];
	uint32_t t = [model timeMeasured];
	NSDate* theDate;
	if(t){
		theDate = [NSDate dateWithTimeIntervalSince1970:t];
		[timeField setObjectValue:[theDate description]];
	}
	else [timeField setObjectValue:@"--"];
}


- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORMks660BLock to:secure];
    [lockButton setEnabled:secure];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORMks660BLock];;
}

- (void) lockChanged:(NSNotification*)aNotification
{

    BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORMks660BLock];
    BOOL locked = [gSecurity isLocked:ORMks660BLock];
	BOOL inProcess = [model involvedInProcess];

    [lockButton setState: locked];
	
	[serialPortController updateButtons:locked];

    [pollTimePopup setEnabled:!locked && !inProcess];
    [shipPressuresButton setEnabled:!locked];
 
    [initHardwareButton setEnabled:!locked];
    [readPressureButton setEnabled:!locked];
	
    [lowSetPointMatrix setEnabled:!locked];
    [highSetPointMatrix setEnabled:!locked];

	[lowAlarmTextField setEnabled:!locked];
	[highAlarmTextField setEnabled:!locked];
	[highLimitTextField setEnabled:!locked];
	[calibrationNumberTextField setEnabled:!locked];
	[highHysteresisTextField setEnabled:!locked];
	[lowHysteresisTextField setEnabled:!locked];
	[decimalPtPositionPU setEnabled:!locked];
	[lowSetPointMatrix setEnabled:!locked];
	[highSetPointMatrix setEnabled:!locked];
	
    NSString* s = @"";
    if(lockedOrRunningMaintenance){
        if(runInProgress && ![gSecurity isLocked:ORMks660BLock])s = @"Not in Maintenance Run.";
    }
    [lockDocField setStringValue:s];

}

- (void) setUpFormats
{
	NSNumberFormatter *numberFormatter = [[[NSNumberFormatter alloc] init] autorelease];
	int n = [model decimalPtPosition];
	if(n==0)	 [numberFormatter setFormat:@"#0.0000"];
	else if(n==1)[numberFormatter setFormat:@"#0.000"];
	else if(n==2)[numberFormatter setFormat:@"#0.00"];
	else if(n==3)[numberFormatter setFormat:@"#0.0"];
	else if(n==4)[numberFormatter setFormat:@"#0"];
	
	[pressureField setFormatter:numberFormatter];
	int i;
	for(i=0;i<2;i++){
		[[lowSetPointMatrix cellAtRow:i column:0] setFormatter:numberFormatter];
		[[highSetPointMatrix cellAtRow:i column:0] setFormatter:numberFormatter];
	}
	[pressureField setNeedsDisplay:YES];
	[self lowSetPointChanged:nil];
	[self highSetPointChanged:nil];
}


- (void) pollTimeChanged:(NSNotification*)aNotification
{
	[pollTimePopup selectItemWithTag:[model pollTime]];
}

#pragma mark ***Actions
- (void) lowAlarmAction:(id)sender
{
	[model setLowAlarm:[sender floatValue]];	
}

- (void) highLimitAction:(id)sender
{
	[model setHighLimit:[sender floatValue]];	
}

- (void) highAlarmAction:(id)sender
{
	[model setHighAlarm:[sender floatValue]];	
}

- (void) calibrationNumberAction:(id)sender
{
	[model setCalibrationNumber:[sender intValue]];	
}

- (void) lowHysteresisAction:(id)sender
{
	[model setLowHysteresis:[sender intValue]];	
}

- (void) highHysteresisAction:(id)sender
{
	[model setHighHysteresis:[sender intValue]];	
}

- (void) decimalPtPositionAction:(id)sender
{
	[model setDecimalPtPosition:(int)[sender indexOfSelectedItem]];
	[model writeDecimalPtPosition];
	[model performSelector:@selector(readPressure) withObject:nil afterDelay:.1];
}

- (IBAction) loadDialogFromHW:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Transfer HW Settings To Dialog"];
    [alert setInformativeText:@"This will read the values that are in the hardware unit and put those values into the dialog.\n\nReally do this?"];
    [alert addButtonWithTitle:@"Yes/Do It"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSAlertStyleWarning];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model readAndLoad];
        }
    }];
#else
    NSBeginAlertSheet(@"Transfer HW Settings To Dialog",
					  @"YES/Do it",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(loadDialogDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"This will read the values that are in the hardware unit and put those values into the dialog.\n\nReally do this?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) loadDialogDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(NSDictionary*)userInfo
{
	if(returnCode == NSAlertFirstButtonReturn){
		[model readAndLoad];
    }
}
#endif
- (IBAction) pollNowAction:(id)sender
{
	[model pollHardware];	
}

- (IBAction) shipPressuresAction:(id)sender
{
	[model setShipPressures:[sender intValue]];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORMks660BLock to:[sender intValue] forWindow:[self window]];
}


- (IBAction) readPressureAction:(id)sender
{
	[model readPressure];
}

- (IBAction) readHardware:(id)sender
{
	NSLog(@"MKS651(%d) Reading back all values. Any mismatches will follow.\n",[model uniqueIdNumber]);
	[self endEditing];
	[model readAndCompare];
}

- (IBAction) pollTimeAction:(id)sender
{
	[model setPollTime:(int)[[sender selectedItem] tag]];
}

- (IBAction) lowSetPointAction:(id)sender;
{
	int index = (int)[[sender selectedCell] tag];
	float theValue = [[sender selectedCell] floatValue] * powf(10.,4-[model decimalPtPosition]);;
	[model setLowSetPoint:index withValue:theValue];
}

- (IBAction) highSetPointAction:(id)sender;
{
	int index = (int)[[sender selectedCell] tag];
	float theValue = [[sender selectedCell] floatValue] * powf(10.,4-[model decimalPtPosition]);
	[model setHighSetPoint:index withValue:theValue];
}


- (IBAction) initHardwareAction:(id)sender;
{
	NSLog(@"MKS660B (%d) Loading and reading back all values. Any mismatches will be listed.\n",[model uniqueIdNumber]);
	[self endEditing];
	[model initHardware];
}

- (IBAction) zeroAction:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Display Zero"];
    [alert setInformativeText:@"This will zero the display.\n\nReally do this?"];
    [alert addButtonWithTitle:@"YES/Do it"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSAlertStyleWarning];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model writeZeroDisplay];
       }
    }];
#else
    NSBeginAlertSheet(@"Display Zero",
					  @"YES/Do it",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(zeroDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"This will zero the display.\n\nReally do this?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) zeroDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(NSDictionary*)userInfo
{
	if(returnCode == NSAlertFirstButtonReturn){
		[model writeZeroDisplay];
    }
}
#endif

- (IBAction) fullScaleAction:(id)sender
{
    [self endEditing];
#if defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
    NSAlert *alert = [[[NSAlert alloc] init] autorelease];
    [alert setMessageText:@"Set Full Scale"];
    [alert setInformativeText:@"This will make the current value the full scale value.\n\nReally do this?"];
    [alert addButtonWithTitle:@"YES/Do it"];
    [alert addButtonWithTitle:@"Cancel"];
    [alert setAlertStyle:NSAlertStyleWarning];
    
    [alert beginSheetModalForWindow:[self window] completionHandler:^(NSModalResponse result){
        if (result == NSAlertFirstButtonReturn){
            [model writeFullScale];
        }
    }];
#else
    NSBeginAlertSheet(@"Set Full Scale",
					  @"YES/Do it",
					  @"Cancel",
					  nil,[self window],
					  self,
					  @selector(fullScaleDidFinish:returnCode:contextInfo:),
					  nil,
					  nil,
					  @"This will make the current value the full scale value.\n\nReally do this?");
#endif
}

#if !defined(MAC_OS_X_VERSION_10_10) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_10 // 10.10-specific
- (void) fullScaleDidFinish:(id)sheet returnCode:(int)returnCode contextInfo:(NSDictionary*)userInfo
{
	if(returnCode == NSAlertFirstButtonReturn){
		[model writeFullScale];
		[ORTimer delay:1];
		[model writeFullScale]; //have to write it twice with a delay
    }
}
#endif

#pragma mark ***Data Source
- (int) numberPointsInPlot:(id)aPlotter
{
	return (int)[[model timeRate] count];
}

- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int count = (int)[[model timeRate] count];
	int index = count-i-1;
	*xValue = [[model timeRate]timeSampledAtIndex:index];
	*yValue = [[model timeRate] valueAtIndex:index];
}

@end


