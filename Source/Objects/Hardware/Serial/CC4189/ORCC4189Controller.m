//--------------------------------------------------------
// ORCC4189Controller
// Created by Mark  A. Howe on Fri Jul 22 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORCC4189Controller.h"
#import "ORCC4189Model.h"
#import "ORTimeLinePlot.h"
#import "ORCompositePlotView.h"
#import "ORTimeAxis.h"
#import "ORTimeRate.h"
#import "ORSerialPortController.h"

@implementation ORCC4189Controller

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"CC4189"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
    [blankView release];
	[super dealloc];
}

- (void) awakeFromNib
{
    [(ORAxis*)[plotter0 yAxis] setRngLow:0.0 withHigh:300.];
	[(ORAxis*)[plotter0 yAxis] setRngLimitsLow:-300.0 withHigh:500 withMinRng:4];


    [(ORAxis*)[plotter0 xAxis] setRngLow:0.0 withHigh:10000];
	[(ORAxis*)[plotter0 xAxis] setRngLimitsLow:0.0 withHigh:200000. withMinRng:200];

	ORTimeLinePlot* aPlot;
	aPlot= [[ORTimeLinePlot alloc] initWithTag:0 andDataSource:self];
	[plotter0 addPlot: aPlot];
	[aPlot setName:@"Temp"];
	[aPlot setLineColor:[NSColor redColor]];
	[(ORTimeAxis*)[plotter0 xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
	[aPlot release];
	
	aPlot= [[ORTimeLinePlot alloc] initWithTag:1 andDataSource:self];
	[plotter0 addPlot: aPlot];
	[aPlot setName:@"RH"];
	[aPlot setLineColor:[NSColor blueColor]];
	[(ORTimeAxis*)[plotter0 xAxis] setStartTime: [[NSDate date] timeIntervalSince1970]];
	[aPlot release];

	[plotter0 setShowLegend:YES];

	blankView		 = [[NSView alloc] init];
    basicOpsSize	 = NSMakeSize(400,170);
    valuesSize		 = NSMakeSize(400,170);
    processLimitSize = NSMakeSize(400,170);
    plotSize		 = NSMakeSize(400,315);
	
	NSString* key = [NSString stringWithFormat: @"orca.ORCC4189%lu.selectedtab",[model uniqueIdNumber]];
    int index = [[NSUserDefaults standardUserDefaults] integerForKey: key];
    if((index<0) || (index>[tabView numberOfTabViewItems]))index = 0;
    [tabView selectTabViewItemAtIndex: index];
	
	NSUInteger style = [[self window] styleMask];
	if(index == 2){
		[[self window] setStyleMask: style | NSResizableWindowMask];
	}
	else {
		[[self window] setStyleMask: style & ~NSResizableWindowMask];
	}
	
	
	[super awakeFromNib];
}

- (BOOL) portLocked
{
	return [gSecurity isLocked:ORCC4189Lock];
}
								  
								  
- (void) setModel:(id)aModel
{
	[super setModel:aModel];
	[[self window] setTitle:[NSString stringWithFormat:@"CC4189 (Unit %lu)",[model uniqueIdNumber]]];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
	
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORCC4189Lock
                        object: nil];
                                              
    [notifyCenter addObserver : self
                     selector : @selector(temperatureChanged:)
                         name : ORCC4189TemperatureChanged
                       object : model];
	
    [notifyCenter addObserver : self
                     selector : @selector(humidityChanged:)
                         name : ORCC4189HumidityChanged
                       object : model];
	
    [notifyCenter addObserver : self
                     selector : @selector(shipValuesChanged:)
                         name : ORCC4189ModelShipValuesChanged
						object: model];

    [notifyCenter addObserver : self
					 selector : @selector(scaleAction:)
						 name : ORAxisRangeChangedNotification
					   object : nil];

    [notifyCenter addObserver : self
					 selector : @selector(miscAttributesChanged:)
						 name : ORMiscAttributesChanged
					   object : model];

    [notifyCenter addObserver : self
					 selector : @selector(updateTimePlot:)
						 name : ORRateAverageChangedNotification
					   object : nil];
	
    [notifyCenter addObserver : self
                     selector : @selector(lowLimit0Changed:)
                         name : ORCC4189ModelLowLimit0Changed
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(lowLimit1Changed:)
                         name : ORCC4189ModelLowLimit1Changed
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(highLimit0Changed:)
                         name : ORCC4189ModelHighLimit0Changed
						object: model];

    [notifyCenter addObserver : self
                     selector : @selector(highLimit1Changed:)
                         name : ORCC4189ModelHighLimit1Changed
						object: model];

	[serialPortController registerNotificationObservers];
}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
	[self temperatureChanged:nil];
	[self humidityChanged:nil];
	[self shipValuesChanged:nil];
	[self updateTimePlot:nil];
    [self miscAttributesChanged:nil];
	[self lowLimit0Changed:nil];
	[self lowLimit1Changed:nil];
	[self highLimit0Changed:nil];
	[self highLimit1Changed:nil];
	[serialPortController updateWindow];
}

- (void)tabView:(NSTabView *)aTabView didSelectTabViewItem:(NSTabViewItem *)tabViewItem
{
    [[self window] setContentView:blankView];
	NSUInteger style = [[self window] styleMask];
	switch([tabView indexOfTabViewItem:tabViewItem]){
			
		case  0: 
			[self resizeWindowToSize:basicOpsSize];   
			[[self window] setStyleMask: style & ~NSResizableWindowMask];
			break;
			
		case  1: 
			[self resizeWindowToSize:processLimitSize];     
			[[self window] setStyleMask: style & ~NSResizableWindowMask];
			break;
			
		case  2: 
			[self resizeWindowToSize:plotSize];	
			[[self window] setStyleMask: style | NSResizableWindowMask];
			break;
			
		default:
			[self resizeWindowToSize:valuesSize];   
			[[self window] setStyleMask: style & ~NSResizableWindowMask];
			break;
	}
	
    [[self window] setContentView:totalView];
	
    NSString* key = [NSString stringWithFormat: @"orca.ORCC4189%lu.selectedtab",[model uniqueIdNumber]];
    int index = [tabView indexOfTabViewItem:tabViewItem];
    [[NSUserDefaults standardUserDefaults] setInteger:index forKey:key];
}

- (void)windowDidResize:(NSNotification *)notification
{
	if([tabView indexOfTabViewItem:[tabView selectedTabViewItem]] == 2){
		plotSize = [[self window] frame].size; 
	}
}

- (void) highLimit1Changed:(NSNotification*)aNote
{
	[highLimit1Field setDoubleValue: [model highLimit1]];
}

- (void) highLimit0Changed:(NSNotification*)aNote
{
	[highLimit0Field setDoubleValue: [model highLimit0]];
}

- (void) lowLimit1Changed:(NSNotification*)aNote
{
	[lowLimit1Field setDoubleValue: [model lowLimit1]];
}

- (void) lowLimit0Changed:(NSNotification*)aNote
{
	[lowLimit0Field setDoubleValue: [model lowLimit0]];
}

- (void) scaleAction:(NSNotification*)aNotification
{
	if(aNotification == nil || [aNotification object] == (ORAxis*)[plotter0 xAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 xAxis]attributes] forKey:@"XAttributes0"];
	};
	
	if(aNotification == nil || [aNotification object] == (ORAxis*)[plotter0 yAxis]){
		[model setMiscAttributes:[(ORAxis*)[plotter0 yAxis]attributes] forKey:@"YAttributes0"];
	};

}

- (void) miscAttributesChanged:(NSNotification*)aNote
{

	NSString*				key = [[aNote userInfo] objectForKey:ORMiscAttributeKey];
	NSMutableDictionary* attrib = [model miscAttributesForKey:key];
	
	if(aNote == nil || [key isEqualToString:@"XAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"XAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 xAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[(ORAxis*)[plotter0 xAxis] setNeedsDisplay:YES];
		}
	}
	if(aNote == nil || [key isEqualToString:@"YAttributes0"]){
		if(aNote==nil)attrib = [model miscAttributesForKey:@"YAttributes0"];
		if(attrib){
			[(ORAxis*)[plotter0 yAxis] setAttributes:attrib];
			[plotter0 setNeedsDisplay:YES];
			[(ORAxis*)[plotter0 yAxis] setNeedsDisplay:YES];
		}
	}

}

- (void) updateTimePlot:(NSNotification*)aNote
{
	[plotter0 setNeedsDisplay:YES];
}

- (void) shipValuesChanged:(NSNotification*)aNote
{
	[shipValuesButton setIntValue: [model shipValues]];
}

- (void) temperatureChanged:(NSNotification*)aNote
{
	[temperatureField setFloatValue:[model temperature]];
	unsigned long t = [model timeMeasured];
	NSDate* theDate;
	if(t){
		theDate = [NSDate dateWithTimeIntervalSince1970:t];
		[timeField setObjectValue:[theDate descriptionFromTemplate:@"MM/dd HH:mm:ss"]];
	}
	else [timeField setObjectValue:@"--"];
}

- (void) humidityChanged:(NSNotification*)aNote
{
	[humidityField setFloatValue:[model humidity]];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORCC4189Lock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{

    BOOL locked = [gSecurity isLocked:ORCC4189Lock];

    [lockButton setState: locked];
	
	[serialPortController updateButtons:locked];

    [shipValuesButton setEnabled:!locked];
    [lowLimit0Field setEnabled:!locked];
    [lowLimit1Field setEnabled:!locked];
	[highLimit0Field setEnabled:!locked];
    [highLimit1Field setEnabled:!locked];
 }

#pragma mark ***Actions

- (void) highLimit1Action:(id)sender
{
	[model setHighLimit1:[sender doubleValue]];	
}

- (void) highLimit0Action:(id)sender
{
	[model setHighLimit0:[sender doubleValue]];	
}

- (void) lowLimit1Action:(id)sender
{
	[model setLowLimit1:[sender doubleValue]];	
}

- (void) lowLimit0Action:(id)sender
{
	[model setLowLimit0:[sender doubleValue]];	
}

- (void) shipValuesAction:(id)sender
{
	[model setShipValues:[sender intValue]];	
}

- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORCC4189Lock to:[sender intValue] forWindow:[self window]];
}

#pragma mark •••Data Source
- (int) numberPointsInPlot:(id)aPlotter
{
	return [[model timeRate:[aPlotter tag]] count];
} 
- (void) plotter:(id)aPlotter index:(int)i x:(double*)xValue y:(double*)yValue
{
	int set = [aPlotter tag];
	int count = [[model timeRate:set] count];
	int index = count-i-1;
	*xValue = [[model timeRate:set] timeSampledAtIndex:index];
	*yValue = [[model timeRate:set] valueAtIndex:index];
}

@end

