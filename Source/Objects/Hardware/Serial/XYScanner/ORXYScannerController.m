//--------------------------------------------------------
// ORXYScannerController
// Created by Mark  A. Howe on Fri Jul 22 2005
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2005 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORXYScannerController.h"
#import "ORXYScannerModel.h"
#import "ORCompositePlotView.h"
#import "ORVectorPlot.h"
#import "ORAxis.h"
#import "ORSerialPortList.h"
#import "ORSerialPort.h"
#define __CARBONSOUND__ //temp until undated to >10.3
#import <Carbon/Carbon.h>


@interface ORXYScannerController (private)
- (void) populatePortListPopup;
@end

@implementation ORXYScannerController

#pragma mark ***Initialization

- (id) init
{
	self = [super initWithWindowNibName:@"XYScanner"];
	return self;
}

- (void) dealloc
{
	[[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) awakeFromNib
{
    [self populatePortListPopup];
    [[xyPlot xAxis] setRngLimitsLow:0 withHigh:110 withMinRng:110];
    [[xyPlot yAxis] setRngLimitsLow:0 withHigh:110 withMinRng:110];
	
	[xyPlot setUseGradient:NO];
    [xyPlot setBackgroundColor:[NSColor colorWithCalibratedRed:.9 green:1.0 blue:.9 alpha:1.0]];
	[xyPlot setShowGrid:NO];
	ORVectorPlot* aPlot;
	aPlot = [[ORVectorPlot alloc] initWithTag:0 andDataSource:self];
	[xyPlot addPlot: aPlot];
	[xyPlot setXLabel:@"X Position (mm)"];
	[xyPlot setYLabel:@"Y Position (mm)"];
	[aPlot release];
	
    [super awakeFromNib];
}

#pragma mark ***Notifications

- (void) registerNotificationObservers
{
	NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    [super registerNotificationObservers];
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORRunStatusChangedNotification
                       object : nil];
    
    [notifyCenter addObserver : self
                     selector : @selector(lockChanged:)
                         name : ORXYScannerLock
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portNameChanged:)
                         name : ORXYScannerModelPortNameChanged
                        object: nil];

    [notifyCenter addObserver : self
                     selector : @selector(portStateChanged:)
                         name : ORSerialPortStateChanged
                       object : nil];
                                              
    [notifyCenter addObserver : self
                     selector : @selector(goingHomeChanged:)
                         name : ORXYScannerModelGoingHomeChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(positionChanged:)
                         name : ORXYScannerModelPositionChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(cmdPositionChanged:)
                         name : ORXYScannerModelCmdPositionChanged
                       object : model];
                       
    [notifyCenter addObserver : self
                     selector : @selector(absMotionChanged:)
                         name : ORXYScannerModelAbsMotionChanged
                       object : model];
   [notifyCenter addObserver : self
                     selector : @selector(cmdFileChanged:)
                         name : ORXYScannerModelCmdFileChanged
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(patternChanged:)
                         name : ORXYScannerModelPatternChanged
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(dwellTimeChanged:)
                         name : ORXYScannerModelDwellTimeChanged
                       object : model];
                       
   [notifyCenter addObserver : self
                     selector : @selector(optionsChanged:)
                         name : ORXYScannerModelOptionMaskChanged
                       object : model];
                       
   [notifyCenter addObserver : self
                     selector : @selector(patternTypeChanged:)
                         name : ORXYScannerModelPatternTypeChanged
                       object : model];

   [notifyCenter addObserver : self
                     selector : @selector(endEditing)
                         name : ORXYScannerModelEndEditing
                       object : model];

}

- (void) updateWindow
{
    [super updateWindow];
    [self lockChanged:nil];
    [self portStateChanged:nil];
    [self portNameChanged:nil];
    [self positionChanged:nil];
    [self cmdPositionChanged:nil];
    [self absMotionChanged:nil];
    [self goingHomeChanged:nil];
    [self cmdFileChanged:nil];
    [self patternTypeChanged:nil];
    [self optionsChanged:nil];
    [self patternChanged:nil];
    [self dwellTimeChanged:nil];
}

- (void) checkGlobalSecurity
{
    BOOL secure = [[[NSUserDefaults standardUserDefaults] objectForKey:OROrcaSecurityEnabled] boolValue];
    [gSecurity setLock:ORXYScannerLock to:secure];
    [lockButton setEnabled:secure];
}

- (void) lockChanged:(NSNotification*)aNotification
{

    BOOL runInProgress = [gOrcaGlobals runInProgress];
    BOOL lockedOrRunningMaintenance = [gSecurity runInProgressButNotType:eMaintenanceRunType orIsLocked:ORXYScannerLock];
    BOOL locked = [gSecurity isLocked:ORXYScannerLock];

    [lockButton setState: locked];

    [portListPopup setEnabled:!locked];
    [openPortButton setEnabled:!locked];
    [getPositionButton setEnabled:!locked];
    [getHomeButton setEnabled:!locked];
    [cmdXValueField setEnabled:!locked];
    [cmdYValueField setEnabled:!locked];
    [absMatrix setEnabled:!locked];
    [goButton setEnabled:!locked];
    [selectCmdFileButton setEnabled:!locked];
    [selectCmdFileButton1 setEnabled:!locked];
    [runCmdFileButton setEnabled:!locked];
    [patternTypeMatrix setEnabled:!locked];
    [patternMatrix setEnabled:!locked];
    [optionMatrix setEnabled:!locked];
    [dwellTimeField setEnabled:!lockedOrRunningMaintenance];
    
    
    NSString* s = @"";
    if(lockedOrRunningMaintenance){
        if(runInProgress && ![gSecurity isLocked:ORXYScannerLock])s = @"Not in Maintenance Run.";
    }
    [lockDocField setStringValue:s];

}

- (void) patternTypeChanged:(NSNotification*)aNotification
{
	[patternTypeMatrix selectCellWithTag:[model patternType]];
}

- (void) patternChanged:(NSNotification*)aNotification
{
	[[patternMatrix cellWithTag:0] setFloatValue:[model startPoint].x];
	[[patternMatrix cellWithTag:1] setFloatValue:[model endPoint].x];
	[[patternMatrix cellWithTag:2] setFloatValue:[model delta].x];

	[[patternMatrix cellWithTag:3] setFloatValue:[model startPoint].y];
	[[patternMatrix cellWithTag:4] setFloatValue:[model endPoint].y];
	[[patternMatrix cellWithTag:5] setFloatValue:[model delta].y];
}

- (void) dwellTimeChanged:(NSNotification*)aNotification
{
	[dwellTimeField setFloatValue:[model dwellTime]];
}


- (void) optionsChanged:(NSNotification*)aNotification
{
	int i;
	for(i=0;i<[optionMatrix numberOfRows];i++){
		[[optionMatrix cellWithTag:i] setState: [model optionSet:i]];	
	}
}

- (void) absMotionChanged:(NSNotification*)aNotification
{
    [absMatrix selectCellWithTag:[model absMotion]];
    if([model absMotion]){
        [moveLabelField setStringValue:@"Go To:"];
        [goButton setTitle:@"Go To"];
    }
    else {
        [moveLabelField setStringValue:@"Move:"];
        [goButton setTitle:@"Move"];
    }
}

- (void) cmdPositionChanged:(NSNotification*)aNotification
{
    [cmdXValueField setFloatValue: [model cmdPosition].x];
    [cmdYValueField setFloatValue: [model cmdPosition].y];
}

- (void) portStateChanged:(NSNotification*)aNotification
{
    if(aNotification == nil || [aNotification object] == [model serialPort]){
        if([model serialPort]){
            [openPortButton setEnabled:YES];

            if([[model serialPort] isOpen]){
                [openPortButton setTitle:@"Close"];
                [portStateField setTextColor:[NSColor colorWithCalibratedRed:0.0 green:.8 blue:0.0 alpha:1.0]];
                [portStateField setStringValue:@"Open"];
            }
            else {
                [openPortButton setTitle:@"Open"];
                [portStateField setStringValue:@"Closed"];
                [portStateField setTextColor:[NSColor redColor]];
            }
        }
        else {
            [openPortButton setEnabled:NO];
            [portStateField setTextColor:[NSColor blackColor]];
            [portStateField setStringValue:@"---"];
            [openPortButton setTitle:@"---"];
        }
    }
}

- (void) portNameChanged:(NSNotification*)aNotification
{
    NSString* portName = [model portName];
    
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;

    [portListPopup selectItemAtIndex:0]; //the default
    while (aPort = [enumerator nextObject]) {
        if([portName isEqualToString:[aPort name]]){
            [portListPopup selectItemWithTitle:portName];
            break;
        }
	}  
    [self portStateChanged:nil];
}

- (void) positionChanged:(NSNotification*)aNotification
{
	[xyPlot setNeedsDisplay:YES];
	if(![model goingHome]){
		[xPositionField setFloatValue:[model xyPosition].x];
		[yPositionField setFloatValue:[model xyPosition].y];
	}
}

- (void) goingHomeChanged:(NSNotification*)aNotification
{
	[xyPlot setNeedsDisplay:YES];
	if([model goingHome]){
		[goingHomeField setStringValue:@"Going Home"];
	}
	else {
		[goingHomeField setStringValue:@""];
	}
}

- (void) cmdFileChanged:(NSNotification*)aNotification
{
    if([model cmdFile]){
        [cmdFileField setStringValue:[[model cmdFile] stringByAbbreviatingWithTildeInPath]];
        [cmdFileField1 setStringValue:[[model cmdFile] stringByAbbreviatingWithTildeInPath]];
    }
    else {
        [cmdFileField setStringValue:@"--"];
        [cmdFileField1 setStringValue:@"--"];
    }
}

#pragma mark ***Actions
- (IBAction) lockAction:(id) sender
{
    [gSecurity tryToSetLock:ORXYScannerLock to:[sender intValue] forWindow:[self window]];
}

- (IBAction) portListAction:(id) sender
{
    [model setPortName: [portListPopup titleOfSelectedItem]];
}

- (IBAction) openPortAction:(id)sender
{
    [model openPort:![[model serialPort] isOpen]];
}

- (IBAction) getPositionAction:(id)sender
{
    [model queryPosition];
}

- (IBAction) goHomeAction:(id)sender
{
    [model goHome];
	NSLog(@"XY Scanner %d sent home\n",[model uniqueIdNumber]);
}

- (IBAction) cmdPositionAction:(id)sender
{
    [model setCmdPosition:NSMakePoint([cmdXValueField floatValue],[cmdYValueField floatValue])];
}


- (IBAction) absMotionAction:(id)sender
{
    [model setAbsMotion:[[absMatrix selectedCell] tag]];
}

- (IBAction) goAction:(id)sender
{
    [self endEditing];
    [model go];
	if([model absMotion])NSLog(@"XY Scanner %d sent to X: %f Y: %f\n",[model uniqueIdNumber],[cmdXValueField floatValue],[cmdYValueField floatValue]);
	else NSLog(@"XY Scanner %d moved relative amount X: %f Y: %f\n",[model uniqueIdNumber],[cmdXValueField floatValue],[cmdYValueField floatValue]);
}

- (IBAction) stopAction:(id)sender
{
    [model stopMotion];
}

- (IBAction) selectCmdFileAction:(id)sender
{
    NSString* startDir = NSHomeDirectory(); //default to home
    if([model cmdFile]){
        startDir = [[model cmdFile]stringByDeletingLastPathComponent];
        if([startDir length] == 0){
            startDir = NSHomeDirectory();
        }
    }
    NSOpenPanel *openPanel = [NSOpenPanel openPanel];
    [openPanel setCanChooseDirectories:NO];
    [openPanel setCanChooseFiles:YES];
    [openPanel setAllowsMultipleSelection:NO];
    [openPanel setPrompt:@"Choose"];
    
    [openPanel setDirectoryURL:[NSURL fileURLWithPath:startDir]];
    [openPanel beginSheetModalForWindow:[self window] completionHandler:^(NSInteger result){
        if (result == NSFileHandlingPanelOKButton){
            NSString* fileName = [[[openPanel URL] path] stringByAbbreviatingWithTildeInPath];
            [model setCmdFile:fileName];

        }
    }];
}


#pragma mark ***Plotter delegate methods

- (int)	numberPointsInPlot:(id)aPlotter
{
    return (int)[model validTrackCount];
}

- (void) plotter:(id)aPlotter index:(uint32_t)index x:(double*)xValue y:(double*)yValue
{
    if(index>kNumTrackPoints){
        *xValue = 0;
        *yValue = 0;
        return;
    }
    NSPoint track = [model track:index];
    *xValue = track.x;
    *yValue = track.y;
}

- (BOOL) plotter:(id)aPlotter crossHairX:(double*)xValue crossHairY:(double*)yValue
{
    *xValue = [model xyPosition].x;
    *yValue = [model xyPosition].y;
    return YES;
}

- (IBAction) runCmdFileAction:(id)sender
{
    [model runCmdFile];
}

- (IBAction) patternTypeAction:(id)sender
{
    [model setPatternType:(int)[[patternTypeMatrix selectedCell] tag]];
}

- (IBAction) patternAction:(id)sender
{
    int  tag = (int)[[sender selectedCell]tag];
    float value = [[sender selectedCell] floatValue];
    if(tag == 0) [model setStartPoint:NSMakePoint(value,[model startPoint].y)];
    else if(tag == 1) [model setEndPoint:NSMakePoint(value,[model endPoint].y)];
    else if(tag == 2) [model setDelta:NSMakePoint(value,[model delta].y)];
    else if(tag == 3) [model setStartPoint:NSMakePoint([model startPoint].x,value)];
    else if(tag == 4) [model setEndPoint:NSMakePoint([model endPoint].x,value)];
    else if(tag == 5) [model setDelta:NSMakePoint([model delta].x,value)];
}

- (void) dwellTimeAction:(id)sender
{
    [model setDwellTime:[sender floatValue]];
}

- (IBAction) optionsAction:(id)sender
{
    int  whichOption = (int)[[sender selectedCell]tag];
    if([[sender cellWithTag:whichOption] state])[model setOption:whichOption];
    else [model clearOption:whichOption];
}

@end

@implementation ORXYScannerController (private)
- (void) populatePortListPopup
{
	NSEnumerator *enumerator = [ORSerialPortList portEnumerator];
	ORSerialPort *aPort;
    [portListPopup removeAllItems];
    [portListPopup addItemWithTitle:@"--"];

	while (aPort = [enumerator nextObject]) {
        [portListPopup addItemWithTitle:[aPort name]];
	}    
}
@end

