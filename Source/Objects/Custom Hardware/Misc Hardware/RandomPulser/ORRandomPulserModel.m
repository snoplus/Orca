//--------------------------------------------------------
// ORRandomPulserModel
// Created by Mark  A. Howe on Tue Oct 12 2004
// Code partially generated by the OrcaCodeWizard. Written by Mark A. Howe.
// Copyright (c) 2004 CENPA, University of Washington. All rights reserved.
//-----------------------------------------------------------
//This program was prepared for the Regents of the University of 
//Washington at the Center for Experimental Nuclear Physics and 
//Astrophysics (CENPA) sponsored in part by the United States 
//Department of Energy (DOE) under Grant #DE-FG02-97ER41020. 
//The University has certain rights in the program pursuant to 
//the contract and the program should not be copied or distributed 
//outside your organization.  The DOE and the University of 
//Washington reserve all rights in the program. Neither the authors,
//University of Washington, or U.S. Government make any warranty, 
//express or implied, or assume any liability or responsibility 
//for the use of this software.
//-------------------------------------------------------------

#pragma mark ***Imported Files

#import "ORRandomPulserModel.h"
#import "ORIP408Model.h"


#pragma mark ¥¥¥Connection Strings
static NSString* ORRandomPulser408Connector 	= @"Random Pulser to 408 Connector";

#pragma mark ***External Strings
NSString* ORRandomPulserPulserRateChangedNotification		= @"ORRandomPulserPulserRateChangedNotification";
NSString* ORRandomPulserPulserAmpChangedNotification		= @"ORRandomPulserPulserAmpChangedNotification";
NSString* ORRandomPulserTTLPulseStateChangedNotification    = @"ORRandomPulserTTLPulseStateChangedNotification";
NSString* ORRandomPulserNegPulseStateChangedNotification    = @"ORRandomPulserNegPulseStateChangedNotification";
NSString* ORRandomPulserSettingsLock						= @"ORRandomPulserSettingsLock";

@implementation ORRandomPulserModel
- (id) init
{
	self = [super init];
	return self;
}

- (void) dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
	[super dealloc];
}

- (void) setUpImage
{
	[self setImage:[NSImage imageNamed:@"RandomPulser"]];
}

- (void) makeMainController
{
	[self linkToController:@"ORRandomPulserController"];
}

- (NSString*) helpURL
{
	return @"NCD/Random_Pulser.html";
}

- (NSMutableDictionary*) addParametersToDictionary:(NSMutableDictionary*)dictionary
{
    //get the time(UT!)
    NSMutableDictionary* objDictionary = [NSMutableDictionary dictionary];
    [objDictionary setObject:NSStringFromClass([self class])            forKey:@"Class Name"];
    [objDictionary setObject:[NSNumber numberWithInt:pulserRate]       forKey:@"pulserRate"];
    [objDictionary setObject:[NSNumber numberWithInt:pulserAmp]        forKey:@"pulserAmp"];
    [objDictionary setObject:[NSNumber numberWithBool:ttlPulserState]   forKey:@"ttlPulserState"];
    [objDictionary setObject:[NSNumber numberWithBool:negPulserState]   forKey:@"negPulserState"];    
    [dictionary setObject:objDictionary forKey:@"Random Pulser"];
    
    return objDictionary;
}

-(void)makeConnectors
{
    ORConnector* aConnector = [[ORConnector alloc] initAt:NSMakePoint(40, [self frame].size.height - kConnectorSize+2) withGuardian:self withObjectLink:self];
    [aConnector setConnectorImageType:kHorizontalRect];
    [[self connectors] setObject:aConnector forKey:ORRandomPulser408Connector];
    
	[ aConnector setConnectorType: 'IP1 ' ];
	[ aConnector addRestrictedConnectionType: 'IP2 ' ]; //can only connect to IP inputs
    
    [aConnector release];
}

-(void)registerNotificationObservers
{
    NSNotificationCenter* notifyCenter = [NSNotificationCenter defaultCenter];
    
    [notifyCenter addObserver: self
                     selector: @selector(vmePowerFailed:)
                         name: @"VmePowerFailedNotification"
                       object: nil];
    
    [notifyCenter addObserver: self
                     selector: @selector(loadHardware:)
                         name: ORRunStartedNotification
                       object: nil];
    
}

-(void)vmePowerFailed:(NSNotification*)aNotification
{
    powerFailed = YES;
}

-(void)loadHardware:(NSNotification*)aNotification
{
    if(powerFailed){
		NSLog(@"Random pulser loaded because crate power failed.\n");
		[self setHardware];
		powerFailed = NO;
	}
}


#pragma mark ***Accessors
- (BOOL) ttlPulserState
{
	return ttlPulserState;
}
- (void) setTtlPulserState:(BOOL)aNewState
{
	[[[self undoManager] prepareWithInvocationTarget:self] setTtlPulserState:ttlPulserState];
    
	ttlPulserState = aNewState;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORRandomPulserTTLPulseStateChangedNotification 
                          object: self ];
}
- (BOOL) negPulserState
{
	return negPulserState;
}
- (void) setNegPulserState:(BOOL)aNewState
{
	[[[self undoManager] prepareWithInvocationTarget:self] setNegPulserState:negPulserState];
    
	negPulserState = aNewState;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORRandomPulserNegPulseStateChangedNotification 
                          object: self ];
}


- (short) pulserAmp
{
	return pulserAmp;
}
- (void) setPulserAmp:(short)aNewPulserAmp
{
	[[[self undoManager] prepareWithInvocationTarget:self] setPulserAmp:pulserAmp];
    
	pulserAmp = aNewPulserAmp;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORRandomPulserPulserAmpChangedNotification 
                          object: self ];
}

- (float) pulserAmpmV
{
	return pulserAmp*3.68;
}
- (void) setPulserAmpmV:(float)aNewPulserAmp
{
	[self setPulserAmp:aNewPulserAmp/3.68];
}


- (int) pulserRate
{
	return pulserRate;
}
- (void) setPulserRate:(int)aNewPulserRate
{
	[[[self undoManager] prepareWithInvocationTarget:self] setPulserRate:pulserRate];
    
	pulserRate = aNewPulserRate;
    
	[[NSNotificationCenter defaultCenter] 
			postNotificationName:ORRandomPulserPulserRateChangedNotification 
                          object: self ];
}


#pragma mark ***Hardware Access
- (void) setHardware
{
    ORIP408Model* the408 = [self objectConnectedTo:ORRandomPulser408Connector];
    //build the output word...
    uint32_t dataWord = (negPulserState&0x1)<<25   |
        (ttlPulserState&0x1)<<24    | 
        (pulserAmp&0xff)<<16		| 
        (pulserRate&0xfff); 
    //[self flipBits:pulserRate&0xfff]; 
    [the408 setOutputWithMask:0xffffffff value:dataWord];	//load the data
}

- (void) readHardware
{
    ORIP408Model* the408 = [self objectConnectedTo:ORRandomPulser408Connector];
    uint32_t dataWord = ~[the408 getInputWithMask:0xffffffff];
    //decode the data word
	[self setNegPulserState:(dataWord>>25)&0x1];
	[self setTtlPulserState:(dataWord>>24)&0x1];
	[self setPulserAmp:(dataWord>>16)&0xff];
	//[self setPulserRate:[self flipBits:dataWord&0xfff]];
	[self setPulserRate:dataWord&0xfff];
}

-(int) flipBits:(int)aValue
{
	//special temp routine to flip the first 12 bits
	int newValue = 0;
	int i;
	for(i=0;i<12;i++){
		newValue |= ((aValue&(0x1<<i))>>i)<<(11-i);
	}
	return newValue;
}

#pragma mark ***Archival

static NSString* ORRandomPulserPulserRate	= @"ORRandomPulserPulserRate";
static NSString* ORRandomPulserPulserAmp	= @"ORRandomPulserPulserAmp";
static NSString* ORRandomTTLPulserState		= @"ORRandomTTLPulserState";
static NSString* ORRandomNegPulserState		= @"ORRandomNegPulserState";

- (id) initWithCoder:(NSCoder*)decoder
{
	self = [super initWithCoder:decoder];
	[[self undoManager] disableUndoRegistration];
    
	[self setPulserRate:[decoder decodeIntForKey:ORRandomPulserPulserRate]];
	[self setPulserAmp:[decoder decodeIntegerForKey:ORRandomPulserPulserAmp]];
	[self setTtlPulserState:[decoder decodeBoolForKey:ORRandomTTLPulserState]];
	[self setNegPulserState:[decoder decodeBoolForKey:ORRandomNegPulserState]];
    
	[[self undoManager] enableUndoRegistration];
    
    [self registerNotificationObservers];
    
	return self;
}
- (void) encodeWithCoder:(NSCoder*)encoder
{
    [super encodeWithCoder:encoder];
	[encoder encodeInteger:pulserRate forKey:ORRandomPulserPulserRate];
    [encoder encodeInteger:pulserAmp forKey:ORRandomPulserPulserAmp];
	[encoder encodeBool:ttlPulserState forKey:ORRandomTTLPulserState];
	[encoder encodeBool:negPulserState forKey:ORRandomNegPulserState];
    
}

@end

