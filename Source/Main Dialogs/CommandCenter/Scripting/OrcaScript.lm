%{
#include <stdlib.h>
#include "OrcaScript.h"
#include <string.h>
#include "OrcaScript.tab.h"

void OrcaScripterror(char *);
void comment();
void singleLineComment();
void grabString();
void yyreset_state();
char escapedCharacterInString(char c);
long num_lines = 1;
extern NSMutableArray* nodeList;
extern NSMutableArray* functionList;
static NSDictionary* map_dict = nil;
%}

D			[0-9]
L			[a-zA-Z_$]
H			[a-fA-F0-9]
E			[Ee][+-]?{D}+

%%

{D}+{E}?			{
						strncpy(OrcaScriptlval.cString,yytext,yyleng);
						OrcaScriptlval.cString[yyleng] = '\0';
						return CONSTANT;
					}
					
{D}*"."{D}+({E})	{
						strncpy(OrcaScriptlval.cString,yytext,yyleng);
						OrcaScriptlval.cString[yyleng] = '\0';
						return CONSTANT;
					}
					
{D}*"."{D}*({E})?	{
						strncpy(OrcaScriptlval.cString,yytext,yyleng);
						OrcaScriptlval.cString[yyleng] = '\0';
						return CONSTANT;
					}

0[xX]{H}+			{
						strncpy(OrcaScriptlval.cString,yytext,yyleng);
						OrcaScriptlval.cString[yyleng] = '\0';
						unsigned long n = strtoul(OrcaScriptlval.cString,0,16);
						sprintf(OrcaScriptlval.cString,"%lu",n);
						return CONSTANT;
					}

[-()<>=+*/%!;:\[\],{}~^&|?.@]	{ return *yytext; }

"function"		return FUNCTION;
"\""			{ grabString(); return STRING;}
"/*"			{ comment(); }
"//"			{ singleLineComment(); }
">>="			return RIGHT_ASSIGN;
"<<="			return LEFT_ASSIGN;
"+="			return ADD_ASSIGN;
"-="			return SUB_ASSIGN;
"*="			return MUL_ASSIGN;
"/="			return DIV_ASSIGN;
"|="			return OR_ASSIGN;
"%="			return MOD_ASSIGN;
"&="			return AND_ASSIGN;
"^="			return XOR_ASSIGN;
"++"			return INC_OP;
"--"			return DEC_OP;
">="            return GE_OP;
"<="            return LE_OP;
"=="            return EQ_OP;
"!="            return NE_OP;
"&&"			return AND_OP;
"||"			return OR_OP;
"#"				return HASH;
"<<"			return LEFT_OP;
">>"			return RIGHT_OP;

"do"			return DO;
"while"         return WHILE;
"for"			return FOR;
"in"			return IN;
"if"            return IF;
"unless"        return UNLESS;
"switch"        return SWITCH;
"case"			return CASE;
"default"		return DEFAULT;
"else"          return ELSE;
"print"         return PRINT;
"printfile"     return PRINTFILE;
"display"       return DISPLAY;
"find"			return FIND;
"make"			return MAKE;
"break"			return BREAK;
"exit"			return EXIT;
"continue"		return CONTINUE;
"return"		return RETURN;
"sleep"			return SLEEP;
"yield"			return YIELD;
"waituntil"		return WAITUNTIL;
"waitUntil"		return WAITUNTIL;
"hex"			return HEX;
"array"			return MAKEARRAY;
"string"		return MAKESTRING;
"strcat"		return CATSTRING;
"point"			return MAKEPOINT;
"rect"			return MAKERECT;
"range"			return MAKERANGE;
"size"			return MAKESIZE;
"postalarm"		return ALARM;
"postAlarm"		return ALARM;
"clearalarm"	return CLEAR;
"clearAlarm"	return CLEAR;
"logfile"		return LOGFILE;
"nsdictionary"	return NSDICTIONARY;
"nsdatecomponents"  return NSDATECOMPONENTS;
"nsarray"		return NSARRAY;
"nsexception"	return MAKEEXCEPTION;
"time"			return TIME;
"sci"			return SCI;
"fixed"			return FIXED;
"shell"			return SHELL;
"stringFromFile"	return STRINGFROMFILE;
"writeLine"			return WRITELINETOFILE;
"deleteFile"		return DELETEFILE;
"nsfilemanager"		return NSFILEMANAGER;
"import"			return IMPORT;
"confirm"			return CONFIRM;
"request"			return REQUEST;
"show"              return SHOW;
"seedRandom"        return SEEDRANDOM;
"random"            return RANDOM;
"try"               return TRY;
"catch"             return CATCH;
"finally"           return FINALLY;
"throw"             return THROW;

{L}({L}|{D})*   {
                strncpy(OrcaScriptlval.symKey,yytext,yyleng);
				OrcaScriptlval.symKey[yyleng] = '\0';
                return VARIABLE;
				}
			
[ \t]+			;       /* ignore whitespace */
[\xA0]+			;       /* ignore whitespace */
[\xC2]+			;       /* ignore whitespace */

\n				{++num_lines;}

.               OrcaScripterror("Unknown character");

%%


int yywrap(void) 
{
    return 1;
}

void OrcaScripterror(char* s)
{
	NSLog(@"<%s> line %d\n",s,num_lines+1);
	[nodeList release];
	nodeList = nil;
	[functionList release];
	functionList = nil;
}

void grabString()
{
	int i=0;
	char c;
    bool slash_seen = false;
	while ((c = input()) != '"' || slash_seen) {
        if (slash_seen) {
            // If we saw a slash last time, get the correct escaped character.
            c = escapedCharacterInString(c);
            slash_seen = false;
        } else {
            // Check if the current character is a slash
            slash_seen = (c == '\\');
            // If we saw an escape slash, cycle to the next output.
            if (slash_seen) continue;
        }
		OrcaScriptlval.cString[i++] = c;
		if(i>sizeof(OrcaScriptlval)-2){
			NSLog(@"<line %d> String too long. Truncated to length %d\n",num_lines,sizeof(OrcaScriptlval));
			break;
		}
	}
	OrcaScriptlval.cString[i] = '\0';
}

void comment()
{
	//just eat comments, carefully counting lines as needed
	char c, c1;
loop:
	while ((c = input()) != '*' && c != 0){
		if(c=='\n')num_lines++;
	}

	if ((c1 = input()) != '/' && c != 0){
		unput(c1);
		goto loop;
	}
}

void singleLineComment()
{
	//just eat comments, carefully counting lines as needed
	char c;
	while ((c = input())){
		if(c=='\n'){
			num_lines++;
			break;
		}
	}
}

void yyreset_state()
{
	num_lines = 0;
	[nodeList release];
	nodeList = nil;
	[functionList release];
	functionList = nil;
	BEGIN(INITIAL);
}

char escapedCharacterInString(char c)
{
    if (!map_dict) {
        /*
        map_dict = [@{
            @"a" : @"\a",
            @"b" : @"\b",
            @"f" : @"\f",
            @"n" : @"\n",
            @"r" : @"\r",
            @"t" : @"\t",
            @"v" : @"\v",
            @"\\" : @"\\",
            @"\"" : @"\"",
            @"\'" : @"\'",
            @"\\" : @"\\",
            @"\?" : @"\?"
        } retain];
*/
        map_dict = [[NSDictionary dictionaryWithObjectsAndKeys:
        @"\a", @"a",
        @"\b", @"b",
        @"\f" , @"f",
        @"\n" , @"n",
        @"\r" , @"r",
        @"\t" , @"t",
        @"\v" , @"v",
        @"\\" , @"\\",
        @"\"" , @"\"",
        @"\'" , @"\'",
        @"\\" , @"\\",
        @"\?" , @"\?",
        nil
        ] retain];
    }
    NSString* temp_str = [map_dict objectForKey:[NSString stringWithFormat:@"%c",c]];
    if (!temp_str) return c;
    return [temp_str characterAtIndex:0];

}