%{
#import <stdio.h>
#import <stdlib.h>
#import <stdarg.h>
#import "OrcaScript.h"
#import "NodeTree.h"
	
	/* prototypes */
	void addFunction(id nodeName,id node);
	void importFile(id node);
	void addNode(id node);
	id executionNode(int oper, ...);
	id identifierNode(char* aString);
	id selectorNode(char* aString);
	id operationSymbolNode(int aValue);
	id constantNode(char* value);
	id stringNode(char* aString);
	
	int yylex(void);
	NSMutableDictionary* functionList = nil;
	NSMutableArray* nodeList = nil;
	extern void OrcaScripterror(char *);
	extern long num_lines;
%}

%union {
    char symKey[1024];	/* symbol table key i.e. a variable name */
	char cString[1024];	/* a string*/
    id   nPtr;          /* node pointer */
};

%token <cString> CONSTANT
%token <cString> STRING
%token <symKey> VARIABLE
%token FUNCTION WHILE DO FOR IN IF PRINT LOGFILE PRINTFILE FIND MAKE BREAK EXIT CONTINUE SLEEP YIELD RETURN WAITUNTIL HEX MAKEARRAY
%token INC_OP DEC_OP ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN ORQUALS LEFT_ASSIGN RIGHT_ASSIGN TIME FIXED SCI 
%token AND_ASSIGN XOR_ASSIGN MOD_ASSIGN OR_ASSIGN MAKESTRING CATSTRING SWITCH CASE DEFAULT MAKEPOINT MAKERECT MAKESIZE SHELL
%token LEFT_OP RIGHT_OP  EQ_OP NE_OP GE_OP LE_OP AND_OP OR_OP ALARM CLEAR UNLESS DISPLAY NSDICTIONARY NSDATECOMPONENTS NSARRAY MAKEEXCEPTION MAKERANGE
%token NSFILEMANAGER STRINGFROMFILE WRITELINETOFILE DELETEFILE IMPORT HASH CONFIRM REQUEST SHOW SEEDRANDOM RANDOM TRY CATCH FINALLY THROW
%nonassoc ELSE

%left '+' '-' 
%left  '%' '*' '/' ','
%nonassoc NOT UMINUS INVERT

%type <nPtr> program  functionCall statement arrayElement make_string  cat_string break_statement 
%type <nPtr> hex_str expr statement_list objC findObj makeObj selection_statement iteration_statement printfile_statement try_statement throw_statement
%type <nPtr> objVar objVar_list print_list log_list print_statement log_statement arg_list argName_list clear_statement keyObjectPairs objListForArray
%type <nPtr> compound_statement expression_statement jump_statement special_statement ns_object sci_statement fixed_statement
%type <nPtr> case_statement case_list constant_expr point_str rect_str size_str wait_statement alarm_statement
%type <nPtr> primary_expr multiplicative_expr postfix_expr unary_expr  additive_expr time_statement confirm_statement
%type <nPtr> shift_expr relational_expr equality_expr and_expr exclusive_or_expr inclusive_or_expr shell_statement
%type <nPtr> logical_and_expr logical_or_expr conditional_expr assignment_expr leftArrayElement objectPtr rng_str file_str writeLineToFile_statement request_statement show_statement random_gen

%start program

%%

program
:importlist funclist	{return 1;}
| funclist  {return 1;}
;

importlist
: importdef
| importlist importdef
;

importdef
: HASH IMPORT STRING										{ importFile(stringNode($3));}
;

funclist
:  funcdef
| funclist funcdef
;

funcdef
: FUNCTION VARIABLE '(' ')' '{' function '}'				{ addFunction(identifierNode($2),nil); }
| FUNCTION VARIABLE '(' argName_list ')' '{' function '}'	{ addFunction(identifierNode($2),$4); }
;


function
: function statement		{ addNode($2); }
| /*NULL*/
;

statement
: compound_statement		{ $$ = $1;}
| expression_statement		{ $$ = $1;}
| selection_statement		{ $$ = $1;}
| try_statement             { $$ = $1;}
| throw_statement           { $$ = $1;}
| iteration_statement		{ $$ = $1;}
| jump_statement			{ $$ = $1;}
| special_statement			{ $$ = $1;}
| VARIABLE ';'				{ OrcaScripterror ("unrecognized keyword"); return 1;}
;

special_statement 
: objC ';'							 { $$ = $1; }
| shell_statement ';'				 { $$ = $1; }
| print_statement ';'				 { $$ = $1; }
| printfile_statement ';'            { $$ = $1; }
| log_statement ';' 				 { $$ = $1; }
| wait_statement ';'				 { $$ = $1; }
| alarm_statement ';'				 { $$ = $1; }
| clear_statement ';'				 { $$ = $1; }
| sci_statement ';'					 { $$ = $1; }
| fixed_statement ';'				 { $$ = $1; }
| writeLineToFile_statement ';'		 { $$ = $1; }
| SLEEP '(' expr ')' ';'			 { $$ = executionNode(SLEEP,$3,nil);}
| YIELD '(' expr ')' ';'			 { $$ = executionNode(YIELD,$3,nil);}
| DELETEFILE '(' expr ')' ';'		 { $$ = executionNode(DELETEFILE,$3,nil);}
| DISPLAY '(' STRING ',' expr ')' ';'{ $$ = executionNode(DISPLAY,stringNode($3),$5,nil);}
| MAKEARRAY arrayElement ';'		 { $$ = $2; }
| VARIABLE '=' time_statement ';'	 { $$ = executionNode('=', identifierNode($1), $3,nil);}
| VARIABLE '=' objC ';'				 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' findObj ';'			 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' makeObj ';'			 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' make_string ';'		 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' cat_string ';'		 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' wait_statement ';'	 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' ns_object ';'	     { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' sci_statement ';'	 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' fixed_statement ';'	 { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' confirm_statement ';' { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' request_statement ';' { $$ = executionNode('=', identifierNode($1), $3,nil); }
| VARIABLE '=' show_statement ';'    { $$ = executionNode('=', identifierNode($1), $3,nil); }
| SEEDRANDOM '(' ')' ';'			 { $$ = executionNode(SEEDRANDOM,nil);}
| VARIABLE '=' random_gen ';'	     { $$ = executionNode('=', identifierNode($1), $3,nil); }
;

ns_object
: NSDICTIONARY '('')'                            { $$ = executionNode(NSDICTIONARY,nil);}
| NSDICTIONARY '(' keyObjectPairs ')'            { $$ = executionNode(NSDICTIONARY, $3,nil); }
| NSARRAY '('')'                                 { $$ = executionNode(NSARRAY,nil);}
| NSARRAY '(' objListForArray ')'                { $$ = executionNode(NSARRAY,$3,nil);}
| NSFILEMANAGER '('')'                           { $$ = executionNode(NSFILEMANAGER,nil);}
| NSDATECOMPONENTS '('')'                        { $$ = executionNode(NSDATECOMPONENTS,nil);}
| MAKEEXCEPTION '(' expr ',' expr ',' expr ')'   { $$ = executionNode(MAKEEXCEPTION,$3,$5,$7,nil);}
| '@' '[' objListForArray ']'                    { $$ = executionNode(NSARRAY, $3,nil); }
| '@' '{' keyObjectPairs '}'                     { $$ = executionNode(NSDICTIONARY, $3,nil); }
;


random_gen
: RANDOM '(' expr ',' expr ')'		{ $$ = executionNode(RANDOM,$3,$5,nil);}
;

wait_statement
: WAITUNTIL '(' expr ')'			{ $$ = executionNode(WAITUNTIL,$3,nil);}
| WAITUNTIL '(' expr ',' expr ')'	{ $$ = executionNode(kWaitTimeOut,$3,$5,nil);}
;

time_statement
: TIME '(' ')'						{ $$ = executionNode(TIME,nil);}
;

confirm_statement
: CONFIRM '(' expr ')'					{ $$ = executionNode(CONFIRM,$3,nil);}
| CONFIRM '(' expr ',' expr ')'         { $$ = executionNode(kConfirmTimeOut,$3,$5,nil);}
;

request_statement
: REQUEST '(' argName_list ')'					{ $$ = executionNode(REQUEST,$3,nil);}
;

show_statement
: SHOW '(' argName_list ')'					{ $$ = executionNode(SHOW,$3,nil);}
;


clear_statement
: CLEAR '(' expr ')'				{ $$ = executionNode(CLEAR,$3,nil);}
;

alarm_statement
: ALARM '(' expr ',' expr ')'			{ $$ = executionNode(ALARM,$3,$5,nil);}
| ALARM '(' expr ',' expr ',' expr ')'	{ $$ = executionNode(ALARM,$3,$5,$7,nil);}
;


compound_statement 
: '{' '}'						{ $$ = executionNode(';', nil); }
| '{' statement_list '}'		{ $$ = $2;}
;							

statement_list
: statement						{ $$ = $1; }
| statement_list statement		{ $$ = executionNode(';', $1, $2,nil); }
;

expression_statement
: ';'							{ $$ = executionNode(';', nil); }
| expr ';'						{ $$ = $1;}
;		

selection_statement
: IF '(' expr ')' statement					{ $$ = executionNode(IF, $3, $5,nil); }
| IF '(' expr ')' statement ELSE statement	{ $$ = executionNode(IF, $3, $5, $7,nil); }
| SWITCH '(' expr ')'  '{' case_list '}'	{ $$ = executionNode(SWITCH, $3, $6,nil); }
| UNLESS '(' expr ')' statement				{ $$ = executionNode(UNLESS, $3, $5, nil); }
;

try_statement
: TRY compound_statement CATCH '(' expr ')' compound_statement                               { $$ = executionNode(TRY, $2, $7, $5, nil); }
| TRY compound_statement CATCH '(' expr ')' compound_statement FINALLY compound_statement	 { $$ = executionNode(TRY, $2, $7, $5, $9, nil); }
;

throw_statement
: THROW '(' expr ')'';'         { $$ = executionNode(THROW, $3, nil); }
;

iteration_statement
: WHILE '(' expr ')' statement					{ $$ = executionNode(WHILE, $3, $5,nil); }
| DO statement WHILE '(' expr ')' ';'			{ $$ = executionNode(DO, $2, $5,nil); }
| FOR '(' expr ';' expr ';' expr ')' statement	{ $$ = executionNode(FOR, $3,$5,$7,$9,nil); }
| FOR '(' VARIABLE IN VARIABLE ')' statement            { $$ = executionNode(FOR, identifierNode($3),identifierNode($5),$7,nil); }
;

jump_statement 
: CONTINUE ';'		{ $$ = executionNode(CONTINUE,nil);}
| BREAK ';'			{ $$ = executionNode(BREAK,nil); }
| RETURN ';'		{ $$ = executionNode(RETURN,nil);}
| EXIT ';'			{ $$ = executionNode(EXIT,nil);}
| RETURN expr ';'	{ $$ = executionNode(RETURN,$2,nil);}
;

case_list
: case_statement							{ $$ = $1;}
| case_list case_statement					{ $$ = executionNode(';', $1, $2,nil); }
;

case_statement
: CASE constant_expr ':' statement_list	break_statement		{ $$ = executionNode(CASE, $2, $4, $5,nil); }
| CASE constant_expr ':' break_statement					{ $$ = executionNode(CASE, $2, $4, nil); }
| DEFAULT ':' statement_list	break_statement				{ $$ = executionNode(DEFAULT, $3, $4, nil); }
;

break_statement
: BREAK	';'							{ $$ = executionNode(BREAK,nil); }


//array declaration
//ex: array b[10];
arrayElement
: VARIABLE '[' expr ']'							{ $$ = executionNode(kDefineArray, identifierNode($1), $3, nil);}
| VARIABLE '[' expr ']' '=' '{' arg_list '}'	{ $$ = executionNode(kArrayListAssign,identifierNode($1),$3,$7,nil);}
;

//array lvar use, ex: a[1] = 10;
leftArrayElement
: VARIABLE '[' expr ']'				{ $$ = executionNode(kLeftArray, identifierNode($1), $3, nil);}
;

//the mass of syntax that follows takes care of thing like a += 1; a++; 
//etc... basically anything that produces a value 
constant_expr
: CONSTANT					{ $$ = constantNode($1); }
;

expr
: assignment_expr			{ $$ = $1; }
;

primary_expr
: VARIABLE					{ $$ = identifierNode($1); }
| CONSTANT					{ $$ = constantNode($1); }
| STRING					{ $$ = stringNode($1); }
| '@' STRING				{ $$ = stringNode($2); }
| make_string               { $$ = $1; }
| cat_string                { $$ = $1; }
| functionCall				{ $$ = $1; }
| objC						{ $$ = $1; }
| findObj					{ $$ = $1; }
| leftArrayElement			{ $$ = $1; }
| '(' expr ')'				{ $$ = $2; }
| confirm_statement			{ $$ = $1; }
| request_statement			{ $$ = $1; }
| wait_statement			{ $$ = $1; }
| makeObj                   { $$ = $1; }
| time_statement            { $$ = $1; }
;

postfix_expr
: primary_expr				{ $$ = $1;}
| postfix_expr INC_OP		{ $$ = executionNode(kPostInc,$1,nil);}
| postfix_expr DEC_OP		{ $$ = executionNode(kPostDec,$1,nil);}
| leftArrayElement INC_OP   { OrcaScripterror ("Array++ not allowed"); return 1;}
| leftArrayElement DEC_OP   { OrcaScripterror ("Array-- not allowed"); return 1;}
;

unary_expr
: postfix_expr				{ $$ = $1;}
| INC_OP unary_expr			{ $$ = executionNode(kPreInc,$2,nil);}
| DEC_OP unary_expr			{ $$ = executionNode(kPreDec,$2,nil);}
| '-' primary_expr %prec UMINUS		{ $$ = executionNode(UMINUS, $2,nil); }
| '!' primary_expr %prec NOT		{ $$ = executionNode('!', $2,nil); }
| '~' primary_expr %prec INVERT		{ $$ = executionNode('~', $2,nil); }
;

multiplicative_expr
: unary_expr								{$$ = $1;}
| multiplicative_expr '*' unary_expr		{ $$ = executionNode('*', $1, $3,nil); }
| multiplicative_expr '/' unary_expr		{ $$ = executionNode('/', $1, $3,nil); }
| multiplicative_expr '%' unary_expr		{ $$ = executionNode('%', $1, $3,nil); }
;

additive_expr
: multiplicative_expr						{ $$ = $1;}
| additive_expr '+' multiplicative_expr		{ $$ = executionNode('+', $1, $3,nil); }
| additive_expr '-' multiplicative_expr		{ $$ = executionNode('-', $1, $3,nil); }
;

shift_expr
: additive_expr								{ $$ = $1;}
| shift_expr LEFT_OP additive_expr			{ $$ = executionNode(LEFT_OP,  $1, $3,nil); }
| shift_expr RIGHT_OP additive_expr			{ $$ = executionNode(RIGHT_OP,  $1, $3,nil); }
;

relational_expr
: shift_expr								{ $$ = $1;}
| relational_expr '<' shift_expr			{ $$ = executionNode('<',  $1, $3,nil); }
| relational_expr '>' shift_expr			{ $$ = executionNode('>',  $1, $3,nil); }
| relational_expr LE_OP shift_expr			{ $$ = executionNode(LE_OP,  $1, $3,nil); }
| relational_expr GE_OP shift_expr			{ $$ = executionNode(GE_OP,  $1, $3,nil); }
;

equality_expr
: relational_expr								{ $$ = $1;}
| equality_expr EQ_OP relational_expr			{ $$ = executionNode(EQ_OP,  $1, $3,nil); }
| equality_expr NE_OP relational_expr			{ $$ = executionNode(NE_OP,  $1, $3,nil); }
;


and_expr
: equality_expr									{ $$ = $1;}
| and_expr '&' equality_expr					{ $$ = executionNode('&',  $1, $3,nil); }
;

exclusive_or_expr
: and_expr										{ $$ = $1;}
| exclusive_or_expr '^' and_expr				{ $$ = executionNode('^',  $1, $3,nil); }
;

inclusive_or_expr
: exclusive_or_expr								{ $$ = $1;}
| inclusive_or_expr '|' exclusive_or_expr		{ $$ = executionNode('|',  $1, $3,nil); }
;

logical_and_expr
: inclusive_or_expr								{ $$ = $1;}
| logical_and_expr AND_OP inclusive_or_expr		{ $$ = executionNode(AND_OP,  $1, $3,nil); }
;

logical_or_expr
: logical_and_expr								{ $$ = $1;}
| logical_or_expr OR_OP logical_and_expr		{ $$ = executionNode(OR_OP,  $1, $3,nil); }
;

conditional_expr
: logical_or_expr											{ $$ = $1;}
| logical_or_expr '?' logical_or_expr ':' conditional_expr	{ $$ = executionNode(kConditional,$1,$3,$5,nil);}
;

assignment_expr
: conditional_expr									{ $$ = $1;}
| VARIABLE '=' assignment_expr						{ $$ = executionNode('=',identifierNode($1),$3,nil);}
| leftArrayElement '=' expr							{ $$ = executionNode(kArrayAssign, $1, $3, nil); }
| unary_expr MUL_ASSIGN assignment_expr				{ $$ = executionNode(MUL_ASSIGN,$1,$3,nil);}
| unary_expr DIV_ASSIGN assignment_expr				{ $$ = executionNode(DIV_ASSIGN,$1,$3,nil);}
| unary_expr MOD_ASSIGN assignment_expr				{ $$ = executionNode(MOD_ASSIGN,$1,$3,nil);}
| unary_expr ADD_ASSIGN assignment_expr				{ $$ = executionNode(ADD_ASSIGN,$1,$3,nil);}
| unary_expr SUB_ASSIGN assignment_expr				{ $$ = executionNode(SUB_ASSIGN,$1,$3,nil);}
| unary_expr LEFT_ASSIGN assignment_expr			{ $$ = executionNode(LEFT_ASSIGN,$1,$3,nil);}
| unary_expr RIGHT_ASSIGN assignment_expr			{ $$ = executionNode(RIGHT_ASSIGN,$1,$3,nil);}
| unary_expr AND_ASSIGN assignment_expr				{ $$ = executionNode(AND_ASSIGN,$1,$3,nil);}
| unary_expr XOR_ASSIGN assignment_expr				{ $$ = executionNode(XOR_ASSIGN,$1,$3,nil);}
| unary_expr OR_ASSIGN assignment_expr				{ $$ = executionNode(OR_ASSIGN,$1,$3,nil);}
| objC                                              { $$ = $1; }
| make_string										{ $$ = $1; }
| cat_string										{ $$ = $1; }
| sci_statement										{ $$ = $1; }
| fixed_statement									{ $$ = $1; }
| file_str											{ $$ = $1; }
| hex_str											{ $$ = $1; }
| time_statement									{ $$ = $1; }
| point_str											{ $$ = $1; }
| rect_str											{ $$ = $1; }
| size_str											{ $$ = $1; }
| rng_str											{ $$ = $1; }
| wait_statement                                    { $$ = $1; }
| confirm_statement                                 { $$ = $1; }
| request_statement                                 { $$ = $1; }
| show_statement                                    { $$ = $1; }
| ns_object                                         { $$ = $1; }
;

//create a string from a list of variables...useful only for printing and method calls that take a string
make_string
: MAKESTRING '(' print_list ')' 	{ $$ = executionNode(MAKESTRING, $3,nil); }
;

cat_string
: CATSTRING '(' print_list ')' 	{ $$ = executionNode(CATSTRING, $3,nil); }
;

//---print stuff-----------------------------------------------------------
//ex: print "test:",i;
//ex: print ("test:",i);
print_statement
: PRINT '(' print_list ')' 	{ $$ = executionNode(PRINT, $3,nil); }
| PRINT  print_list  		{ $$ = executionNode(PRINT, $2,nil); }
;

//ex: writeLine ("test:",1,",",2,",",a);
//ex: writeLine "test:",1,",",2,",",a;
writeLineToFile_statement
: WRITELINETOFILE '(' primary_expr ',' print_list ')'	{ $$ = executionNode(WRITELINETOFILE, $3,$5,nil); }
| WRITELINETOFILE  primary_expr ',' print_list			{ $$ = executionNode(WRITELINETOFILE, $2,$4,nil); }
;

//---shell stuff-----------------------------------------------------------
shell_statement
: SHELL  print_list  		{ $$ = executionNode(SHELL, $2,nil); }
;


printfile_statement
: PRINTFILE '(' print_list ')' 	{ $$ = executionNode(PRINTFILE, $3,nil); }
| PRINTFILE  print_list  		{ $$ = executionNode(PRINTFILE, $2,nil); }
;

//the arguments for the print or string functions
print_list
: assignment_expr					{ $$ = $1; }
| print_list ',' assignment_expr	{ $$ = executionNode(kTightAppend, $1, $3,nil); }
;

log_statement
: LOGFILE '(' log_list ')'	{ $$ = executionNode(LOGFILE, $3,nil); }
| LOGFILE  log_list			{ $$ = executionNode(LOGFILE, $2,nil); }
;

log_list
: assignment_expr				{ $$ = $1; }
| log_list ',' assignment_expr	{ $$ = executionNode(kTightAppend, $1, $3,nil); }
;


//convert a value to a hex string..useful for printing only
hex_str
: HEX '(' expr ')'				{ $$ = executionNode(HEX,$3,nil);}
;

//---ObjC stuff--------------------------------------------------------------
//handle 'objC method syntax. ex: [obj setThreshold:chan toValue:55]
//							      [obj setLabel:"Test"]
objectPtr
: findObj						{ $$ = $1; }
| objC							{ $$ = $1; }
| file_str						{ $$ = $1; } //special case -- file_str returns an NSString
| VARIABLE						{ $$ = identifierNode($1);}
| leftArrayElement              { $$ = $1;}
;

objC
: '[' objectPtr VARIABLE ']'	{ $$ = executionNode('@', $2, selectorNode($3),nil);}
| '[' objectPtr objVar_list ']'	{ $$ = executionNode('@', $2,  $3 ,nil);}
;

objVar_list
: objVar						{ $$ = $1;}
| objVar_list objVar			{ $$ = executionNode(kObjList, $1, $2,nil); }
;

objVar
: VARIABLE ':' assignment_expr	{ $$ = executionNode(kSelName, selectorNode($1), $3 ,nil); }
;

//set up a NSPoint object
point_str
: MAKEPOINT '(' expr ',' expr ')'				{ $$ = executionNode(MAKEPOINT,$3,$5,nil);}
;

rect_str
: MAKERECT '(' expr ',' expr ',' expr ',' expr ')'	{ $$ = executionNode(MAKERECT,$3,$5,$7,$9,nil);}
;

size_str
: MAKESIZE '(' expr ',' expr  ')'	{ $$ = executionNode(MAKESIZE,$3,$5,nil);}
;

rng_str
: MAKERANGE '(' expr ',' expr ')'	{ $$ = executionNode(MAKERANGE,$3,$5,nil);}
;

file_str
: STRINGFROMFILE '(' expr ')'			{ $$ = executionNode(STRINGFROMFILE,$3,nil);}
;



//--------------------------------------------------------------------

//ex: find(ORRunModel)
//ex: find(ORShaperModel,3)
//ex: find(ORShaperModel,1,3)
findObj
: FIND '(' VARIABLE ','  expr ')'						{ $$ = executionNode(FIND, identifierNode($3), $5, nil); }
| FIND '(' VARIABLE ','  expr ','  expr ')'				{ $$ = executionNode(FIND, identifierNode($3), $5, $7, nil); }
| FIND '(' VARIABLE ','  expr ','  expr ','  expr')' 	{ $$ = executionNode(FIND, identifierNode($3), $5, $7, $9,nil); }
| FIND '(' VARIABLE ')'									{ $$ = executionNode(FIND, identifierNode($3) ,nil); }
;

sci_statement
: SCI '(' VARIABLE ',' expr  ')'						{ $$ = executionNode(SCI, identifierNode($3),$5, nil); }
;

fixed_statement
: FIXED '(' VARIABLE ',' expr  ')'						{ $$ = executionNode(FIXED, identifierNode($3),$5, nil); }
;


//ex: make(ORRunModel)
makeObj
: MAKE '(' VARIABLE ')'						{ $$ = executionNode(MAKE, identifierNode($3), nil); }
;

//ex: doTest(1,a,c)
functionCall
: VARIABLE '('')'			{ $$ = executionNode(kFuncCall,identifierNode($1),nil); }
| VARIABLE '(' arg_list ')'	{ $$ = executionNode(kFuncCall,identifierNode($1),$3,nil); }
;

//the list of arguments in a function call. ex: doTest(1,a,c)
arg_list
: expr					{ $$ = $1; }
| arg_list ',' expr		{ $$ = executionNode(kMakeArgList, $1, $3,nil); }
;

//the list of arguments in a function definition. ex: function doTest(1,a,c)
argName_list
: VARIABLE						{ $$ = stringNode($1);}
| argName_list ',' VARIABLE		{ $$ = executionNode(',', $1, stringNode($3),nil); }
;

keyObjectPairs
: expr ':' expr                     { $$ = executionNode('#',$1, $3,nil);}
| keyObjectPairs ',' expr ':' expr	{ $$ = executionNode('#', $1, $3, $5,nil); }
;

objListForArray
: expr                              { $$ = executionNode('$',$1,nil);}
| objListForArray ',' expr          { $$ = executionNode('$', $1, $3,nil); }
;


%%

//----------------------------------------------------------------------------------------------
// node creation functions.
//----------------------------------------------------------------------------------------------
id constantNode(char* aNumberString) 
{
	Node* p = [[Node alloc] init]; 
	[p setType:typeCon];
	[p setLine:num_lines+1];
	[p setNodeData:[NSDecimalNumber decimalNumberWithString:[NSString stringWithCString:aNumberString encoding:NSASCIIStringEncoding]]];
    return [p autorelease];
}

id stringNode(char* aString) 
{
	Node* p = [[Node alloc] init];
	[p setType:typeStr];
	[p setLine:num_lines+1];
	NSString* s = [NSString stringWithCString:aString encoding:NSASCIIStringEncoding];
	[p setNodeData:s];
    return [p autorelease];
}

id identifierNode(char* aString) 
{
	Node* p = [[Node alloc] init];
	[p setType:typeId];
	[p setLine:num_lines+1];
	[p setNodeData:[NSString stringWithCString:aString encoding:NSASCIIStringEncoding]];
    return [p autorelease];
}

id selectorNode(char* aString) 
{
	Node* p = [[Node alloc] init];
	[p setType:typeSelVar];
	[p setLine:num_lines+1];
	[p setNodeData:[NSString stringWithCString:aString encoding:NSASCIIStringEncoding]];
    return [p autorelease];
}

id operationSymbolNode(int aValue) 
{
	Node* p = [[Node alloc] init];
	[p setLine:num_lines+1];
	[p setType:typeOperationSymbol];
	[p setNodeData:[NSNumber numberWithInt:aValue]];
    return [p autorelease];
}

id executionNode(int oper, ...) 
{
    va_list ap;
	Node* p = [[Node alloc] init];
	//[p setLine:num_lines+1];
	[p setType:typeOpr];
	OprNode* leaf = [[OprNode alloc] init];
	[leaf setLine:num_lines+1];
	[leaf setOperatorTag:oper];
	[p setNodeData:leaf];
	
    va_start(ap, oper);
	
	do {
		id arg = va_arg(ap,id);
		if(!arg)break;
		[leaf addOperand: arg];
	} while(1);
	
	[leaf release];
	
    va_end(ap);
    return [p autorelease];
}

void addNode(id node)
{
	if(!nodeList)nodeList = [[NSMutableArray array] retain];
	[nodeList addObject:node];
}

void addFunction(id node,id nodeArgs)
{
	if(!functionList) functionList = [[NSMutableDictionary dictionary] retain];
	if(!nodeList)nodeList = [[NSMutableArray array] retain];
	[functionList setObject:nodeList forKey:[node nodeData]];
	if(nodeArgs){
		[functionList setObject:nodeArgs forKey:[NSString stringWithFormat:@"%@_ArgNode",[node nodeData]]];
	}
	[nodeList release];
	nodeList = nil;
}

void importFile(id node)
{
	//do nothing, just here as placeholder
}
